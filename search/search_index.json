{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cours de Techniques Web","text":""},{"location":"#bienvenu-sur-les-support-de-cours-de-lue09","title":"Bienvenu sur les support de cours de l'UE09","text":"<p>UE09</p> <p>Histoire du web</p>"},{"location":"#html","title":"HTML","text":"<p>Base de l'HTML</p> <p>Balise</p> <p>S\u00e9matique</p> <p>Formulaire</p>"},{"location":"00_UE09/","title":"EU09 Techniques Web","text":""},{"location":"00_UE09/#presentation-du-cours","title":"Pr\u00e9sentation du cours","text":"<p>Ce cours de d\u00e9veloppement web s'adresse aux \u00e9tudiants en premi\u00e8re ann\u00e9e de bachelier en intelligence artificielle. Il a pour objectif de vous initier aux bases de la cr\u00e9ation et du d\u00e9veloppement d'applications web tout en \u00e9tablissant des liens concrets avec le domaine de l'IA. Ce cours pr\u00e9sentera les langages qui sont \u00e0 la base du web :</p> <p>HTML (HyperText Markup Language) sera le point de d\u00e9part, o\u00f9 vous apprendrez \u00e0 structurer et organiser le contenu d\u2019une page web. Nous encha\u00eenerons avec CSS (Cascading Style Sheets) pour habiller ces pages d'un design esth\u00e9tique et attrayant.</p> <p>Ensuite, nous aborderons JavaScript, un langage de programmation dynamique, qui vous permettra de donner vie \u00e0 vos sites web gr\u00e2ce \u00e0 des interactions.</p> <p>La seconde partie du cours sera d\u00e9di\u00e9e au d\u00e9veloppement c\u00f4t\u00e9 serveur avec Node.js, une plateforme polyvalente pour cr\u00e9er des backends et g\u00e9rer les donn\u00e9es \u00e9chang\u00e9es entre vos applications et leurs utilisateurs.</p> <p>Nous explorerons \u00e9galement l'utilisation des API, essentielles pour connecter vos applications \u00e0 des services externes, dont des API d'intelligence artificielle. Ceci vous permettra d'effectuer de petits projets de cr\u00e9ation de site web avec par exemple des chatbots int\u00e9gr\u00e9s.</p>"},{"location":"00_UE09/#objectifs-du-cours","title":"Objectifs du cours","text":"<p>Au terme de ce cours, vous serez capable de :</p> <ol> <li>Connaitre les notions de base et les principes de fonctionnement d\u2019Internet.</li> <li>\u00c9laborer une architecture de site internet (structure des pages, navigation).</li> <li>R\u00e9aliser un site interactif en utilisant de mani\u00e8re ad\u00e9quate les langages HTML5, CSS et javascript.</li> <li>Interagir avec un serveur en utilisant l'environnement Node.js.</li> <li>Int\u00e9grer des services tiers \u00e0 vos sites web en utilisant des services APIs.</li> <li>Construire des sites web avec des fonctionnalit\u00e9s avanc\u00e9es comme un chatbot.</li> </ol>"},{"location":"00_UE09/#organisation-du-cours","title":"Organisation du cours","text":"<p>Le cours se divise en un cours th\u00e9orique (18 heures), o\u00f9 nous verrons ensemble la th\u00e9orie li\u00e9e au technique web et un cours de laboratoire (42 heures) dans lequel vous pourrez vous exercer et appliquer les concepts de th\u00e9ories au travers d'exercices et de diff\u00e9rents mini-projets. </p> <p></p> <p>Nous aurons donc en moyenne deux heures par semaine de th\u00e9ories et quatre heures par semaine de laboratoire, sauf \u00e0 la fin du quadrimestre ou nous n'auront plus que les heures de laboratoires. </p> <p>La pr\u00e9sence au cours th\u00e9orique et aux laboratoires est vivement recommand\u00e9e. La correction de nombreux exercices sera effectu\u00e9e lors des s\u00e9ances de laboratoire. De plus, vu la nature du d\u00e9veloppement web, \u00eatre pr\u00e9sent aux laboratoires vous permets \u00e9galement d'avoir des feedback personnalis\u00e9 sur vos exercices.</p> <p>En r\u00e8gle g\u00e9n\u00e9ral, vous aurez assez de temps lors des s\u00e9ances de laboratoire pour terminer les exercices, mais dans le cas o\u00f9 vous n'aurez pas termin\u00e9 certains, ils seront \u00e0 terminer avant la prochaine s\u00e9ance. </p> <p></p>"},{"location":"00_UE09/#evaluation","title":"Evaluation","text":"<p>L'\u00e9valuation de premi\u00e8re et de seconde session se fera sous forme d'un examen. Celui-ci prendra la forme d'un examen d'exercice o\u00f9 vous devrez r\u00e9aliser un site web en utilisant les diff\u00e9rents langages vue (html, css, javascript, node.js). L'examen sera tr\u00e8s largement inspir\u00e9 des mini-projets, il est donc fortement conseill\u00e9 de les faire au mieux possible.</p>"},{"location":"01_HistoireWeb/","title":"Histoire du web","text":""},{"location":"01_HistoireWeb/#lavant-internet-arpanet","title":"L'avant internet : ARPANET","text":"<p>L\u2019apparition d\u2019Internet (Interconnected networks) remonte \u00e0 la fin des ann\u00e9es 1960, dans un contexte de comp\u00e9tition technologique et militaire entre les grandes puissances. En 1969, le d\u00e9partement de la D\u00e9fense des \u00c9tats-Unis cr\u00e9e l\u2019ARPANET (Advanced Research Projects Agency Network). Ce r\u00e9seau visait \u00e0 relier des centres de recherche et des universit\u00e9s pour faciliter le partage de ressources et de donn\u00e9es. L\u2019objectif principal \u00e9tait de garantir une communication robuste, capable de r\u00e9sister \u00e0 des pannes, notamment en cas de conflit. Le principe de la commutation de paquets, o\u00f9 les donn\u00e9es sont d\u00e9coup\u00e9es en petits morceaux pour \u00eatre achemin\u00e9es ind\u00e9pendamment, fut une innovation cl\u00e9 pour r\u00e9pondre \u00e0 ce besoin.</p> <p>Dans les ann\u00e9es 1970, ARPANET continue de s'\u00e9tendre et devient un terrain d'exp\u00e9rimentation pour de nouvelles technologies de communication. En 1971, le premier email est envoy\u00e9 par Ray Tomlinson, inaugurant une nouvelle fa\u00e7on d\u2019\u00e9changer des informations \u00e0 distance. Peu apr\u00e8s, ARPANET devient international, avec des connexions \u00e9tablies au Royaume-Uni et en Norv\u00e8ge en 1973. Ces premiers succ\u00e8s d\u00e9montrent la viabilit\u00e9 des r\u00e9seaux distribu\u00e9s, posant les bases pour un syst\u00e8me plus large.</p> <p>Cependant, l\u2019interconnexion des r\u00e9seaux restait un d\u00e9fi. De nombreux r\u00e9seaux apparaissent dans les ann\u00e9es 1970, mais chacun utilisait ses propres protocoles, rendant leur communication difficile. Ce probl\u00e8me stimule les recherches pour cr\u00e9er une architecture universelle capable d\u2019unifier ces r\u00e9seaux disparates. C'est cette qu\u00eate de standardisation qui a conduit aux avanc\u00e9es ult\u00e9rieures, permettant \u00e0 Internet de s'\u00e9tendre bien au-del\u00e0 de son origine militaire pour devenir un outil accessible \u00e0 tous.</p> <p>Dans les ann\u00e9es 1980, ARPANET commence \u00e0 d\u00e9cliner, remplac\u00e9 par de nouveaux r\u00e9seaux. Toutefois, il restera dans l\u2019histoire comme le point de d\u00e9part d\u2019une r\u00e9volution qui allait connecter le monde entier.</p>"},{"location":"01_HistoireWeb/#le-protocole-tcpip","title":"Le protocole TCP/IP","text":"<p>Dans les ann\u00e9es 1980, Internet prend une nouvelle direction avec l\u2019apparition des premiers standards universels. En 1983, l\u2019adoption du protocole TCP/IP par ARPANET marque un tournant majeur dans l\u2019histoire des r\u00e9seaux. C'est en 1983, que ARPANET va r\u00e9ussir la premi\u00e8re interconnexion par passerelle avec un autre r\u00e9seau (CSNET), gr\u00e2ce au protocole TCP/IP. C'est la premi\u00e8re fois que l'on parle d'internet (interconnected network). Ce protocole TCP/IP est un ensemble de r\u00e8gles permettant \u00e0 des appareils connect\u00e9s d\u2019\u00e9changer des donn\u00e9es de mani\u00e8re fiable, quelle que soit leur localisation. TCP/IP se divise en deux parties principales : IP (Internet Protocol), qui est responsable de l\u2019adressage et du routage des paquets de donn\u00e9es \u00e0 travers diff\u00e9rents r\u00e9seaux, et TCP (Transmission Control Protocol), qui garantit que les donn\u00e9es sont transmises de mani\u00e8re fiable, sans perte ou duplication. En pratique, TCP \u00e9tablit une connexion entre l\u2019exp\u00e9diteur et le destinataire, d\u00e9compose les donn\u00e9es en paquets, et s\u2019assure que ces derniers arrivent correctement \u00e0 destination, tandis qu\u2019IP d\u00e9termine le chemin le plus efficace pour acheminer ces paquets. Ce protocole offre donc un cadre commun pour connecter des syst\u00e8mes disparates et facilite l\u2019interconnexion de multiples r\u00e9seaux, donnant naissance \u00e0 l\u2019Internet moderne. \u00c0 cette \u00e9poque, l\u2019utilisation d\u2019Internet reste principalement r\u00e9serv\u00e9e aux chercheurs, aux universitaires et aux militaires.</p> <p>Au cours de cette m\u00eame d\u00e9cennie, plusieurs nouveaux r\u00e9seaux voient le jour, comme NSFNET en 1986, soutenu par la National Science Foundation. NSFNET joue un r\u00f4le crucial en rempla\u00e7ant ARPANET et en servant de backbone pour les r\u00e9seaux universitaires \u00e0 travers les \u00c9tats-Unis. Gr\u00e2ce \u00e0 sa capacit\u00e9 accrue et \u00e0 ses performances am\u00e9lior\u00e9es, il contribue \u00e0 l\u2019expansion rapide d\u2019Internet au-del\u00e0 du milieu militaire. Parall\u00e8lement, d'autres initiatives, comme BITNET et UUCP, \u00e9largissent l\u2019acc\u00e8s \u00e0 de nouveaux types d\u2019utilisateurs, annon\u00e7ant l\u2019arriv\u00e9e d\u2019un Internet plus accessible.</p>"},{"location":"01_HistoireWeb/#larrivee-du-web","title":"L'arriv\u00e9e du Web","text":"<p>Le v\u00e9ritable changement pour le grand public survient au d\u00e9but des ann\u00e9es 1990 avec l'invention du World Wide Web par Tim Berners-Lee, au CERN. En 1989, il propose un syst\u00e8me qui permet de lier des documents gr\u00e2ce \u00e0 des hyperliens, simplifiant ainsi la navigation sur Internet. En 1990, il d\u00e9veloppe le premier navigateur web et le premier serveur web, posant les bases du Web que nous connaissons aujourd'hui. Ces innovations transforment Internet en un espace accessible et intuitif pour les utilisateurs. En 1993, le lancement de Mosaic, le premier navigateur graphique grand public, d\u00e9mocratise le Web et marque le d\u00e9but de son adoption massive.</p> <p>L\u2019\u00e9volution d\u2019Internet s\u2019acc\u00e9l\u00e8re ensuite avec l\u2019arriv\u00e9e de nouveaux services, comme les moteurs de recherche, les messageries instantan\u00e9es, et plus tard les r\u00e9seaux sociaux. \u00c0 la fin des ann\u00e9es 1990, le nombre d\u2019internautes explose, port\u00e9 par une baisse des co\u00fbts des ordinateurs et des connexions. Internet devient alors un outil incontournable, \u00e0 la fois pour le travail, l\u2019\u00e9ducation et les loisirs. Cette transformation pr\u00e9pare le terrain pour l\u2019\u00e8re num\u00e9rique dans laquelle nous vivons aujourd\u2019hui, o\u00f9 Internet est devenu un pilier de la soci\u00e9t\u00e9 moderne.</p>"},{"location":"01_HistoireWeb/#internet-vs-web","title":"Internet vs Web","text":""},{"location":"01_HistoireWeb/Risque/","title":"Les Risques","text":""},{"location":"01_HistoireWeb/Risque/#danger-dinternets","title":"Danger d'Internets","text":"<ol> <li> <p>Hoax</p> <ul> <li>Information fausse ou p\u00e9rim\u00e9e envoy\u00e9e par email et relay\u00e9e spontan\u00e9ment par les internautes.</li> <li>Pas de danger pour l\u2019ordinateur mais risque de d\u00e9sinformation, d\u2019atteinte \u00e0 l\u2019image, d\u2019encombrement du r\u00e9seau ou des organismes mentionn\u00e9s (ex: accueil d\u2019h\u00f4pital)</li> </ul> </li> <li> <p>Virus</p> <ul> <li>Logiciel malveillant cherchant \u00e0 se propager \u00e0 d\u2019autres ordinateurs via un programme h\u00f4te.</li> <li>Peut affecter plus ou moins gravement le fonctionnement de l\u2019ordinateur infect\u00e9</li> </ul> </li> <li> <p>Worm (ver)</p> <ul> <li>Logiciel malveillant qui se propage sur plusieurs ordinateurs en utilisant le r\u00e9seau internet sans n\u00e9cessiter un programme h\u00f4te.</li> <li>Un ver n'a pas besoin d'un programme h\u00f4te pour se reproduire. Il exploite les diff\u00e9rentes ressources de l'ordinateur qui l'h\u00e9berge pour assurer sa reproduction.</li> <li>Peut servir de relai pour une attaque de type \u00ab Denial of Service \u00bb ou provoquer d\u2019autres types de d\u00e9g\u00e2ts sur l\u2019ordinateur infect\u00e9.</li> </ul> </li> <li> <p>Spam (pourriel)</p> <ul> <li>Envoi massif de courriers \u00e9lectroniques non-sollicit\u00e9s.</li> <li>Contenu : publicit\u00e9 pour produit pharmaceutiques, li\u00e9s au sexe, cr\u00e9dit financier, jeux de hasard, produitsde contrefa\u00e7on, transfert de fonds\u2026</li> <li>Plus de 90% des emails transitant sur Internet sont des spams.</li> <li>D\u00e9sagr\u00e9ment pour l\u2019utilisateur, co\u00fbt de nettoyage des bo\u00eetes email, engorgement du r\u00e9seau\u2026</li> <li>Ne communiquez pas votre adresse email n\u2019importe o\u00f9 ou \u00e0 n\u2019importe qui\u2026</li> </ul> </li> <li> <p>Phishing (hame\u00e7onnage)</p> <ul> <li>Technique visant \u00e0 obtenir des renseignements personnels (mot de passe, num\u00e9ro de carte de cr\u00e9dit,\u2026) en vue de perp\u00e9trer une usurpation d\u2019identit\u00e9.</li> <li>Se fait via l\u2019envoi d\u2019email ou d\u2019un site internet donnant l\u2019impression que l\u2019on s\u2019adresse \u00e0 un tiers de confiance.</li> </ul> </li> </ol>"},{"location":"01_HistoireWeb/Risque/#choses-a-savoir-quand-on-surf","title":"Choses \u00e0 savoir quand on surf","text":"<ul> <li>Vous n\u2019avez pas (ou peu) de contr\u00f4le sur les informations publi\u00e9es \u00e0 votre sujet sur Internet.</li> <li>L\u2019anonymat n\u2019existe pas sur Internet (votre FAI garde trace de tout ce que vous faites).</li> <li>Vos donn\u00e9es (adresse IP, O.S., browser, fournisseur d\u2019acc\u00e8s, etc\u2026) ainsi que vos habitudes de surf sont captur\u00e9es et analys\u00e9es par certains sites...afin de cibler au mieux la publicit\u00e9</li> <li>Internet propose des contenus dont la qualit\u00e9 et la valeur scientifique n\u2019est pas toujours v\u00e9rifi\u00e9e.</li> <li>Internet rend accessibles des contenus r\u00e9pr\u00e9hensibles ou non-adapt\u00e9s \u00e0 tous les publics.</li> </ul>"},{"location":"01_HistoireWeb/internet/","title":"Internet","text":""},{"location":"01_HistoireWeb/internet/#un-reseau-de-reseaux","title":"Un r\u00e9seau de r\u00e9seaux","text":"<p>Internet est un r\u00e9seau mondial d'ordinateurs interconnect\u00e9s permettant l\u2019\u00e9change de donn\u00e9es et la communication entre des millions de dispositifs. Il fonctionne gr\u00e2ce \u00e0 des protocoles standardis\u00e9s, comme TCP/IP, et supporte divers services tels que le Web, les emails, la messagerie instantan\u00e9e et bien plus encore.</p> <p></p> <p>Si internet est un r\u00e9seau, il faut d'abord comprendre ce qu'est un r\u00e9seau. Un r\u00e9seau est un ensemble d'appareils connect\u00e9s entre eux pour \u00e9changer des donn\u00e9es, partager des ressources (comme des imprimantes ou des serveurs) et communiquer via des protocoles de communication.</p> <p></p> <p>Utilis\u00e9 de tel r\u00e9seau permet de nombreux avantage :</p> <ol> <li> <p>Partage de ressources (donn\u00e9es)</p> </li> <li> <p>Fiabilit\u00e9 (duplication)</p> </li> <li> <p>Adaptabilit\u00e9 (scalabilit\u00e9)</p> </li> <li> <p>Collaboration</p> </li> </ol> <p>N\u00e9anmoins, utilsier un r\u00e9seau implique de ce mettre d'accord sur un ensemble de r\u00e8gles, de protocoles. Ceci reviens \u00e0 s'accorder sur :</p> <ul> <li> <p>Le language \u00e0 utiliser</p> </li> <li> <p>Les supports \u00e0 utilsier</p> </li> <li> <p>Le moyen de faire transiter l'information</p> </li> </ul>"},{"location":"01_HistoireWeb/internet/#le-modele-tcpip","title":"Le mod\u00e8le TCP/IP","text":"<p>Un de ces protocoles est le mod\u00e8le TCP/IP. Ce protocole est organis\u00e9 en quatre couches, chacune jouant un r\u00f4le sp\u00e9cifique dans la communication des donn\u00e9es sur un r\u00e9seau :</p> <ol> <li> <p>Couche Acc\u00e8s R\u00e9seau (ou Couche Liaison) : Cette couche concerne la transmission physique des paquets sur les r\u00e9seaux locaux (LAN) ou \u00e9tendus (WAN). </p> </li> <li> <p>Couche Internet : Cette couche g\u00e8re l\u2019adressage et le routage des paquets de donn\u00e9es \u00e0 travers diff\u00e9rents r\u00e9seaux gr\u00e2ce au protocole IP (Internet Protocol).  Elle permet de trouver le chemin optimal pour chaque paquet. </p> </li> <li> <p>Couche Transport : La couche Transport assure la fiabilit\u00e9 des communications entre l\u2019exp\u00e9diteur et le destinataire. Le protocole TCP (Transmission Control Protocol) garantit la livraison correcte des paquets. </p> </li> <li> <p>Couche Application : Cette couche fournit des services directs aux utilisateurs et d\u00e9finit les protocoles pour des applications sp\u00e9cifiques (comme HTTP pour le web, SMTP pour les emails, ou FTP pour le transfert de fichiers). Exemple : Lorsqu'un utilisateur entre une URL, le protocole HTTP est activ\u00e9 pour demander la page web.</p> </li> </ol> <p></p>"},{"location":"01_HistoireWeb/internet/#couche-acces-reseau","title":"Couche Acc\u00e8s R\u00e9seau","text":"<p>Cette couche g\u00e8re les protocoles de communication avec le mat\u00e9riel r\u00e9seau, comme Ethernet ou Wi-Fi.  C'est dans cette couche, que l'on va s'occuper du type de c\u00e2ble ou d'onde (Wi-Fi, 4G,..), des connecteurs,... La transmission des donn\u00e9es sur cette couche ce fait via des bits.</p>"},{"location":"01_HistoireWeb/internet/#couche-internet","title":"Couche Internet","text":"<p>C'est ce protocole IP qui g\u00e8re le transport de paquets de donn\u00e9es (datagrammes).  Chaque machine poss\u00e8de une \u00ab adresse IP \u00bb qui permet de la localiser sur le r\u00e9seau. Les datagrammes sont achemin\u00e9s \u00e0 destination (adresse IP) gr\u00e2ce \u00e0 des routeurs qui d\u00e9cident du chemin \u00e0 emprunter jusqu\u2019au routeur suivant\u2026 et ainsi de suite jusqu\u2019\u00e0 la destination.</p> <p></p> <p>C'est \u00e9galement dans cette couche que l'on va retrouver les routeurs (router) et les commutateur (switch).  Un commutateur est un objet qui va peremttre de connecter diff\u00e9rents appareils au sein d'un m\u00eame r\u00e9seau local (LAN).  Alors qu'un routeur connecte plusieurs r\u00e9seaux diff\u00e9rents (par exemple votre r\u00e9seau local \u00e0 Internet).</p> <p></p> <p>Chaque p\u00e9riph\u00e9rique poss\u00e8dent donc une adresse qui l'identifie au r\u00e9seaux, il y existe deux type d'adresse :</p> <ol> <li> <p>IPv4 : est compos\u00e9e de 32 bits, soit 4 octets, et est g\u00e9n\u00e9ralement \u00e9crite sous forme de quatre nombres d\u00e9cimaux s\u00e9par\u00e9s par des points (par exemple, 192.168.1.1)</p> </li> <li> <p>IPv6 : L'adresse IPv6 est compos\u00e9e de 128 bits, soit 16 octets, et est \u00e9crite sous forme de huit groupes de quatre chiffres hexad\u00e9cimaux s\u00e9par\u00e9s par des deux-points (par exemple, 2001:0db8:85a3:0000:0000:8a2e:0370:7334)</p> </li> </ol> <p>\u00c0 l'origine, c'est l'adresse IPv4 qui est apparue en premi\u00e8re. Le probl\u00e8me est que celle-ci ne permet qu'un nombre trop restreint d'adresse diff\u00e9rente. C'est pourquoi IPv6 a \u00e9t\u00e9 invent\u00e9. </p> <p>En plus, de l'adresse IP, on introduit \u00e9galement un masque de sous-r\u00e9seau.  Un masque de sous-r\u00e9seau (ou subnet mask) est un outil utilis\u00e9 pour diviser un r\u00e9seau IP en sous-r\u00e9seaux plus petits, ce qui permet une gestion plus efficace de l'adressage IP.  Il permet de d\u00e9finir quelle partie de l'adresse IP repr\u00e9sente le r\u00e9seau et quelle partie repr\u00e9sente l'h\u00f4te (le dispositif sp\u00e9cifique dans le r\u00e9seau).</p> <p>Par exemple avec l'adresse IP suivante : 91.198.174.2 et le masque de sous-r\u00e9seau : 255.255.224.0.</p> <p></p> <p>On voit que l'adresse du sous-r\u00e9seau est 91.198.160.0 et que sur ce sous-r\u00e9seau l'appareil \u00e0 son adresse local \u00e9tant 0.0.14.2. L'utilisation d'un masque permet d'optimiser la bande passante en limitant les broadcast.</p> <p>Le protocole IP permet d'assurer la communication, mais il n'offre pas beaucoup de garanties :</p> <ul> <li> <p>Les donn\u00e9es contenues dans le datagramme peuvent \u00eatre corrompues durant le trajet</p> </li> <li> <p>Les datagrammes peuvent arriver dans un ordre diff\u00e9rent de celui de l\u2019envoi</p> </li> <li> <p>Les datagrammes peuvent \u00eatre perdus</p> </li> <li> <p>Les datagrammes peuvent \u00eatre dupliqu\u00e9s</p> </li> </ul> <p>N\u00e9anmoins, avec ce syst\u00e8me les ent\u00eates des datagrammes transmis ne sont pas corrompus.</p>"},{"location":"01_HistoireWeb/internet/#couche-transport","title":"Couche transport","text":"<p>Pour pallier au faiblesse de protocole IP, il a fallu introduire de  nouveaux protocoles, dont notamment le protocole TCP (Transmission Control Protocol) et le protocole UD (User Datagram Protocol).</p> <p>Le TCP (Transmission Control Protocol) est un protocole de communication fiable qui assure l'ordre et la validit\u00e9 des donn\u00e9es transmises entre un \u00e9metteur et un destinataire.  Chaque segment TCP inclut un num\u00e9ro de s\u00e9quence, permettant de garantir l'ordre des segments dans la transmission, et une somme de contr\u00f4le (checksum) qui est ajout\u00e9e par l'\u00e9metteur pour v\u00e9rifier l'int\u00e9grit\u00e9 des donn\u00e9es.  Le destinataire v\u00e9rifie cette somme de contr\u00f4le pour s'assurer de la validit\u00e9 des donn\u00e9es re\u00e7ues.  De plus, TCP utilise un m\u00e9canisme d'acquittement : chaque segment re\u00e7u correctement doit \u00eatre accompagn\u00e9 d'un acquittement (ACK).  Si l'\u00e9metteur ne re\u00e7oit pas cet acquittement dans un d\u00e9lai imparti, il retransmet le segment, garantissant ainsi la fiabilit\u00e9 de la transmission.  Enfin, un m\u00e9canisme de contr\u00f4le de flux est int\u00e9gr\u00e9 \u00e0 TCP pour \u00e9viter la surcharge du r\u00e9cepteur, en r\u00e9gulant la quantit\u00e9 de donn\u00e9es envoy\u00e9es \u00e0 un moment donn\u00e9.</p> <p>Le UDP (User Datagram Protocol) fonctionne de mani\u00e8re plus simple et rapide.  Contrairement \u00e0 TCP, il ne n\u00e9cessite pas de connexion pr\u00e9alable pour envoyer des donn\u00e9es et ne garantit ni l'ordre ni la livraison des datagrammes.  Chaque datagramme est envoy\u00e9 ind\u00e9pendamment, ce qui le rend moins fiable que TCP, mais aussi plus rapide.  Ce manque de contr\u00f4le sur la transmission fait d'UDP un choix privil\u00e9gi\u00e9 pour les applications o\u00f9 la vitesse prime sur la fiabilit\u00e9, comme dans le cas des jeux en ligne ou des communications VoIP.  UDP est particuli\u00e8rement adapt\u00e9 \u00e0 la transmission rapide de petites quantit\u00e9s de donn\u00e9es, souvent depuis un serveur vers de nombreux clients simultan\u00e9ment.</p>"},{"location":"01_HistoireWeb/internet/#couche-dapplication","title":"Couche d'application","text":"<p>La couche d'application est la couche la plus haute du mod\u00e8le TCP/IP.  Elle est responsable de l'interaction directe avec les utilisateurs ou les applications logicielles pour fournir des services r\u00e9seau sp\u00e9cifiques.  Contrairement aux autres couches, qui s'occupent de la transmission et de la gestion des donn\u00e9es au niveau des paquets ou des connexions, la couche d'application offre des services qui permettent aux utilisateurs ou aux programmes de communiquer sur un r\u00e9seau.</p> <p>Elle englobe une large gamme de protocoles et services permettant de r\u00e9aliser des t\u00e2ches telles que la navigation web (HTTP), l'envoi d'emails (SMTP), le transfert de fichiers (FTP), la messagerie instantan\u00e9e (XMPP), et bien plus encore.  En d'autres termes, elle permet aux applications de s'appuyer sur les protocoles r\u00e9seau pour envoyer et recevoir des donn\u00e9es via le r\u00e9seau.</p> <p>Dans ce contexte, la couche d'application est responsable de :</p> <ul> <li>L'interface utilisateur pour les programmes qui utilisent le r\u00e9seau.</li> <li>La gestion de la communication r\u00e9seau au niveau des applications (par exemple, le format des messages, la gestion des erreurs, la synchronisation).</li> <li>La conversion des donn\u00e9es pour garantir qu'elles sont compr\u00e9hensibles pour l'utilisateur ou l'application.</li> </ul>"},{"location":"01_HistoireWeb/internet/#lurl","title":"L'URL","text":"<p>Une URL (Uniform Resource Locator) est une adresse web utilis\u00e9e pour localiser une ressource sur Internet.  Elle permet d'identifier de mani\u00e8re unique un fichier, une page ou un service en ligne en sp\u00e9cifiant son protocole (par exemple, HTTP ou HTTPS), son nom de domaine, et parfois un chemin sp\u00e9cifique vers la ressource (comme /page1 ou /images/photo.jpg)</p> <p>Une URL se structure en plusieurs parties :</p> <p></p> <p>Notons qu'un domaine permet de regrouper un ensemble de machines appartenant g\u00e9n\u00e9ralement \u00e0 une m\u00eame organisation (ex : helmo.be).  Le nom de domaine est compos\u00e9 de 2 parties : Top-level domain (TLD) : code du pays (.be, .fr,\u2026) ou un code g\u00e9n\u00e9rique identifiant l\u2019activit\u00e9 (.com, .net,\u2026) et le Sub-level domain (SLD) : un ou plusieurs labels s\u00e9par\u00e9s par un point (helmo, www.helmo, elearning.helmo,\u2026).  Chaque nom de domaine va \u00eatre associ\u00e9 \u00e0 l\u2019adresse IP permettant de localiser la machine sur Internet.</p> <p>L'URL peut \u00eatre aboslu (c\u2019est l \u2019adresse compl\u00e8te d\u2019une ressource sur le web; elle est ind\u00e9pendante du contexte), ou relatif (c\u2019est une adresse qui est d\u00e9pendante du contexte (c-\u00e0-d de l\u2019URL courante). Le protocole et le domaine ne sont pas sp\u00e9cifi\u00e9s car d\u00e9duits de l\u2019URL courante.)</p> <p></p> <p>En r\u00e9sum\u00e9, internet c'est un r\u00e9seau de r\u00e9seaux exploitant le protocole TCP/IP</p>"},{"location":"01_HistoireWeb/web/","title":"Le Web","text":""},{"location":"01_HistoireWeb/web/#world-wide-web","title":"World Wide Web","text":"<p>Le web, ou de son nom complet World Wide Web (WWW) n'est pas la m\u00eame chose qu'internet. Il s'agit n syst\u00e8me de serveurs permettant d\u2019acc\u00e9der \u00e0 des ressources (pages HTML, graphiques, sons, vid\u00e9os) reli\u00e9s entre eux par des liens hypertexte. Ces pages, \u00e9crites en HTML, sont consultables par l'interm\u00e9diaire de navigateurs web gr\u00e2ce \u00e0 des URL.  Le Web permet aux utilisateurs d'acc\u00e9der \u00e0 des informations, de naviguer entre des pages, d'interagir avec des applications en ligne et de partager des contenus multim\u00e9dias, tout en s'appuyant sur des technologies comme HTTP/HTTPS. On consid\u00e8re que l\u2019inventeur du World Wide Web est Tim Berners-Lee. Pour acc\u00e9der \u00e0 une page web, il faut utiliser un navigateur (browser), comme firefox, chrome ou explorer.</p> <p>Quelques dates cl\u00e9s :</p> <ul> <li> <p>1990 : Naissance du World Wide Web</p> </li> <li> <p>1995: Amazon publie son premier site de vente en ligne</p> </li> <li> <p>1998 : Fondation de Google</p> </li> <li> <p>2004: Fondation de Facebook</p> </li> <li> <p>2005 : Fondation de YouTube (la premi\u00e8re vid\u00e9o: https://www.youtube.com/watch?v=jNQXAC9IVRw)</p> </li> <li> <p>2006: Fondation de Twitter</p> </li> <li> <p>\u2026</p> </li> </ul>"},{"location":"01_HistoireWeb/web/#le-protocole-http","title":"Le protocole HTTP :","text":"<p>Le protocole HTTP (Hypertext Transfer Protocol) est un protocole de communication utilis\u00e9 pour transf\u00e9rer des donn\u00e9es sur le Web.  Il permet la communication entre un client (comme un navigateur web) et un serveur web.  HTTP d\u00e9finit les r\u00e8gles et formats pour envoyer et recevoir des requ\u00eates et des r\u00e9ponses.</p> <p>Lorsqu'un utilisateur entre une URL dans son navigateur, ce dernier envoie une requ\u00eate HTTP au serveur pour demander une ressource (comme une page web, une image ou un fichier). Le serveur r\u00e9pond ensuite avec une r\u00e9ponse HTTP contenant les donn\u00e9es demand\u00e9es, ou un message d'erreur si la ressource n'est pas disponible. HTTP fonctionne de mani\u00e8re sans \u00e9tat (stateless), c'est-\u00e0-dire que chaque requ\u00eate est ind\u00e9pendante des autres et ne conserve aucune information sur les requ\u00eates pr\u00e9c\u00e9dentes. Une version plus s\u00e9curis\u00e9e de HTTP est HTTPS (Hypertext Transfer Protocol Secure), qui ajoute une couche de s\u00e9curit\u00e9 gr\u00e2ce au cryptage SSL/TLS pour prot\u00e9ger les donn\u00e9es \u00e9chang\u00e9es entre le client et le serveur.</p> <p></p> <p></p>"},{"location":"02_htmlBase/","title":"Les diff\u00e9rents langages du Web","text":"<p>Le web repose sur plusieurs langages qui travaillent ensemble pour cr\u00e9er des sites interactifs et fonctionnels. Certains de ces langagues sont d\u00e9di\u00e9s \u00e0 la structure, d'autres au style ou encore \u00e0 l'interactivit\u00e9.</p>"},{"location":"02_htmlBase/#les-langages","title":"Les langages","text":""},{"location":"02_htmlBase/#html-hypertext-markup-language","title":"HTML (HyperText Markup Language)","text":"<p>Le HTML est le langage de base utilis\u00e9 pour structurer une page web. Il permet de d\u00e9finir la disposition des diff\u00e9rents \u00e9l\u00e9ments comme les titres, paragraphes, images, liens et listes. Chaque composant est d\u00e9crit par des balises, comme &lt;h1&gt; pour les titres et &lt;p&gt; pour les paragraphes. HTML fournit la structure g\u00e9n\u00e9rale et le contenu mais ne g\u00e8re ni l'apparence ni le comportement dynamique des pages.</p>"},{"location":"02_htmlBase/#css-cascading-style-sheets","title":"CSS (Cascading Style Sheets)","text":"<p>Le CSS est un langage de style utilis\u00e9 pour contr\u00f4ler l'apparence des pages HTML. Il permet de d\u00e9finir les couleurs, les polices, les marges, les alignements et bien d'autres aspects visuels. Gr\u00e2ce au CSS, il est possible de cr\u00e9er des mises en page attrayantes et coh\u00e9rentes sur diff\u00e9rents \u00e9crans, notamment avec les techniques de responsive design. Les styles peuvent \u00eatre appliqu\u00e9s directement dans les balises HTML, dans un fichier style;, ou via des feuilles de style externes.</p>"},{"location":"02_htmlBase/#javascript-js","title":"JavaScript (JS)","text":"<p>Le JavaScript est un langage de programmation qui permet d'ajouter de l'interactivit\u00e9 et du dynamisme aux pages web. Contrairement au HTML et au CSS qui d\u00e9finissent la structure et le style, JavaScript permet de manipuler les \u00e9l\u00e9ments d'une page en temps r\u00e9el, comme afficher des alertes, valider des formulaires ou cr\u00e9er des animations complexes. Il s'ex\u00e9cute directement dans le navigateur de l'utilisateur, rendant les sites plus dynamiques et r\u00e9actifs.</p>"},{"location":"02_htmlBase/#frontend-et-backend","title":"Frontend et backend","text":"<p>Le d\u00e9veloppement web se divise en deux grandes parties : le frontend et le backend. Le frontend correspond \u00e0 la partie visible par l'utilisateur, comprenant l'interface graphique et les interactions sur la page. Le backend, quant \u00e0 lui, g\u00e8re la logique m\u00e9tier, les bases de donn\u00e9es et les communications serveur, restant invisible pour l'utilisateur final. Ces deux parties collaborent pour offrir une exp\u00e9rience fluide et coh\u00e9rente.</p> <p></p> <p>Dans ce cours, nous allons surtout \u00e9tudier les langages nous permettant de faire du frontend, c'est-\u00e0-dire le HTML, CSS et JS. Un des langages cl\u00e9 pour g\u00e9rer le backend est le php, mais nous ne le verrons pas (ou tr\u00e8s peu) dans ce cours. N\u00e9anmoins, il n'est pas le seul langage qui permet de g\u00e9rer le backend, nous aurons l'occasion de voir Node.j qui est une plateforme d'ex\u00e9cution qui nous permettra d'ex\u00e9cuter du code JavaScript du c\u00f4t\u00e9 serveur. </p>"},{"location":"02_htmlBase/baseHtml/","title":"Les bases de l'HTML","text":"<p>HTML est l'acronyme de HyperText Markup Language.</p> <p>Un hypertexte est un document contenant des \u00e9l\u00e9ments cliquables (hyperliens) qui pointent vers d'autres documents. La lecture n'est donc plus lin\u00e9aire.</p> <p>Un langage de balisage (markup language) est un langage op\u00e9rant gr\u00e2ce \u00e0 des balises d\u00e9limitant des parties du texte du document. L'utilisation des balises permet de combiner la structure et le contenu du document.</p> <p>La plupart des balises (tags) servent de conteneurs dont la syntaxe est la suivante :</p>"},{"location":"02_htmlBase/baseHtml/#les-balises","title":"Les balises","text":"<pre><code>&lt;balise attribut=\"valeur\"&gt;contenu&lt;/balise&gt; \n</code></pre> <p>Exemple :</p> <p><pre><code>&lt;p&gt;Ceci est un paragraphe&lt;/p&gt;\n</code></pre> Il existe deux types  de balises :</p> <ul> <li>les balises conteneurs<ul> <li>Elles ont une balise d'ouverture et une balise de fermeture <pre><code>&lt;h1&gt;Je suis le titre principal de la page&lt;/h1&gt;\n&lt;p&gt;Je suis un paragraphe&lt;/p&gt;\n</code></pre></li> </ul> </li> </ul> <p></p> <ul> <li>les balises autofermantes<ul> <li>Elles ne n\u00e9cessitent pas de fermeture     <pre><code>Je suis un texte qui contient un &lt;br&gt; retour \u00e0 la ligne \n</code></pre></li> </ul> </li> </ul> info   Une balise autofermante peut contenir un \"/\" de fermeture.     <pre><code>&lt;br/&gt;</code></pre>     Afin de ne pas se tromper, nous vous recommandons dans ce cours de ne pas le mettre.     La position du \"/\" dans une balise autofermante est importante!! &lt;br&gt; n'est pas valide !!"},{"location":"02_htmlBase/baseHtml/#les-attributs","title":"Les attributs","text":"<p>Les balises peuvent contenir des attributs. Ceux-ci modifient ou pr\u00e9cisent le comportement ou l'apparence de l'\u00e9l\u00e9ment. Certains attributs sont obligatoires, d'autres optionnels.</p> <p>Les attributs sont plac\u00e9s dans la balise d'ouverture, sous la forme <code>nom=valeur</code>.  </p> <p></p>"},{"location":"02_htmlBase/codage/","title":"Codage","text":""},{"location":"02_htmlBase/codage/#codage-des-caracteres","title":"Codage des caract\u00e8res","text":""},{"location":"02_htmlBase/codage/#le-codage-des-caracteres-en-ascii","title":"Le codage des caract\u00e8res en ASCII","text":"<p>En informatique, toute information (texte, son, image, donn\u00e9e chiffr\u00e9e) doit pouvoir \u00eatre repr\u00e9sent\u00e9e comme une suite de bits (bit: valeur soit 1 ou 0) pour pouvoir \u00eatre trait\u00e9e par les composants \u00e9lectroniques. Pour une valeur num\u00e9rique d\u00e9cimale (base 10), sa repr\u00e9sentation en bits est sa conversion en binaire (base 2). Pour num\u00e9riser un texte, chaque caract\u00e8re est associ\u00e9 arbitrairement \u00e0 une repr\u00e9sentation chiffr\u00e9e gr\u00e2ce \u00e0 une table de conversion. cd Dans les ann\u00e9es 1960, l'ANSI (American National Standards Institute) a publi\u00e9 une normalisation des tables des caract\u00e8res : la table ASCII (American Standard Code for Information Interchange). Chaque caract\u00e8re est cod\u00e9 sur 7bits et donc contient 2^7 = 128 caract\u00e8res diff\u00e9rents. Si cette table convient pour num\u00e9riser des textes \u00e9crits en anglais, elle est trop limit\u00e9e pour des textes \u00e9crits en fran\u00e7ais, en espagnol, etc.</p> <p>Les 33 premiers caract\u00e8res sont des caract\u00e8res de contr\u00f4le. (Exemple: le caract\u00e8re \"barre d'espace\" est repr\u00e9sent\u00e9 par la valeur 32 en d\u00e9cimal).</p> <p></p> <p> Taper un caract\u00e8re gr\u00e2ce au code ASCII </p> <p>Astuce  : En maintenant appuy\u00e9e la touche \"Alt\" suivi du code d\u00e9cimal ASCII, il est possible d'\u00e9crire le caract\u00e8re. C'est parfois utile lorsqu'un clavier ne propose pas de touche pour certains caract\u00e8res sp\u00e9ciaux ou que la touche est d\u00e9fectueuse.</p> <p>Ouvrez Microsoft Word ou NotePad++, maintenez la touche \"Alt\" et tapez 60, rel\u00e2chez \"Alt\" et recommencez pour taper \"Alt+58\" puis \"Alt+41\". Qu'obtenez-vous ?</p> <p>Supposez que la touche \"{\" ne fonctionne plus, quel code ASCII devez-vous utiliser ?</p> R\u00e9ponses <p>\"Alt+123\"</p>"},{"location":"02_htmlBase/codage/#le-codage-des-caracteres-en-iso8859-1","title":"Le codage des caract\u00e8res en ISO8859-1","text":"<p>Avec la diffusion de l'informatique dans les pays non anglophones, la n\u00e9cessit\u00e9 de pouvoir utiliser plus de caract\u00e8res sp\u00e9ciaux (notamment accentu\u00e9s) s'est impos\u00e9e.</p> <p>Des extensions de la table ASCII ont \u00e9merg\u00e9 en utilisant 1bit suppl\u00e9mentaire par caract\u00e8re (8bits =&gt; 2^8 = 256 caract\u00e8res). Les 128 nouveaux caract\u00e8res varient d'une table de conversion \u00e0 l'autre pour s'adapter \u00e0 diff\u00e9rentes langues ou groupes de langues.</p> <p>Pour \u00e9viter des erreurs d'interpr\u00e9tation, le lecteur d'un texte doit utiliser la m\u00eame version r\u00e9gionalis\u00e9e de la table de caract\u00e8res.</p> <p>L'IANA (Internet Assigned Numbers Authority) a valid\u00e9, pour une utilisation sur Internet, le codage ISO-8859-1 ou Latin1 permettant d'encoder les langues issues d'Europe occidentale.</p> <p></p>"},{"location":"02_htmlBase/codage/#le-codage-des-caracteres-en-unicode","title":"Le codage des caract\u00e8res en Unicode","text":"<p>La difficult\u00e9 de maintenir une grande vari\u00e9t\u00e9 de tables de caract\u00e8res ainsi que l'impossibilit\u00e9 de pouvoir repr\u00e9senter d'autres \"caract\u00e8res\" issus de langues non europ\u00e9ennes (chinois, arabe, japonais, russe, ...) ont pouss\u00e9 les plus grands acteurs du monde informatique \u00e0 se rassembler en consortium pour cr\u00e9er une table de caract\u00e8res universelle : l'Unicode.</p> <p>Chaque caract\u00e8re peut \u00eatre cod\u00e9 sur 4 octets ( 4* 8 bits, 2^32 = +4 milliards de caract\u00e8res). Les caract\u00e8res ASCII occupent toujours les 128 premi\u00e8res valeurs.</p> <p> Des sinogrammes </p> <p>Editez votre fichier test.html pour faire appara\u00eetre 5 sinogrammes (symboles chinois) de votre choix. Pour cela, consultez la table de caract\u00e8re Unicode afin de trouver la repr\u00e9sentation de sinogrammes.</p>"},{"location":"02_htmlBase/codage/#differentes-versions-dunicode","title":"Diff\u00e9rentes versions d'Unicode","text":"<p>Plusieurs versions d'encodage existent:</p> <ul> <li>UTF-8 : 1 octet pour les caract\u00e8res ASCII, et de 2 \u00e0 4 octets pour les autres caract\u00e8res,</li> <li>UTF-16 : 2 ou 4 octets par caract\u00e8re,</li> <li>UTF-32 : toujours 4 octets par caract\u00e8re.</li> </ul> <p>En UTF-32, le d\u00e9codage (passage de la valeur num\u00e9rique au caract\u00e8re) est tr\u00e8s rapide puisqu'il suffit de couper uniform\u00e9ment la s\u00e9quence de bits tous les 32bits ( = 4 octets). Par contre, la plupart des textes, ne contenant pas ou peu de caract\u00e8res sp\u00e9ciaux, occuperont de l'ordre de 4 fois plus d'espace m\u00e9moire qu'en UTF-8. En UTF-8, l'occupation m\u00e9moire est minimis\u00e9e mais le d\u00e9codage prend plus de temps puisqu'il faut d\u00e9terminer pour chaque caract\u00e8re s'il occupe 1, 2 ou 4 octets. La version UTF-16 est un compromis entre espace m\u00e9moire n\u00e9cessaire et temps de d\u00e9codage.</p> <p>Dans le contexte du d\u00e9veloppement web, la version UTF-8 est actuellement la plus recommand\u00e9e !</p>"},{"location":"02_htmlBase/codage/#utf-8-avec-ou-sans-bom","title":"UTF-8 avec ou sans BOM ?","text":"<p>Le caract\u00e8re BOM (Byte Order Mark) est un caract\u00e8re invisible plac\u00e9 comme premier caract\u00e8re d'un fichier encod\u00e9 en UTF-8. En d\u00e9veloppement web, ce caract\u00e8re est envoy\u00e9 en sortie (affichage par le navigateur) avant l'interpr\u00e9tation des lignes de code. Or notamment en PHP, certaines fonctions doivent absolument \u00eatre appel\u00e9es AVANT tout envoi de caract\u00e8re en sortie.</p> <p>Veuillez vous assurer que vos fichiers sont encod\u00e9s en UTF-8 sans BOM !!</p>"},{"location":"02_htmlBase/codage/#coherence-de-lenvironnement-de-developpement-web","title":"Coh\u00e9rence de l'environnement de d\u00e9veloppement web","text":"<p>Pour \u00e9viter tout probl\u00e8me de codage de caract\u00e8re, il faut que tous les intervenants utilisent l'UTF-8 ! :</p> <ul> <li>L'\u00e9diteur (UTF-8 sans BOM)</li> <li>La base de donn\u00e9es</li> <li>Le navigateur via la balise </li> </ul>"},{"location":"02_htmlBase/codage/#difference-entre-encodage-et-conversion-de-caracteres","title":"Diff\u00e9rence entre encodage et conversion de caract\u00e8res","text":"<p>(Vid\u00e9o: \"Codage vs Encodage des caract\u00e8res\", dur\u00e9e: 3min36)</p>"},{"location":"02_htmlBase/navigateur/","title":"Les navigateurs web","text":""},{"location":"02_htmlBase/navigateur/#roles-dun-navigateur","title":"R\u00f4les d'un navigateur","text":"<p>Un navigateur (browser) est un logiciel qui a pour r\u00f4les de :</p> <ul> <li>Parler HTTP: \u00eatre capable de g\u00e9n\u00e9rer des requ\u00eates HTTP et de traiter des r\u00e9ponses HTTP</li> <li>Traduire HTML: \u00eatre capable d\u2019interpr\u00e9ter une page HTML et d\u2019en effectuer le rendu visuel</li> </ul>"},{"location":"02_htmlBase/navigateur/#de-nombreuses-versions","title":"De nombreuses versions","text":"<p>Plusieurs soci\u00e9t\u00e9s ou associations ont cr\u00e9\u00e9 leur propre navigateur respectant plus ou moins correctement et compl\u00e8tement les diff\u00e9rents standards actuels du web.</p> Logo Chrome Logo Edge Logo Firefox Logo Konqueror Logo Opera Logo Safari <p>Il est vivement recommand\u00e9 d'avoir au moins deux navigateurs install\u00e9s sur son ordinateur et de les mettre \u00e0 jour r\u00e9guli\u00e8rement !</p> <p>(Vid\u00e9o: \"Le navigateur web\", dur\u00e9e: 3min54)</p>"},{"location":"02_htmlBase/structure/","title":"Structure d'une page web","text":""},{"location":"02_htmlBase/structure/#structure-globale","title":"Structure globale","text":"<p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;&lt;!-- commentaire: l'attribut \"lang\" indique \n        aux moteurs de recherche que le contenu textuel de la page est en fran\u00e7ais --&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n        &lt;title&gt;Initiation au langage HTML&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Tout document HTML doit contenir la structure de balises ci-dessus. </p> <p> A vous de jouer :</p> <p> A vous de jouer ! </p> <ul> <li> <p>Copiez-collez cette structure dans un nouveau fichier.</p> <p> Veuillez \u00e0 enregistrer correctement votre fichier.  &gt;&gt;&gt; Infos</p> </li> <li> <p>Ajouter ceci \u00e0 l'interieur des balises <code>&lt;body&gt;</code> <pre><code>&lt;p&gt;Je suis un paragraphe&lt;/p&gt;\n</code></pre></p> </li> <li> <p>O\u00f9 s'affiche le titre du document (<code>&lt;title&gt;</code>) ? </p> </li> <li>Le contenu de quelle balise s'affiche sur la page  ?</li> </ul> R\u00e9ponses <p>Le contenue de la balise <code>&lt;title&gt;</code> s'affiche dans l'onglet de fen\u00eatre. </p> <p>Seul le contenu plac\u00e9 entre les balise <code>&lt;body&gt;</code> est affich\u00e9 dans le navigateur.</p> <p>Analysons les diff\u00e9rents balises qui constituent cette structure de base.</p>"},{"location":"02_htmlBase/structure/#le-doctype","title":"Le DOCTYPE","text":"<p>Le \"DOCTYPE\" est la premi\u00e8re instruction qui doit \u00eatre r\u00e9dig\u00e9e dans la page html. Le \"Doctype\" informe de la version HTML utilis\u00e9e dans le document (dans l'exemple c'est la version HTML 5).</p>"},{"location":"02_htmlBase/structure/#la-balise-html","title":"La balise  \u2039html\u203a","text":"<p>La balise <code>&lt;html&gt;</code> englobe tout le contenu de la page. L'attribut  <code>lang=\"fr\"</code> sp\u00e9cifie que la langue principale du contenu est le fran\u00e7ais.</p>"},{"location":"02_htmlBase/structure/#la-balise-head","title":"La balise  \u2039head\u203a","text":"<p>La balise <code>&lt;head&gt;</code> contient des informations sur la page, comme le titre et les m\u00e9tadonn\u00e9es, mais ce contenu n'est pas affich\u00e9 dans le navigateur.</p>"},{"location":"02_htmlBase/structure/#la-balise-meta","title":"La balise \u2039meta\u203a","text":"<p>La balise <code>&lt;meta charset=\"utf-8\"&gt;</code> d\u00e9finit l'encodage des caract\u00e8res utilis\u00e9 dans la page, ici l'UTF-8.</p> <p>&gt;&gt;Infos concernant le codage des caract\u00e8res</p>"},{"location":"02_htmlBase/structure/#la-balise-title","title":"La balise \u2039title\u203a","text":"<p>La balise <code>&lt;title&gt;</code> d\u00e9finit le titre de la page, affich\u00e9 dans l'onglet du navigateur.  Il n'apparait pas dans le contenu de la page du navigateur.</p>"},{"location":"02_htmlBase/structure/#la-balise-body","title":"La balise \u2039body\u203a","text":"<p>La balise <code>&lt;body&gt;</code> contient  le contenu visible de la page, comme le texte, les images, les liens, etc.</p>"},{"location":"03_htmlBalise/","title":"Balises","text":""},{"location":"03_htmlBalise/#intro","title":"Intro","text":"<p>C'est parti pour le premier exercice.</p> Exercice \u00e0 r\u00e9aliser <p> </p> <ul> <li>Cr\u00e9ez un nouveau fichier (veiller \u00e0 lui attribuer un emplacement et un nom coh\u00e9rents)</li> <li> <p>T\u00e9l\u00e9chargez l'image &gt;&gt;Lien de t\u00e9l\u00e9chargement   </p> </li> <li> <p>Cr\u00e9ez la  structure de base dans le fichier .html </p> </li> <li>Copiez ce texte dans le <code>body</code></li> </ul> Texte \u00e0 copier <pre><code>  ASUS Dual GeForce RTX 4060 EVO OC Edition 8GB    \n  Au coeur du jeu\n  Bas\u00e9e sur l'architecture NVIDIA Ada Lovelace, la carte graphique ASUS Dual GeForce RTX 4060 EVO OC Edition 8GB s'appuie sur la technologie DLSS 3 et le ray tracing mat\u00e9riel pour sublimer les jeux les plus r\u00e9cents et vous permettre de vivre une exp\u00e9rience vid\u00e9oludique immersive et r\u00e9aliste. Au-del\u00e0 du jeu, les cartes graphiques NVIDIA GeForce RTX 4060 offrent de hautes performances pour cr\u00e9er et streamer. \n  L'ASUS DUAL-RTX4060-O8G EVO cumule durabilit\u00e9, compatibilit\u00e9 et performances pour apporter satisfaction aux gamers les plus exigeants. Les fonctionnalit\u00e9s de cette carte graphique incluent des technologies de pointe ainsi qu'un syst\u00e8me de refroidissement exclusif avec des ventilateurs \u00e9quip\u00e9s de la technologie Axial-tech.\n  Hyper-r\u00e9aliste et hyper-rapide, le Ray tracing vous rapproche au plus pr\u00e8s de la r\u00e9alit\u00e9. L\u2019architecture Ada exploite toute la puissance du ray tracing, qui simule le comportement de la lumi\u00e8re dans le monde r\u00e9el. Gr\u00e2ce \u00e0 la puissance des GPU RTX s\u00e9rie 40 et aux c\u0153urs RT de troisi\u00e8me g\u00e9n\u00e9ration, vous profitez de mondes virtuels plus d\u00e9taill\u00e9s que jamais. \n  Architecture \n  Nouveaux multiprocesseurs de flux \n  Broadcast \n  DLSS 3 \n  Studio  \n  D\u00e9couvrir des infos  sur la carte \n</code></pre>"},{"location":"03_htmlBalise/#titre-de-la-page","title":"Titre de la page","text":"<p>Rappelez-vous la structure d'une page.  Le titre de la page, qui s'affiche dans l'onglet, et non dans la page elle-m\u00eame utilise la balise <code>&lt;title&gt;</code> au sein de la balise <code>&lt;head&gt;</code>.</p> Solution <pre><code>    &lt;title&gt;Pi\u00e8ces d\u00e9tach\u00e9es&lt;/title&gt;\n</code></pre>"},{"location":"03_htmlBalise/#titres","title":"Titres","text":"<p>Les \u00e9l\u00e9ments <code>&lt;h1&gt;&lt;h2&gt;...</code> repr\u00e9sentent des titres.  Il y a 6 niveaux de titres. <code>&lt;h1&gt;</code> correspond au niveau  le plus haut et <code>&lt;h6&gt;</code> correspond au niveau le plus faible.</p> <p> Il ne peut y avoir qu'un seul titre principal dans une page, repr\u00e9sent\u00e9 par un <code>&lt;h1&gt;</code></p> <p> La hi\u00e9archie des titres doit \u00eatre respect\u00e9e.  Vous ne pouvez donc pas avoir de <code>&lt;h3&gt;</code> si vous n'avez pas de <code>&lt;h2&gt;</code>, vous ne pouvez pas avoir de <code>&lt;h2&gt;</code> si vous n'avez pas de <code>&lt;h1&gt;</code>, ...  Info compl\u00e8te &gt;&gt;</p> <p>Entourez le titre principale de la page \u00e0 l'aide des balises <code>&lt;h1&gt;</code></p> Solution <pre><code>    &lt;h1&gt;ASUS Dual GeForce RTX 4060 EVO OC Edition 8GB&lt;/h1&gt;\n</code></pre> <p>Quelle est la balise que vous allez utiliser pour les titres secondaires ?</p> Solution <pre><code>     &lt;h2&gt;Au coeur du jeu&lt;/h2&gt;\n     &lt;h2&gt;Architecture&lt;/h2&gt;\n</code></pre>"},{"location":"03_htmlBalise/#paragraphes-et-saut-de-ligne","title":"Paragraphes et saut de ligne","text":"<p>Utilisez la balise <code>&lt;p&gt;</code> pour englobler les diff\u00e9rents paragraphes. Que se passe-t-il lorsque vous redimensionnez la fen\u00eatre du navigateur ?   Info compl\u00e8te &gt;&gt;</p> Solution <p>Le texte se r\u00e9ajuste pour s'adapter \u00e0 la largeur disponible.  C'est pour cela que les coupures de paragraphes peuvent \u00eatre diff\u00e9rentes de celles du mod\u00e8le.</p> <p>Si on d\u00e9sire forcer un retour \u00e0 la ligne, ind\u00e9pendamment de la largeur du navigateur, il faut utiliser la balise <code>&lt;br&gt;</code>.  Placez-la correctement.  Info compl\u00e8te &gt;&gt;</p> Solution <pre><code>    &lt;p&gt;Hyper-r\u00e9aliste et hyper-rapide, &lt;br&gt;\n    le Ray tracing vous rapproche au plus pr\u00e8s de la r\u00e9alit\u00e9. \n    L\u2019architecture Ada exploite toute la puissance du ray tracing, \n    qui simule le comportement de la lumi\u00e8re dans le monde r\u00e9el. \n    Gr\u00e2ce \u00e0 la puissance des GPU RTX s\u00e9rie 40 et aux c\u0153urs \n    RT de troisi\u00e8me g\u00e9n\u00e9ration, vous profitez de mondes \n    virtuels plus d\u00e9taill\u00e9s que jamais.  &lt;/p&gt;\n</code></pre>"},{"location":"03_htmlBalise/#mise-en-evidence-par-le-gras-et-litalique","title":"Mise en \u00e9vidence par le gras et l'italique","text":"<p>Testez les balises <code>&lt;strong&gt;</code> et <code>&lt;em&gt;</code>.  Comment allez-vous les placer ?  Info compl\u00e8te &gt;&gt; </p> Solution <pre><code>     &lt;p&gt;Bas\u00e9e sur l'architecture &lt;strong&gt;NVIDIA Ada &lt;em&gt;Lovelace&lt;/em&gt;&lt;/strong&gt;, \n     la carte graphique ASUS Dual GeForce RTX 4060 EVO OC Edition 8GB s'appuie \n     sur la technologie DLSS 3 et le ray tracing mat\u00e9riel pour sublimer les \n     jeux les plus r\u00e9cents et vous permettre de vivre une exp\u00e9rience \n     vid\u00e9oludique immersive et r\u00e9aliste. Au-del\u00e0 du jeu, les cartes \n     graphiques NVIDIA GeForce RTX 4060 offrent de hautes \n     performances pour cr\u00e9er et streamer.&lt;/p&gt;\n</code></pre>"},{"location":"03_htmlBalise/#liste","title":"Liste","text":"<p>Lorsque vous avez une \u00e9num\u00e9ration, vous devez utiliser les balises repr\u00e9sentant des listes. Il existe deux types de liste : les listes ordonn\u00e9es et les listes non ordonn\u00e9es.</p> <p>La balise <code>&lt;ul&gt;</code> indique qu'une liste non ordonn\u00e9e commence et chaque \u00e9l\u00e9ment de la liste sera indiqu\u00e9e entre des balises <code>&lt;li&gt;</code>. Info compl\u00e8te &gt;&gt; </p> Solution <pre><code>    &lt;ul&gt;\n        &lt;li&gt;Nouveaux multiprocesseurs de flux&lt;/li&gt;\n        &lt;li&gt;Broadcast&lt;/li&gt;\n        &lt;li&gt;DLSS 3&lt;/li&gt;\n        &lt;li&gt;Studio &lt;/li&gt;\n    &lt;/ul&gt;\n</code></pre>"},{"location":"03_htmlBalise/#image","title":"Image","text":"<p> Rappel: Les images doivent \u00eatre rang\u00e9es dans un dossier nomm\u00e9 <code>img</code> situ\u00e9 \u00e0 la racine du \"site\".</p> <p>Testez le code suivant dans votre page : <pre><code>&lt;img src=\"carteRTX.jpg\" alt=\"Carte graphique\"&gt;    \n&lt;img src=\"img/carteRTX.jpg\" alt=\"Carte graphique\"&gt;\n</code></pre> Que constatez-vous ?</p> Solution <ul> <li>La premi\u00e8re image est bris\u00e9e, le navigateur ne la trouve pas car le chemin d'acc\u00e8s est incorrect.  En effet, l'image est stock\u00e9e dans un dossier nomm\u00e9 <code>img</code>.  Ici, le navigateur cherche une image qui serait stock\u00e9e \u00e0 c\u00f4t\u00e9 du fichier html.  La valeur de l'attribut <code>alt</code> apparait \u00e0 l'\u00e9cran.</li> <li>La deuxi\u00e8me image s'affiche correctement.  Si ce n'est pas le cas, v\u00e9rifiez  que l'image soit bien stock\u00e9e dans un dossier nomm\u00e9 <code>img</code> situ\u00e9 \u00e0 c\u00f4t\u00e9 du fichier html.</li> </ul> <p>Info compl\u00e8te</p>"},{"location":"03_htmlBalise/#hyperliens","title":"Hyperliens","text":"<p>Lorsqu'on clique sur le mot info, la page  https://www.ldlc.com/fr-be/fiche/PB00559140.html doit s'ouvrir. Pour afficher un \u00e9l\u00e9ment cliquable, on va utiliser la balise et l'attribut suivant <code>&lt;a href=\"destination\"&gt;\u00e9l\u00e9ment cliquable&lt;/a&gt;</code>.  Info compl\u00e8te</p> <p>A vous de jouer.</p> Solution <pre><code>&lt;p&gt;D\u00e9couvrir des &lt;a href=\"https://www.ldlc.com/fr-be/fiche/PB00615606.html\"&gt;infos&lt;/a&gt; sur la carte&lt;/p&gt;\n</code></pre> <p>Comment pourriez-vous faire pour que lorsqu'on clique sur l'image, la page https://www.ldlc.com s'ouvre ?</p> Solution <pre><code>&lt;a href=\"https://www.ldlc.com/fr-be/fiche/PB00615606.html\"&gt;&lt;img src=\"img/carte.jpg\" alt=\"Carte graphique\"&gt;&lt;/a&gt;\n</code></pre>"},{"location":"03_htmlBalise/balises/","title":"Premi\u00e8res balises de contenu","text":"<p>Avertissement</p> <p>Cette page vous montre les balises principales.  Il en existe bien plus...  &gt;&gt;N'h\u00e9sitez pas \u00e0 consulter une doc de r\u00e9f\u00e9rence.  Vous avez un aper\u00e7u des balises existantes dans le menu lat\u00e9ral de gauche.</p> Comment choisir les balises ? <p>Les balises doivent identifier le contenu affich\u00e9. Est-ce un titre, un paragraphe, une citation, une liste, etc. ? Une fois que le contenu est identifi\u00e9, recherchez la balise la plus ad\u00e9quate pour le repr\u00e9senter.</p> <p>Exemple : </p> <p><pre>\n  &lt;p&gt;Activit\u00e9s&lt;/p&gt;\n  &lt;p&gt;Voici mes activit\u00e9s favorites :&lt;/p&gt;\n  &lt;p&gt;Sport&lt;/p&gt;\n  &lt;p&gt;Basket&lt;/p&gt;\n  &lt;p&gt;Natation&lt;/p&gt;\n  &lt;p&gt;Jeux&lt;/p&gt;\n  &lt;p&gt;Fortnite&lt;/p&gt;\n  &lt;p&gt;Doom&lt;/p&gt;\n </pre> <pre>  \n    &lt;h1&gt;Activit\u00e9s&lt;/h1&gt;\n    &lt;p&gt;Voici mes activit\u00e9s favorites :&lt;/p&gt;\n    &lt;ul&gt;\n      &lt;li&gt;Sport \n        &lt;ol&gt;\n          &lt;li&gt;Basket&lt;/li&gt;\n          &lt;li&gt;Natation&lt;/li&gt;\n        &lt;ol&gt;\n      &lt;li&gt;\n      &lt;li&gt;Jeux \n        &lt;ol&gt;\n          &lt;li&gt;Fortnite&lt;/li&gt;\n          &lt;li&gt;Doom&lt;/li&gt;\n        &lt;ol&gt;\n      &lt;li&gt;\n    &lt;ul&gt;\n  </pre>  Pour vous aider, voici les questions \u00e0 vous poser : </p> <ul> <li> <p>Que repr\u00e9sente le contenu ?</p> <p>Il est important d'identifier la nature du contenu : est-ce un titre, un paragraphe, une citation, une liste, etc. ? Par exemple, un titre principal utilisera une balise <code>&lt;h1&gt;</code>, tandis qu'un paragraphe simple utilisera <code>&lt;p</code>&gt;.</p> </li> <li> <p>Quelle est la hi\u00e9rarchie de l'information ?</p> <p>Les balises de titre (<code>&lt;h1&gt;</code> \u00e0 <code>&lt;h6&gt;</code>) permettent de structurer l'information en niveaux, facilitant ainsi la lecture par les utilisateurs et les moteurs de recherche.</p> </li> <li> <p>S'agit-il d'une information visuelle ou fonctionnelle ?</p> <p>Certaines balises, comme <code>&lt;strong&gt;</code> et <code>&lt;em&gt;</code>, ajoutent de la signification au texte, tandis que d'autres, comme <code>&lt;div&gt;</code> ou <code>&lt;span&gt;</code>, sont purement structurelles et n'apportent aucune s\u00e9mantique.</p> </li> <li> <p>Le contenu doit-il \u00eatre interactif ?</p> <p>Si le contenu n\u00e9cessite une interaction utilisateur (boutons, formulaires), des balises sp\u00e9cifiques comme <code>&lt;button&gt;</code>, <code>&lt;form&gt;</code>, ou <code>&lt;input&gt;</code> sont n\u00e9cessaires pour assurer accessibilit\u00e9 et fonctionnalit\u00e9.</p> </li> </ul> <p>La s\u00e9mantique est un \u00e9l\u00e9ment tr\u00e8s important.  Nous y reviendrons en datail dans le chapitre suivant</p>"},{"location":"03_htmlBalise/balises/#titre","title":"Titre","text":"<p>Les \u00e9l\u00e9ments <code>&lt;h1&gt;&lt;h2&gt;...</code> repr\u00e9sentent des titres.  Il y a 6 niveaux de titres.</p> <p><code>&lt;h1&gt;</code> correspond au niveau  le plus haut et <code>&lt;h6&gt;</code> correspond au niveau le plus faible.</p> <p> Il ne peut y avoir qu'un seul titre principal dans une page, repr\u00e9sent\u00e9 par un <code>&lt;h1&gt;</code></p> <p> La hi\u00e9archie des titres doit \u00eatre respect\u00e9e.  Vous ne pouvez donc pas avoir de <code>&lt;h3&gt;</code> si vous n'avez pas de <code>&lt;h2&gt;</code>, vous ne pouvez pas avoir de <code>&lt;h2&gt;</code> si vous n'avez pas de <code>&lt;h1&gt;</code>, ...</p> <p>Ajoutez 6 niveaux de titre (<code>&lt;h1&gt;</code> jusque <code>&lt;h6&gt;</code>). Que constatez-vous visuellement ?</p> Solution <p>Plus le niveau du titre est haut, plus la taille de la police est grande.  L'erreur courante lorsqu'on d\u00e9but est de choisir le niveau du titre en fonction de sa taille.   Grande erreur !  En effet,  le niveau des titres permet de structurer le contenu.  Les lecteurs d'\u00e9cran utilisent cette hi\u00e9rarchie pour naviguer efficacement \u00e0 travers le contenu, am\u00e9liorant ainsi l'accessibilit\u00e9. Les moteurs de recherche utilisent ces balises pour comprendre la structure et l'importance du contenu, ce qui peut influencer le classement des pages.</p> <p>Toute page doit poss\u00e8der un titre principale <code>&lt;h1&gt;</code> et les titres suivants respectront la hi\u00e9rachie.  Et ne vous tracassez pas du visuel, celui-ci sera r\u00e9alis\u00e9 en CSS.</p> <p> See the Pen    html :  6 titres  by Flolec (@Flolec)   on CodePen. </p>"},{"location":"03_htmlBalise/balises/#paragraphe","title":"Paragraphe","text":"<p> See the Pen    Untitled by Flolec (@Flolec)   on CodePen. </p> <p>Remarquez, par d\u00e9faut, la balise provoque un retour \u00e0 la ligne. R\u00e9sistez \u00e0 la tentation d'englober des \u00e9l\u00e9ments avec des <code>&lt;p&gt;</code> uniquement pour r\u00e9aliser des retours \u00e0 la ligne...</p> <p>La balise <code>&lt;p&gt;</code> doit \u00eatre utilis\u00e9e pour englobler du contenu repr\u00e9sentant des paragraphes. </p> <p>Exemple avec une \u00e9num\u00e9ration de donn\u00e9es.</p> <p> Don't do this </p> <pre><code>  Liste de courses\n  &lt;p&gt;Pomme&lt;/p&gt;\n  &lt;p&gt;Poire&lt;/p&gt;\n  &lt;p&gt;P\u00eache&lt;/p&gt;\n</code></pre> <p> Do this </p> <pre><code>  Liste de courses\n  &lt;ul&gt;\n    &lt;li&gt;Pomme&lt;/li&gt;\n    &lt;li&gt;Poire&lt;/li&gt;\n    &lt;li&gt;P\u00eache&lt;/li&gt;\n  &lt;/ul&gt;\n</code></pre>"},{"location":"03_htmlBalise/balises/#liste","title":"Liste","text":""},{"location":"03_htmlBalise/balises/#liste-ordonnee","title":"Liste ordonn\u00e9e","text":"<p> See the Pen    Html : liste ordonn\u00e9e by Flolec (@Flolec)   on CodePen. </p>"},{"location":"03_htmlBalise/balises/#liste-non-ordonnee","title":"Liste non ordonn\u00e9e","text":"See the Pen    Html : liste non ordonn\u00e9e by Flolec (@Flolec)   on CodePen."},{"location":"03_htmlBalise/balises/#listes-imbriquees","title":"Listes imbriqu\u00e9es","text":"See the Pen    Html : liste non ordonn\u00e9e by Flolec (@Flolec)   on CodePen.  <p>Erreur classique : les enfants directs du <code>&lt;ul&gt;</code> doivent \u00eatre obligatoirement des <code>&lt;li&gt;</code>. Les sous-listes doivent donc \u00eatre incluses dans les balises <code>&lt;li&gt;\u2026&lt;/li&gt;</code> de la liste principale.</p> <p> Don't do this </p> <pre><code>  &lt;ul&gt;\n    &lt;li&gt;Cerise&lt;/li&gt;\n    &lt;li&gt;Pomme&lt;/li&gt;\n      &lt;ul&gt;\n        &lt;li&gt;Gala&lt;/li&gt;\n        &lt;li&gt;JonaGold&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;li&gt;Poire&lt;/li&gt;\n    &lt;li&gt;P\u00eache&lt;/li&gt;\n  &lt;/ul&gt;\n</code></pre> <p> Do this </p> <pre><code>  Liste de courses\n  &lt;ul&gt;\n    &lt;li&gt;Cerise&lt;/li&gt;\n    &lt;li&gt;Pomme\n      &lt;ul&gt;\n        &lt;li&gt;Gala&lt;/li&gt;\n        &lt;li&gt;JonaGold&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/li&gt;\n    &lt;li&gt;Poire&lt;/li&gt;\n    &lt;li&gt;P\u00eache&lt;/li&gt;\n  &lt;/ul&gt;\n</code></pre>"},{"location":"03_htmlBalise/balises/#strong-gras","title":"Strong (gras)","text":"<p>La balise  <code>&lt;strong&gt;</code> indique que le texte a une importance particuli\u00e8re. Cela se traduit g\u00e9n\u00e9ralement par un affichage en gras.</p>"},{"location":"03_htmlBalise/balises/#emphase-italique","title":"Emphase (italique)","text":"<p>La balise  <code>&lt;em&gt;</code> indique un texte sur lequel on veut insister. Cela se traduit g\u00e9n\u00e9ralement par un affichage en italique.</p> <p> Tip: On peut bien s\u00fbr cumuler les balises</p>    See the Pen    Untitled by Flolec (@Flolec)   on CodePen."},{"location":"03_htmlBalise/balises/#image","title":"Image","text":"<pre><code>&lt;img src=\"/chemin/fichier.ext\" alt=\"texte alternatif\" width=\"100\" height=\"50\" &gt;\n</code></pre> <ul> <li>L'attribut <code>src:</code> le chemin de l'image...</li> <li>L'attribut <code>alt:</code> obligatoire et contient le texte qui sera affich\u00e9 si l'image ne peut \u00eatre charg\u00e9e. Ce texte est \u00e9galement important pour les non-voyants.</li> <li>Les attributs <code>width</code> et <code>height</code> : ils permettent de sp\u00e9cifier en pixels la taille de l'image. Pour acc\u00e9l\u00e9rer le rendu de la page, il est recommand\u00e9 de sp\u00e9cifier les dimensions de l'image.</li> </ul> <p> Remarque importante : Pour assurer la qualit\u00e9 du rendu des images et \u00e9viter un temps de chargement trop important, les images d'un site doivent \u00eatre redimensionn\u00e9es aux dimensions finales d'affichage \u00e0 l'aide d'un logiciel de traitement d'images (Photoshop, Gimp, ...). Il est aussi n\u00e9cessaire d'utiliser le meilleur format de fichier pour les images; ainsi pour les plus courants:</p> <ul> <li>PNG: (Portable Network Graphic) format compress\u00e9 sans perte, supporte la transparence, id\u00e9al pour logo, dessin,...</li> <li>JPG: (Joint Photographic Expert Group) format tr\u00e8s compress\u00e9 pour photo, pas de transparence, perte de qualit\u00e9 \u00e0 la sauvegarde,</li> <li>GIF: (Graphics Interchange Format) format peu compress\u00e9 sans perte, supporte la transparence et les animations, id\u00e9al pour image avec peu de d\u00e9grad\u00e9s de couleurs, animations simples.</li> </ul> <p> Rappel: \u00c9vitez les espaces et les caract\u00e8res accentu\u00e9s dans les noms de dossiers et noms de fichiers.</p>"},{"location":"03_htmlBalise/balises/#hyperlien","title":"Hyperlien","text":"<pre><code>&lt;a href=\"url\" target=\"_blank\"&gt; \u00e9l\u00e9ment cliquable &lt;/a&gt;\n</code></pre> <ul> <li>L'attribut <code>href</code>: l'url vers la ressource vers laquelle pointe le lien</li> <li>L'attribut <code>target</code>: indique si le lien sera ouvert dans un nouvel onglet (_blank). Si attribut omis, le lien est ouvert dans le m\u00eame onglet.</li> <li>L'attribut <code>title</code>: texte d'info-bulle qui apparait au survol du lien</li> </ul> <p> Tip : L'\u00e9l\u00e9ment cliquable peut \u00eatre un texte, une image, un bouton, ....</p>"},{"location":"03_htmlBalise/balises/#saut-de-ligne","title":"Saut de ligne","text":"<p><pre><code>&lt;br&gt;\n</code></pre> Affiche un saut de ligne (en g\u00e9n\u00e9ral dans un paragraphe).</p> <p> Remarque importante : N'utilisez pas la balise <code>&lt;br&gt;</code> pour espacer les \u00e9l\u00e9ments ! Toutes les mises en page seront r\u00e9alis\u00e9es via les CSS.</p>"},{"location":"03_htmlBalise/balises/#les-tableaux","title":"Les tableaux","text":"<p>Un tableau  <code>&lt;table&gt;</code>  est con\u00e7u ligne  <code>&lt;tr&gt;</code>  par ligne. Chaque ligne contient des cellules  <code>&lt;td&gt;</code> . Les cellules d'ent\u00eate  <code>&lt;th&gt;</code>  sont plac\u00e9es g\u00e9n\u00e9ralement dans la premi\u00e8re ligne du tableau.</p> <p> Tip: Sans css, il n'est pas possible d'afficher des bordures, des espaces... Attention \u00e0 ne pas utiliser des attributs d\u00e9pr\u00e9ci\u00e9s.</p> <p> Remarque importante :  les tableaux ne sont pas utilis\u00e9s pour r\u00e9aliser des mises en pages.  Les tableaux sont utilis\u00e9s pour afficher des donn\u00e9es tabulaires.</p>    See the Pen    Hrml : tableau by Flolec (@Flolec)   on CodePen."},{"location":"03_htmlBalise/balises/#les-entites-html","title":"Les entit\u00e9s HTML","text":"<p>Deux formats existent :</p> <ul> <li>par code UTF-8 : le signe \u00e9gal peut \u00eatre affich\u00e9 par <code>&amp;#61;</code> (code d\u00e9cimal) ou <code>&amp;#x3D;</code> (code hexad\u00e9cimal)</li> <li>par mot-clef: le signe \u00e9gal peut \u00eatre affich\u00e9 par <code>&amp;equals;</code></li> </ul> <p>Tous les caract\u00e8res peuvent \u00eatre \u00e9crits gr\u00e2ce aux entit\u00e9s HTML. Les entit\u00e9s commencent toujours par \"&amp;\" et se terminent par \";\". Les entit\u00e9s sont g\u00e9n\u00e9ralement utilis\u00e9es pour afficher des caract\u00e8res r\u00e9serv\u00e9s (qui seraient autrement interpr\u00e9t\u00e9s comme du code HTML) et des caract\u00e8res invisibles (comme des espaces ins\u00e9cables).</p> <p>Vous pouvez exploiter cette liste des entit\u00e9s HTML.</p> <p>Comparez les codes html et les rendus :</p>    See the Pen    Html : entit\u00e9s html by Flolec (@Flolec)   on CodePen."},{"location":"03_htmlBalise/exercice/","title":"Exercices","text":""},{"location":"03_htmlBalise/exercice/#exercice-html1","title":"Exercice html.1","text":"<p>Dans le dossier comprenant l'exercice de d\u00e9couverte, cr\u00e9ez un nouveau fichier nomm\u00e9 <code>maPage.html</code>.</p> <p> Cr\u00e9ez la  structure de base dans le fichier .html </p> Texte \u00e0 copier <pre><code>Pr\u00e9sentation\nMon nom est John Doe.\nJe suis \u00e9tudiant en premi\u00e8re bac du \"Bachelier Informatique orientation D\u00e9veloppement d'applications\".\nUn de mes objectifs ? rendre mon projet web dans les temps.\nC'est un d\u00e9fi de taille, mais je suis d\u00e9termin\u00e9 \u00e0 le relever. \nPour cela, je vais d\u00e9finir clairement mes objectifs,  \u00e9tablir une liste des t\u00e2ches \u00e0 accomplir et estimer le temps n\u00e9cessaire pour chacune d'elles. \nEn cr\u00e9ant un planning r\u00e9aliste qui prend en compte mes autres activit\u00e9s, je pourrai mieux m'organiser. \nJe vais \u00e9galement identifier les moments de la journ\u00e9e o\u00f9 je suis le plus productif et concentrer mes efforts sur les t\u00e2ches prioritaires,tout en n'h\u00e9sitant pas \u00e0 demander de l'aide si n\u00e9cessaire.\nAvec de la m\u00e9thode et de la discipline,  je r\u00e9ussirai \u00e0 mener mon projet \u00e0 bien dans les d\u00e9lais impartis !\nEn pratique\nLe projet se base sur un cahier des charges fourni.  \nCelui-ci sert de r\u00e9f\u00e9rence et de guide pour un projet de cr\u00e9ation ou de refonte de site internet. \nIl d\u00e9finit le contexte, les objectifs, les \u00e9l\u00e9ments fonctionnels attendus...\nConcr\u00e8tement\nLe cahier des charges est \u00e0 t\u00e9l\u00e9charger via l'espace HELMo Learn\n</code></pre> <p>Reproduisez l'exemple  ci-dessous  :</p> <p></p> <p>&gt;&gt;Voir l'exercice en plus grand - Format PDF&lt;&lt;</p> <p>&gt;&gt;Voir l'exercice en plus grand - Format PNG&lt;&lt;</p> <ul> <li>Rep\u00e9rer le titre de la page</li> <li>Rep\u00e9rer le titre principal</li> <li>Rep\u00e9rer le titre secondaire.</li> <li>L'image est \u00e0 t\u00e9l\u00e9charger via internet.</li> <li>Lorsqu'on clique sur le lien, la page helmo.be s'ouvre</li> </ul>"},{"location":"03_htmlBalise/exercice/#exercice-html2","title":"Exercice html.2","text":"<p>Dans le dossier comprenant l'exercice de d\u00e9couverte, cr\u00e9ez un nouveau fichier nomm\u00e9 <code>maFiche.html</code>.</p> <p>Reproduisez l'exemple  ci-dessous :</p> <p></p> <p>&gt;&gt;Voir l'exercice en plus grand - Format PDF&lt;&lt;</p> <p>&gt;&gt;Voir l'exercice en plus grand - Format PNG&lt;&lt;</p> <ul> <li>Rep\u00e9rer le titre de la page</li> <li>Rep\u00e9rer le titre principal</li> <li>Rep\u00e9rer les titres secondaires. A part le titre principal et le titre \"Mon astuce\", tous les autres titres ont la m\u00eame importance.</li> <li>Lorsqu'on clique sur le courriel, le client mail par d\u00e9faut du l'utilisateur doit s'ouvrir.</li> <li>Dans la premi\u00e8re liste, les intitul\u00e9s sont mis en \u00e9vidence.</li> <li>Lorsqu'on clique sur \"Exercice de d\u00e9couverte Gaming\", la page html r\u00e9alis\u00e9e pr\u00e9c\u00e9demment doit s'ouvrir.</li> <li>Le texte  <code>&lt;br&gt;</code>  ne doit pas \u00eatre interpr\u00e9t\u00e9 comme une balise de saut de ligne mais doit \u00eatre affich\u00e9.</li> <li>N'h\u00e9sitez pas \u00e0 personnaliser les informations.</li> </ul>"},{"location":"04_htmlSemantique/","title":"Evolution","text":""},{"location":"04_htmlSemantique/#html","title":"HTML","text":"<p>Le langage HTML a \u00e9volu\u00e9 r\u00e9guli\u00e8rement depuis sa premi\u00e8re standardisation en 1992. Apr\u00e8s Mosa\u00efc, la soci\u00e9t\u00e9 Netscape cr\u00e9e un navigateur et autorise des nouvelles balises pour r\u00e9pondre aux besoins des d\u00e9veloppeurs web. Une partie de celles-ci seront int\u00e9gr\u00e9es dans la seconde version du langage HTML. En 1994, Tim Berners-Lee fonde le World Wide Web Consortium (ou W3C), avec le soutien de la d\u00e9fense am\u00e9ricaine DARPA, rassemblant de nombreuses organisations et soci\u00e9t\u00e9s informatiques, pour standardiser et diffuser les technologies \u00e0 la base du Web. Les diff\u00e9rentes versions du langage HTML vont r\u00e9sulter des innovations populaires des navigateurs et des besoins exprim\u00e9s par les membres du consortium. De m\u00eame, les navigateurs \u00e9voluent \u00e0 leur tour en fonction des standards publi\u00e9s et de l'\u00e9volution des technologies r\u00e9seaux.</p> <p>D'une version \u00e0 une autre du langage HTML, de nouvelles balises sont ajout\u00e9es et d'autres sont consid\u00e9r\u00e9es obsol\u00e8tes.</p> <p>En 2009, Tim Berners-Lee fondera la WWW Foundation pour \u00e9tendre le Web aux pays en voie de d\u00e9veloppement et garantir un Web ouvert.</p>"},{"location":"04_htmlSemantique/#xhtml","title":"XHTML","text":"<p>Suite \u00e0 la disparit\u00e9 des versions non standards d'HTML propos\u00e9es par les diff\u00e9rents navigateurs avant les ann\u00e9es 2000, les d\u00e9veloppeurs web \u00e9taient en demande d'une norme plus restrictive qui pourrait permettre de garantir une interpr\u00e9tation correcte des sites webs sur tous les navigateurs.</p> <p>C'est ainsi qu'en 2000, la premi\u00e8re version du standard XHTML est publi\u00e9e. L'XHTML est la \"fusion\" de l'HTML et du langage de balises XML.</p> <p>Au m\u00eame moment est publi\u00e9 HTML 4.0 qui incite \u00e0 la s\u00e9paration du contenu (information) et de la forme (rendu visuel). Exemple : quelques balises devenues obsol\u00e8tes : \u00b4&lt;center&gt;\u00b4 (centrer), \u00b4&lt;u&gt;\u00b4 (souligner), ou attributs obsol\u00e8tes : \u00b4&lt;body background=\"\"&gt;\u00b4 \u2026 car la mise en forme doit \u00eatre sp\u00e9cifi\u00e9e en CSS (CSS = feuille de styles que vous d\u00e9couvrirez tr\u00e8s bient\u00f4t!)</p>"},{"location":"04_htmlSemantique/#xml","title":"XML","text":"<p>D\u00e9couvrez via ce quizz les particularit\u00e9s du langage XML.</p> <p>Le XML (eXtensible Markup Language) est un langage de balisage mis au point par le XML Working Group sous l\u2019\u00e9gide du W3C en 1996</p> Quel est l'objectif principal de XML ?  D\u00e9crire le contenu des donn\u00e9es  D\u00e9crire la pr\u00e9sentation des donn\u00e9es  D\u00e9crire le format des images          Que signifie l'accronyme XML ?      Extensible Markup Language  Exclude Markup Language  Xenobot Markup Language          Afin de pouvoir garantir une syntaxe correcte tout en autorisant des balises personnalis\u00e9es, on peut les associer \u00e0 une \"grammaire\" qui d\u00e9finit les r\u00e8gles de structure et les balises autoris\u00e9es. Ces grammaires se pr\u00e9sentent g\u00e9n\u00e9ralement sous deux formats : DTD (Document Type Definition) et XSD (XML Schema Definition).         Quel est le format de grammaire le plus puissant actuellement utilis\u00e9 avec XML ?       DTD  XSD  JSON <p>La version actuelle est l'XML 1.1 (2006). De tr\u00e8s nombreux langages sont bas\u00e9s sur l'XML : XHTML, MathML (repr\u00e9sentation de formules math\u00e9matiques), SVG (images vectorielles), RSS (syndication de contenus web).</p> <p>Un document XML peut \u00eatre converti en un autre format. Quel langage est recommand\u00e9 pour effectuer cette transformation ? </p>  HTML   JSON   XSLT    CSS  <p> Un document XML est facilement compr\u00e9hensible et lisible, par contre, il n\u00e9cessite beaucoup de caract\u00e8res suppl\u00e9mentaires en plus des donn\u00e9es. D'autres formats existent pour partager une structure de donn\u00e9es avec un payload moins important. (i.e.: JSON)</p> <p>Les r\u00e8gles principales de validation d'un document XML sont les suivantes:</p> <ul> <li>Sensible \u00e0 la casse</li> <li>Toute balise est ferm\u00e9e</li> <li>Valeur des attributs entre guillemets doubles</li> <li>Non interpr\u00e9tation : &lt;![CDATA[ contenu non interpr\u00e9t\u00e9 ]]&gt;</li> </ul>"},{"location":"04_htmlSemantique/#comparaison","title":"Comparaison","text":"HTML XHTML Interpr\u00e9tation des erreurs Erreurs de syntaxe fatales Insensible \u00e0 la casse : &lt;tag&gt; = &lt;TAG&gt; = &lt;Tag&gt; Sensible \u00e0 la casse Version minimaliste des attributs (i.e: selected) Les attributs doivent avoir une valeur La fermeture de certains tags est optionnelle (i.e.: &lt;li&gt;) La fermeture des tags est obligatoire Les tags vides peuvent \u00eatre \u00e9crits &lt;tag&gt; ou &lt;tag/&gt; Les tags vides peuvent \u00eatre \u00e9crits &lt;tag&gt;&lt;/tag&gt; ou &lt;tag/&gt; DOCTYPE obligatoire &lt;!DOCTYPE html&gt; DOCTYPE avec DTD recommand\u00e9 et espace de noms obligatoire  &lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt; &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;"},{"location":"04_htmlSemantique/baliseSemantique/","title":"Balises s\u00e9mantiques","text":""},{"location":"04_htmlSemantique/baliseSemantique/#balises-de-contenu","title":"Balises de contenu","text":"<p>RAPPEL : </p>"},{"location":"04_htmlSemantique/baliseSemantique/#titres","title":"Titres","text":"<p>Les recommandations de l'usage des diff\u00e9rentes niveaux de titres (h1 \u00e0 h6) sont les suivantes :</p> <ul> <li>Hi\u00e9rarchie correcte des niveaux de titres (Exemple: pas de <code>&lt;h3&gt;</code> s'il n'y a pas un <code>&lt;h2&gt;</code> et un <code>&lt;h1&gt;</code>),</li> <li>Un seul <code>&lt;h1&gt;</code> pour une m\u00eame page. </li> <li>Les <code>&lt;article&gt;</code> et les <code>&lt;section&gt;</code> commencent, si possible, par un <code>&lt;h2&gt;</code>,</li> <li>Les titres sont r\u00e9dig\u00e9s pour le lecteur en premier lieu et non comme un agr\u00e9gat de mot clefs pour manipuler les robots indexeurs de contenus,</li> <li>Les balises de titre sont utilis\u00e9es pour donner du sens au contenu et non pour l'aspect graphique d'un texte. Les feuilles de style CSS servent \u00e0 d\u00e9finir le rendu visuel de n'importe quel \u00e9l\u00e9ment HTML.</li> <li>Pas trop de titres, ni trop peu ! En g\u00e9n\u00e9ral un titre par page, article, section ; des sous-titres si n\u00e9cessaire</li> </ul>"},{"location":"04_htmlSemantique/baliseSemantique/#enumeration-delements","title":"Enum\u00e9ration d'\u00e9lements","text":"<ul> <li>Utiliser une liste pour \u00e9num\u00e9rer des \u00e9l\u00e9ments</li> <li>Utiliser une liste pour les items d'un menu de navigation</li> </ul>"},{"location":"04_htmlSemantique/baliseSemantique/#temporalite","title":"Temporalit\u00e9","text":"<p>La temporalit\u00e9 (date de publication d\u2019un article ou la date \u00e0 venir d\u2019un \u00e9v\u00e9nement...) peut s'exprimer \u00e0 l'aide de la balise <code>&lt;time&gt;</code></p>"},{"location":"04_htmlSemantique/baliseSemantique/#adresse","title":"Adresse","text":"<p>La balise <code>&lt;address&gt;</code> est utilis\u00e9e pour mentionn\u00e9e une adresse</p>"},{"location":"04_htmlSemantique/baliseSemantique/#citation","title":"Citation","text":"<p>Les balises <code>&lt;blockquote&gt;</code> et <code>&lt;cite&gt;</code> seront utilis\u00e9es pour les citations</p> <p>Tip</p> <p>Il existe \u00e9norm\u00e9ment de balises.  A vous de trouver celles qui sont les plus adapt\u00e9es.  Utiliser des cites de r\u00e9f\u00e9rence comme : la doc mdn</p>"},{"location":"04_htmlSemantique/baliseSemantique/#balises-de-structuration","title":"Balises de structuration","text":"<p>Diff\u00e9rentes balises de structuration existent :</p>"},{"location":"04_htmlSemantique/baliseSemantique/#main","title":"<code>&lt;main&gt;</code>","text":"<p>Contenu principal de la page suppos\u00e9 varier de page en page d'un m\u00eame site </p>"},{"location":"04_htmlSemantique/baliseSemantique/#section","title":"<code>&lt;section&gt;</code>","text":"<p>Repr\u00e9sente un bloc g\u00e9n\u00e9rique de contenu ayant la m\u00eame th\u00e9matique, souvent regroup\u00e9 par sujet ou fonction. Bien que non obligatoire, il est conseill\u00e9 de sp\u00e9cifier un titre aux sections pour une meilleure d\u00e9finition de la structure du document.</p>"},{"location":"04_htmlSemantique/baliseSemantique/#article","title":"<code>&lt;article&gt;</code>","text":"<p>D\u00e9signe une portion du document potentiellement autonome dans le sens o\u00f9 elle pourrait \u00eatre reprise ou r\u00e9utilis\u00e9e, comme un article de journal, de blog ou de forum tout en continuant \u00e0 faire du sens.</p>"},{"location":"04_htmlSemantique/baliseSemantique/#header","title":"<code>&lt;header&gt;</code>","text":"<p>En-t\u00eate de page, d'article ou de section </p>"},{"location":"04_htmlSemantique/baliseSemantique/#footer","title":"<code>&lt;footer&gt;</code>","text":"<p>Pied de page , d'article ou de section   ###<code>&lt;nav&gt;</code>  Groupement d'\u00e9l\u00e9ments de navigation (menus)</p>"},{"location":"04_htmlSemantique/baliseSemantique/#aside","title":"<code>&lt;aside&gt;</code>","text":"<p>Information suppl\u00e9mentaire facultative li\u00e9e \u00e0 la page, une section ou un article, non n\u00e9cessaire \u00e0 la compr\u00e9hension du contenu li\u00e9. Il est recommand\u00e9 que le contenu d'un <code>&lt;aside&gt;</code> puisse se suffire \u00e0 lui-m\u00eame (sur mobile, <code>&lt;aside&gt;</code> peut \u00eatre affich\u00e9 \u00e0 la demande et masquer le contenu li\u00e9!)</p> <p>Mais que repr\u00e9sentent les balises <code>&lt;div&gt;</code> et <code>&lt;span&gt;</code></p>"},{"location":"04_htmlSemantique/baliseSemantique/#div","title":"<code>&lt;div&gt;</code>","text":"<p>Conteneur g\u00e9n\u00e9rique, ne poss\u00e8de aucun sens s\u00e9mantique. Utiliser pour regrouper des \u00e9l\u00e9ments pour des raisons de style (sera vu dans la partie CSS) </p>"},{"location":"04_htmlSemantique/baliseSemantique/#span","title":"<code>&lt;span&gt;</code>","text":"<p>Idem que le <code>&lt;div&gt;</code> mais ne provoque pas de retour \u00e0 la ligne </p>"},{"location":"04_htmlSemantique/bonnePratique/","title":"Bonnes Pratiques","text":""},{"location":"04_htmlSemantique/bonnePratique/#ecriture-du-code-html","title":"\u00c9criture du code HTML","text":"<p>Lorsque vous r\u00e9digez du code HTML, veillez \u00e0 respecter les conventions suivantes :</p> <ul> <li>Les balises et attributs \u00e9crits en minuscules</li> <li>Sp\u00e9cifier la version HTML (DOCTYPE)</li> <li>Utilisation de \" et non ' pour les attributs</li> <li>Fermer chaque balise (m\u00eame les non obligatoires comme <code>&lt;li&gt;</code>, <code>&lt;body&gt;</code>\u2026)</li> <li>Les \u00e9l\u00e9ments imbriqu\u00e9s sont indent\u00e9s</li> <li>Sp\u00e9cifier l'encodage des caract\u00e8res en UTF-8 (meta charset)</li> <li>Sp\u00e9cifier la langue utilis\u00e9e pour le contenu (html lang=\"fr\")</li> <li>Pas de / pour fermer les balises autofermantes.(img, br, hr,\u2026)</li> <li>Respecter la hi\u00e9rarchie des titres (h1\u2026h6) et la s\u00e9mantique des balises (i.e. : pas de tableau pour mise en page)</li> <li>Sp\u00e9cifier la langue utilis\u00e9e pour le contenu est utile aux synth\u00e8ses vocales (pour adopter le bon accent) et aide au r\u00e9f\u00e9rencement par une meilleure interpr\u00e9tation des termes par les robots indexeurs. </li> </ul>"},{"location":"04_htmlSemantique/bonnePratique/#reduire-les-balises-au-minimum","title":"R\u00e9duire les balises au minimum","text":"<p>Plus vous utilisez des balises et plus vous les imbriquez et plus cela risque d'augmenter le temps de chargement de la page. De plus, une structure de balises simplifi\u00e9e est \u00e9galement plus facile \u00e0 maintenir. Evitez donc les balises inutiles.</p> <p>Mauvais exemple  <pre><code>&lt;div class=\"titrePrincipal\"&gt;&lt;h1&gt;About Us&lt;h1&gt;&lt;/div&gt;\n</code></pre> Bon exemple <pre><code>&lt;h1 class=\"titrePrincipal\"&gt;About Us&lt;h1&gt;\n</code></pre></p>"},{"location":"04_htmlSemantique/bonnePratique/#ordre-des-attributs","title":"Ordre des attributs","text":"<p>Pour le navigateur, l'ordre des attributs des balises n'a aucune importance. Par contre, pour les d\u00e9veloppeurs et les web designers qui manipulent ce code, avoir une convention d'ordre des attributs permet de faciliter la lecture du code. Comparez vous-m\u00eames.</p> <p>Attributs dans un ordre quelconque <pre><code>&lt;ul&gt;\n    &lt;li data-auteur=\"J.R.R Tolkien\" class=\"livre\" id=\"livre1\"&gt;Le Hobbit&lt;/li&gt;\n    &lt;li id=\"livre2\" data-auteur=\"F. Herbert\" class=\"livre\"&gt;Dune&lt;/li&gt;\n    &lt;li class=\"livre\" id=\"livre3\" data-auteur=\"H.P. Lovecraft\"&gt;L\u2018appel de Cthulhu&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre></p> <p>Attributs ordonn\u00e9s <pre><code>&lt;ul&gt;\n    &lt;li class=\"livre\" id=\"livre1\" data-auteur=\"J.R.R Tolkien\"&gt;Le Hobbit&lt;/li&gt;\n    &lt;li class=\"livre\" id=\"livre2\" data-auteur=\"F. Herbert\"&gt;Dune&lt;/li&gt;\n    &lt;li class=\"livre\" id=\"livre3\" data-auteur=\"H.P. Lovecraft\"&gt;L\u2018appel de Cthulhu&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> L'ordre des attributs recommand\u00e9 est le suivant:</p> <ul> <li>class : liaison la plus courante avec les feuilles de styles CSS,</li> <li>id, name : identifiants g\u00e9n\u00e9ralement manipul\u00e9s par Javascript ou par soumission de formulaire,</li> <li>data-* : attributs de donn\u00e9es personnalisables</li> <li>src, for, type, href, value : attributs contenant une valeur de taille r\u00e9duite</li> <li>title, alt : attributs contenant une expression plus ou moins longue</li> <li>role, aria-* : attributs li\u00e9s \u00e0 l'am\u00e9lioration de l'accessibilit\u00e9 ou au web s\u00e9mantique.</li> </ul>"},{"location":"04_htmlSemantique/exercice/","title":"Exercices","text":""},{"location":"04_htmlSemantique/exercice/#exercice-1","title":"Exercice 1","text":"<p>Analysez ce visuel.  Quelles sont les balises s\u00e9mantiques de structuration que vous allez utiliser ?  </p> M\u00e9thodes <ul> <li>Cr\u00e9ez un dossier dans lequel vous cr\u00e9ez un fichier nomm\u00e9 <code>semantique-01.html</code> et un dossier nomm\u00e9 <code>img</code></li> <li>T\u00e9l\u00e9chargez les images dans le dossier img (Mico logo | Mico doctors )</li> <li>Cr\u00e9ez la  structure de base dans le fichier .html</li> <li>Observez le visuel et trouvez les balises ad\u00e9quates.  !!! Pensez SEMANTIQUE !!! <p> Si vous regardez votre page dans le navgateur, celle-ci ne sera pas \"jolie\".  En effet, les positionnements, les couleurs seront r\u00e9alis\u00e9es avec des CSS (en gros, plus tard)</p> </li> </ul> Solution <p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n        &lt;title&gt;Mico&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;img src=\"img/mico-logo.jpg\" alt=\"Logo Mico\" &gt;\n            &lt;nav&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Treatment&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Doctors&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Testimonial&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/nav&gt;\n        &lt;/header&gt;\n        &lt;main&gt;\n            &lt;section&gt;\n                &lt;img src=\"img/mico-doctors.jpg\" alt=\"Doctors\"&gt;\n                &lt;h1&gt;About Hospital&lt;/h1&gt;\n                &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse dapibus viverra congue. Nunc iaculis quam sit amet euismod maximus. Etiam sit amet ante fermentum, ultricies metus et, efficitur dui. Fusce elementum et felis vel sodales. Donec nec augue nec lacus ultricies volutpat. Ut quis scelerisque ipsum. Proin placerat sagittis mauris, et pulvinar ante placerat ut. Sed ornare vestibulum mi, nec luctus nisl maximus ut. Mauris luctus tincidunt erat eget aliquam.&lt;/p&gt;\n            &lt;/section&gt;\n        &lt;/main&gt;\n        &lt;footer&gt;\n            \u00a9 2024 All Rights Reserved\n        &lt;/footer&gt;\n     &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"04_htmlSemantique/exercice/#exercice-2","title":"Exercice 2","text":"<p>Avec la m\u00eame m\u00e9thodologie que pour l'exercice 1, cr\u00e9ez le fichier html pour cette interface :   (Voir l'interface en grand) T\u00e9l\u00e9charger les images (Mico logo)</p> Solution <p> Interface 2 Soluce Large format <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n        &lt;title&gt;Mico&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;img src=\"img/marty-logo.jpg\" alt=\"Logo Marty\" &gt;\n            &lt;nav&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Le concept&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Les pi\u00e8ces du moment&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Les showrooms&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Portefolio&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Blog&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/nav&gt;\n        &lt;/header&gt;\n        &lt;main&gt;\n            &lt;section&gt;\n                &lt;h1&gt;Projets \u00e0 la une&lt;/h1&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-tshirt.jpg\" alt=\"Tshirt\"&gt;    \n                    &lt;h3&gt;Projet 3 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-dress.jpg\" alt=\"Dress\"&gt;    \n                    &lt;h3&gt;Projet 2 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-tshirt-white.jpg\" alt=\"White Tshirt\"&gt;    \n                    &lt;h3&gt;Projet 1 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n             &lt;/section&gt;\n             &lt;section&gt;\n                &lt;h2&gt;Tous nos projets&lt;/h2&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-tshirt-small.jpg\" alt=\"Tshirt\"&gt;    \n                    &lt;h3&gt;Projet 3 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-dress-small.jpg\" alt=\"Dress\"&gt;    \n                    &lt;h3&gt;Projet 2 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-tshirt-white-small.jpg\" alt=\"White Tshirt\"&gt;    \n                    &lt;h3&gt;Projet 1 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-tshirt-small.jpg\" alt=\"Tshirt\"&gt;    \n                    &lt;h3&gt;Projet 3 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-dress-small.jpg\" alt=\"Dress\"&gt;    \n                    &lt;h3&gt;Projet 2 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-tshirt-small.jpg\" alt=\"Tshirt\"&gt;    \n                    &lt;h3&gt;Projet 3 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-dress-small.jpg\" alt=\"Dress\"&gt;    \n                    &lt;h3&gt;Projet 2 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-tshirt-white-small.jpg\" alt=\"White Tshirt\"&gt;    \n                    &lt;h3&gt;Projet 1 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-tshirt-small.jpg\" alt=\"Tshirt\"&gt;    \n                    &lt;h3&gt;Projet 3 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;\n                &lt;article&gt;\n                    &lt;img src=\"img/marty-dress-small.jpg\" alt=\"Dress\"&gt;    \n                    &lt;h3&gt;Projet 2 &lt;/h3&gt;\n                    &lt;a href=\"#\"&gt;Lire plus &amp;gt;&amp;gt;&lt;/a&gt;\n                &lt;/article&gt;  \n             &lt;/section&gt;\n        &lt;/main&gt;\n        &lt;footer&gt;\n            \u00a9 2024 All Rights Reserved\n        &lt;/footer&gt;\n     &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"04_htmlSemantique/exercice/#exercice-3","title":"Exercice 3","text":"<p>Avec la m\u00eame m\u00e9thodologie que pour l'exercice 1, cr\u00e9ez le fichier html pour cette interface :   (Voir l'interface en grand) T\u00e9l\u00e9charger les images (Mico logo)</p> <p> Lorsqu'une image est purement d\u00e9corative, comme c'est le cas pour le st\u00e9toscope, la bonne pratique est de la positionner \u00e0 l'aide du CSS.  Etant donn\u00e9 que nous n'avons pas encore vu les CSS, dans cet exercice, l'image sera plac\u00e9e dans le code html.</p>"},{"location":"04_htmlSemantique/exercice/#exercice-4","title":"Exercice 4","text":"<p>Copiez-collez le code HTML dans le Validateur Html W3C</p> <p>Tant qu'il reste des erreurs:</p> <ul> <li>Lisez les explications li\u00e9es \u00e0 la premi\u00e8re erreur,</li> <li>Corrigez l'erreur,</li> <li>Copiez-collez la nouvelle version du code et validez-la \u00e0 nouveau...</li> </ul> <p>Ne corrigez qu'une erreur \u00e0 la fois ! Le but de l'exercice est de vous confronter aux diff\u00e9rents messages d'erreur du validateur !</p> <pre><code>&lt;DOCTYPE html4&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf8\"&gt;\n        &lt;titre&gt;Corrigez moi&lt;/titre&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;header&gt;\n            &lt;h1&gt;Exercice de validation W3C&lt;h1&gt;\n        &lt;/header&gt;\n        &lt;main&gt;\n            &lt;h2&gt;Liste des fruits\n            &lt;article&gt;\n                &lt;header&gt;Pomme&lt;/header&gt;\n                &lt;main&gt;\n                    &lt;ul&gt;\n                        &lt;span&gt;Jonagold&lt;/span&gt;\n                        &lt;li&gt;Golden\n                        &lt;li&gt;Pink lady\n\n                    &lt;/ul&gt;\n                &lt;/main&gt;\n                &lt;footer&gt;(source: Belgique)&lt;/p&gt;&lt;/footer&gt;\n            &lt;/article&gt;\n            &lt;article&gt;\n                &lt;header&gt;&lt;h2&gt;Poire&lt;/header&gt;\n                &lt;section&gt;\n                    &lt;ul&gt;\n                        &lt;a href=\"https://fr.wikipedia.org/wiki/Conf%C3%A9rence_(poire)\"&gt;&lt;li&gt;Conf\u00e9rence&lt;/a&gt;\n                    &lt;/ul&gt;\n                &lt;/section&gt;\n                &lt;aside&gt;&lt;img src=\"http://www.devosgroup.be/images/producten/conf.jpg\"&gt;&lt;/aside&gt;\n            &lt;/article&gt;\n            &lt;aside&gt;&lt;p&gt; Mangez au moins 5 fruits et l\u00e9gumes par jour&lt;/aside&gt;&lt;/p&gt;\n        &lt;/main&gt;\n    &lt;/body&gt;\n&lt;/html&gt;    \n</code></pre>"},{"location":"04_htmlSemantique/html/","title":"Web S\u00e9mantique","text":""},{"location":"04_htmlSemantique/html/#html-5","title":"HTML 5","text":"<p>HTML 5 est la version standardis\u00e9e du langage HTML, finalis\u00e9e en octobre 2014, en remplacement de XHTML1.x et HTML4.</p> <p>En d\u00e9cembre 2017, la derni\u00e8re version (5.2) est publi\u00e9e par le W3C. </p> <p></p>"},{"location":"04_htmlSemantique/html/#semantique","title":"S\u00e9mantique","text":"<p>Depuis HTML 4.0, il faut distinguer les donn\u00e9es, en HTML, de leur repr\u00e9sentation visuelle (en CSS). Plus important encore depuis HTML 5, il faut donner du sens, la s\u00e9mantique, aux donn\u00e9es qui soit compr\u00e9hensible par les navigateurs et les robots.</p> <p>Mais que signifie l'adjectif \"s\u00e9mantique\" ? En r\u00e9sum\u00e9 : Qui concerne le sens, la signification.</p> <p>Une balise s\u00e9mantique va donc donner du sens, une indication sur le contenu qu'elle contient.  Cela permet \u00e9galement de fournir le r\u00f4le, l'importance relative des diff\u00e9rents \u00e9l\u00e9ments de la page web.</p>"},{"location":"04_htmlSemantique/html/#mais-pourquoi-utiliser-des-balises-semantiques","title":"Mais pourquoi utiliser des balises s\u00e9mantiques ?","text":"<p>Clart\u00e9 et Maintenabilit\u00e9 Un code HTML bien structur\u00e9 est plus facile \u00e0 lire et \u00e0 maintenir. Cela facilite les \u00e9volutions futures du projet et la collaboration entre d\u00e9veloppeurs.</p> <p>Performance L'utilisation correcte des balises \u00e9vite des surcharges inutiles (comme l'abus de <code>&lt;div&gt;</code>), ce qui peut am\u00e9liorer la performance du site en termes de rendu et d'interaction.</p> <p>Cependant, il existe d'autres raisons plus pr\u00e9cises qui soulignent l'importance d'utiliser syst\u00e9matiquement des balises s\u00e9mantiques.</p> <p>Accessibilit\u00e9 Les balises s\u00e9mantiques permettent aux lecteurs d'\u00e9cran et autres technologies d'assistance de comprendre et d'interpr\u00e9ter correctement le contenu pour les personnes en situation de handicap. T\u00e9moignage</p> <p>SEO (R\u00e9f\u00e9rencement) Les moteurs de recherche analysent la structure HTML pour classer le contenu. Une balise inappropri\u00e9e peut nuire \u00e0 la visibilit\u00e9 du site.</p>"},{"location":"04_htmlSemantique/html/#deux-grandes-categories","title":"Deux grandes cat\u00e9gories","text":"<p>On peut cat\u00e9goriser les balises s\u00e9mantiques :</p> <ul> <li>les balises de contenu (Voir chapitre pr\u00e9c\u00e9dent )</li> <li>les balises de structuration (Voir section suivante )</li> </ul>"},{"location":"04_htmlSemantique/validation/","title":"Respect des standards","text":""},{"location":"04_htmlSemantique/validation/#orthographe","title":"Orthographe","text":"<p>De trop nombreuses fautes d'orthographe dans un rapport ou un site web d\u00e9cr\u00e9dibilise son auteur ou la soci\u00e9t\u00e9 qu'il repr\u00e9sente. Il existe suffisamment d'outils de correction orthographique pour rem\u00e9dier aux fautes d'inattention ou \u00e0 des lacunes de ma\u00eetrise de langue.</p> <p>De plus, des mots-clefs \u00e9crits incorrectement ne favorisent pas non plus un bon r\u00e9f\u00e9rencement.</p>"},{"location":"04_htmlSemantique/validation/#langage-html-css","title":"Langage HTML &amp; CSS","text":"<p>Des erreurs de syntaxe ou un non respect des standards HTML et CSS risquent d'induire un rendu visuel fort variable d'un navigateur \u00e0 l'autre voir rendre une partie des contenus non visibles aux utilisateurs.</p> <p>Pensez \u00e0 tirer profit des v\u00e9rificateurs mis \u00e0 disposition par le W3C :</p> <p>Validateur Html W3C</p> <p>Validateur CSS W3C</p> <p> Toutes vos pages doivent \u00eatre valides W3C ! </p>"},{"location":"05_htmlFormulaire/","title":"Introduction","text":""},{"location":"05_htmlFormulaire/#introduction","title":"Introduction","text":"<p>Les formulaires sont n\u00e9cessaires afin de r\u00e9colter des informations aupr\u00e8s des utilisateurs d'un site web. Les formulaires sont utilis\u00e9s pour la cr\u00e9ation de comptes utilisateurs, pour l'authentification, pour r\u00e9pondre \u00e0 un questionnaire, pour effectuer des achats, ...</p> <p>Dans ce chapitre, nous allons nous concentrer uniquement sur la conception d'un formulaire et non de son traitement. En effet, lors de la soumission (l'envoi des donn\u00e9es) d'un formulaire, celles-ci sont envoy\u00e9es par requ\u00eate HTTP vers une adresse pr\u00e9cise sur le serveur. Sur celui-ci, un programme va recevoir ces donn\u00e9es, les v\u00e9rifier, effectuer le traitement (calcul, sauvegarde en base de donn\u00e9es, ...) et renvoyer le r\u00e9sultat du traitement par r\u00e9ponse HTTP. Sans langage de programmation c\u00f4t\u00e9 serveur, il est impossible de traiter les donn\u00e9es soumises par un formulaire.</p> <p>Quand nous verrons Node.js nous pourrons rendre nos formulaires pleinement fonctionnels.</p>"},{"location":"05_htmlFormulaire/#video-introductive","title":"Vid\u00e9o introductive","text":""},{"location":"05_htmlFormulaire/balise/","title":"Balises","text":""},{"location":"05_htmlFormulaire/balise/#intro","title":"Intro","text":"<p>Nous allons r\u00e9aliser un formulaire qui pourrait permettre \u00e0 la soci\u00e9t\u00e9 de vente de produits en ligne \"iBaie\" de mieux cerner les attentes de leurs clients d\u00e8s leur inscription sur leur site d'e-commerce.</p> M\u00e9thodes <ul> <li>Cr\u00e9ez un dossier dans lequel vous cr\u00e9ez un fichier nomm\u00e9 <code>formInscription.html</code> et un dossier nomm\u00e9 <code>img</code></li> <li>Cr\u00e9ez la  structure de base dans le fichier .html</li> </ul> <p>Warning</p> <p>R\u00e9sistez \u00e0 la tentation d'utiliser des <code>&lt;br&gt;</code> ou des <code>&lt;p&gt;</code>, voire des <code>&lt;div&gt;</code> pour afficher des formulaires plus \"user-friendly\".  En effet, ces balises sont soit s\u00e9mantiquement incorrectes, soit compl\u00e8tement inutiles.  Nous verrons avec les CSS que nous pourrons afficher ce formulaire sans ajouter des balises suppl\u00e9mentaires. </p>"},{"location":"05_htmlFormulaire/balise/#balise-form","title":"Balise <code>&lt;form&gt;</code>","text":"<p>Un formulaire est un conteneur d'un ou plusieurs champs et devrait contenir au moins un \u00e9l\u00e9ment de soumission (bouton). Tous les \u00e9l\u00e9ments du formulaire doivent \u00eatre contenus (ou li\u00e9s) \u00e0 une balise <code>&lt;form&gt;</code>.</p> <p>Dans cette balise, il est n\u00e9cessaire de sp\u00e9cifier les attributs suivants :</p> Attribut Description action indique l'adresse \u00e0 laquelle sont envoy\u00e9es les donn\u00e9es method la m\u00e9thode d'envoi des donn\u00e9es (soit li\u00e9es \u00e0 l'adresse (GET), soit plac\u00e9es dans le corps de la requ\u00eate HTTP (POST)) enctype la m\u00e9thode d'encodage des donn\u00e9es <p>formInscription.html</p> <pre><code>&lt;h1&gt;Cr\u00e9ation de votre compte&lt;/h1&gt;\n&lt;form action=\"#\" method=\"post\" &gt;\n    &lt;!-- Tous les champs seront plac\u00e9s ici --&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"05_htmlFormulaire/balise/#balise-input-champs-texte","title":"Balise <code>&lt;input&gt;</code> : champs texte","text":"<p>La plupart des champs d'un formulaire reposent sur la balise <code>&lt;input&gt;</code> et se diff\u00e9rencient par  l'attribut <code>type</code>.   </p> <p>Plusieurs types de champs permettent \u00e0 l'utilisateur d'\u00e9crire une information textuelle courte :</p> <ul> <li>Texte court: <code>&lt;input type=\"text\" \u2026</code></li> <li>Mot de passe: <code>input type=\"password\" \u2026</code></li> <li>Url: <code>&lt;input type=\"url\" \u2026</code></li> <li>Courriel: <code>&lt;input type=\"email\" \u2026</code></li> <li>Nombre: <code>&lt;input type=\"number\" \u2026</code></li> <li>Date : <code>&lt;input type=\"date\" \u2026</code></li> <li>Heure: <code>&lt;input type=\"time\" \u2026</code></li> <li>Cach\u00e9: <code>&lt;input type=\"hidden\" \u2026</code></li> </ul> <p>Exemple : </p> <p><pre><code>&lt;input type=\"text\" name=\"nom\" id=\"nom\" required placeholder=\"Entrez votre nom\" value=\"\"   &gt;\n</code></pre> Comme on peut le voir, la balise <code>input</code> peut contenir diff\u00e9rents attributs obligatoires ou optionnels.</p> Attribut Description <code>type=\"text\"</code> D\u00e9finit le type d'input comme un champ de texte, permettant la saisie de caract\u00e8res. ( Sp\u00e9cifique aux champs de texte. ) <code>name=\"nom\"</code> Le nom de ce champ, utilis\u00e9 pour identifier la donn\u00e9e lors de la soumission du formulaire. Si l'utilisateur entre \"Dupont\", la valeur envoy\u00e9e sera nom=Dupont. Obligatoire pour tous les champs interactifs (text, radio, checkbox, select, textarea, etc.) qui envoient des donn\u00e9es au serveur. Sans cet attribut, le champ ne sera pas pris en compte lors de la soumission. <code>id=\"nom\"</code> Attribue un identifiant unique au champ, souvent utilis\u00e9 pour faire r\u00e9f\u00e9rence au champ via CSS ou JavaScript. <code>required</code> Indique que ce champ est obligatoire. Si l'utilisateur tente de soumettre le formulaire sans le remplir, une validation sera effectu\u00e9e, et un message d'erreur s'affichera. ( Sp\u00e9cifique pour tous les champs o\u00f9 une saisie est attendue  ) <code>placeholder=\"Entrez votre nom\"</code> Affiche un texte indicatif \u00e0 l'int\u00e9rieur du champ avant la saisie, guidant l'utilisateur sur ce qui est attendu. ( Sp\u00e9cifique aux champs de texte. ) <code>value=\"\"</code> D\u00e9finit la valeur initiale du champ. Ici, il est vide, mais il pourrait \u00eatre utilis\u00e9 pour pr\u00e9-remplir le champ avec une valeur par d\u00e9faut. ( Sp\u00e9cifique \u00e0 presque tous les champs de texte. ) <p> en fonction de l'interaction propos\u00e9e, la balise html aura ses propres attributs. </p> <p>Ajoutons la possiblit\u00e9 d'ins\u00e9rer les nom et pr\u00e9nom :</p> <p> See the Pen    HTML : form  by Flolec (@Flolec)   on CodePen. </p> <p>formInscription.html</p> <p>Modifier le fichier et ajouter les deux inputs</p> <p>Gr\u00e2ce aux valeur des placeholder, l'utilisateur connait les donn\u00e9es \u00e0 entrer. Cependant, les placeholders disparaissent d\u00e8s que l'utilisateur commence \u00e0 saisir du texte, ce qui peut rendre l'objectif du champ moins clair. De plus, les lecteurs d'\u00e9cran, utilis\u00e9s par les personnes malvoyantes, ne lisent pas toujours les placeholders correctement (accessibilit\u00e9). </p> <p>Nous allons donc ajouter des libell\u00e9s pour rendre les champs identifiables.</p> <p>Mais avant, voyons comment les donn\u00e9es sont r\u00e9cup\u00e9r\u00e9es au niveau du serveur.</p>"},{"location":"05_htmlFormulaire/balise/#au-niveau-serveur","title":"Au niveau serveur","text":"<p>Comment les donn\u00e9es sont-elles r\u00e9cup\u00e9r\u00e9es au niveau du serveur ? Prenons l'exemple suivant : </p> <pre><code>&lt;input type=\"text\" name=\"nom\" id=\"nom\" required placeholder=\"Entrez votre nom\" value=\"\"   &gt;\n&lt;input type=\"text\" name=\"prenom\" id=\"prenom\" required placeholder=\"Entrez votre prenom\" value=\"\"   &gt;\n</code></pre> <p>Lorsque les donn\u00e9es sont envoy\u00e9es \u00e0 un serveur via un formulaire, voici comment le processus se d\u00e9roule de mani\u00e8re simplifi\u00e9e :</p> <ul> <li>Saisie par l'utilisateur: L'utilisateur remplit le formulaire en ligne (par exemple, en saisissant son nom, son email, etc.).</li> <li>Soumission du formulaire : Lorsque l'utilisateur clique sur le bouton, toutes les donn\u00e9es des champs sont rassembl\u00e9es sous forme de \"paires cl\u00e9-valeur\". Chaque champ du formulaire est identifi\u00e9 par son attribut <code>name</code> et la valeur correspond \u00e0 ce que l'utilisateur a saisi ou s\u00e9lectionn\u00e9.</li> </ul> <p>Dans notre exemple :  Si l'utlisateur entre <code>\"Dupont\"</code> dans le champ <code>name=\"nom\"</code>,  une paire sera cr\u00e9\u00e9e comme <code>nom=Dupont</code>. Si l'utlisateur entre <code>\"Tom\"</code> dans le champ <code>name=\"prenom\"</code>,  une paire sera cr\u00e9\u00e9e comme <code>prenom=Tom</code>.</p> <ul> <li> <p>Envoi des donn\u00e9es au serveur :  Les donn\u00e9es sont envoy\u00e9es au serveur via une m\u00e9thode HTTP (g\u00e9n\u00e9ralement GET ou POST).</p> <ul> <li>Avec GET, les donn\u00e9es sont envoy\u00e9es dans l'URL (visibles dans la barre d'adresse).</li> <li>Avec POST, les donn\u00e9es sont envoy\u00e9es dans le corps de la requ\u00eate (invisibles dans l'URL).</li> </ul> </li> <li> <p>R\u00e9ception par le serveur : Le serveur re\u00e7oit ces paires cl\u00e9-valeur et les traite. Chaque champ du formulaire est donc \"compris\" par le serveur via son nom et sa valeur.  Pour notre exmple :  Le serveur re\u00e7oit  : nom=Dupont&amp;prenom=Tom</p> </li> <li> <p>Traitement : Le code est trait\u00e9 au niveau du serveur.  Par exemple, un enregistrement dans une base de donn\u00e9es, un envoi d'un email, g\u00e9n\u00e9ration d'une r\u00e9ponse, redirection vers une nouvelle page...</p> </li> <li> <p>Retour d'information \u00e0 l'utilisateur : Le serveur envoie une r\u00e9ponse \u00e0 l'utilisateur. Cela peut \u00eatre une confirmation de la soumission, un message d'erreur ou une nouvelle page en fonction du traitement des donn\u00e9es.</p> </li> </ul> <p>En tant que d\u00e9veloppeur, il est donc important d'identifier et connaitre comment les infos sont envoy\u00e9es au serveur.  M\u00eame si actuellement vos formulaires ne sont pas encore trait\u00e9s via php, il est important de les pr\u00e9parer au mieux.</p> <p>Defi01</p> <p>Voici un petit d\u00e9fi :</p> <ul> <li>Cr\u00e9er un nouveau fichier nomm\u00e9 defiForm01.html</li> <li>Cr\u00e9er un formulaire permettant \u00e0 l'utilisateur d'entrer son nom, son prenom et sa ville de r\u00e9sidence (saisie obligatoire).</li> <li>Le formulaire doit \u00eatre envoy\u00e9 \u00e0 l'adresse suivante <code>/~p170025/supportCours/form/q1Form01.php</code></li> <li>La m\u00e9thode utilis\u00e9e doit \u00eatre le  <code>GET</code></li> <li>Le serveur attend des valeurs  via des cl\u00e9s nomm\u00e9es  <code>nom</code>, <code>prenom</code> et <code>ville</code></li> <li>Utiliser cette balise pour soumettre les donn\u00e9es  <code>&lt;input type=\"submit\" name=\"btn_submit\" value=\"Envoyer\"&gt;</code></li> <li>Uploader votre fichier sur panoramix</li> <li>Tester votre code</li> </ul> <p></p>"},{"location":"05_htmlFormulaire/balise/#balise-label","title":"Balise <code>&lt;label&gt;</code>","text":"<p>Gr\u00e2ce aux valeur des placeholders, l'utilisateur connait les donn\u00e9es \u00e0 entrer. Cependant, les placeholders disparaissent d\u00e8s que l'utilisateur commence \u00e0 saisir du texte, ce qui peut rendre l'objectif du champ moins clair. De plus, les lecteurs d'\u00e9cran, utilis\u00e9s par les personnes malvoyantes, ne lisent pas toujours les placeholders correctement (accessibilit\u00e9).</p> <p>Nous allons donc ajouter des libell\u00e9s pour rendre les champs identifiables.</p> <p>Le libell\u00e9 permet de comprendre la signification du champ.</p> <p>Deux techniques sont possibles pour lier un intitul\u00e9 \u00e0 un champ de formulaire :</p> <ul> <li>Par l'identifiant du champ:</li> </ul> <p><pre><code>&lt;label for=\"champ1\"&gt;libell\u00e9&lt;/label&gt; &lt;input id=\"champ1\" name=\"monchamp\" type=\"text\" &gt;\n</code></pre> L'<code>id</code>permet de lier l'<code>input</code> au <code>label</code>. La valeur de l<code>id</code> doit donc \u00eatre identique \u00e0 la valeur du <code>for</code></p> <p> Don't do this </p> <pre><code> &lt;label for=\"tonNom\"&gt;Votre nom&lt;/label&gt; &lt;input id=\"votreNom\" name=\"nom\" type=\"text\" &gt;\n</code></pre> <p> Do this </p> <pre><code>  Liste de courses\n  &lt;label for=\"votreNom\"&gt;Votre nom&lt;/label&gt; &lt;input id=\"votreNom\" name=\"nom\" type=\"text\" &gt;\n</code></pre> <p> Tip: Vous pouvez donner les m\u00eames valeurs \u00e0 l'id, au name et au for <pre><code>&lt;label for=\"nom\"&gt;Votre nom&lt;/label&gt; &lt;input id=\"nom\" name=\"nom\" type=\"text\" &gt;\n</code></pre></p> <ul> <li>Par l'imbrication du champ dans le libell\u00e9:</li> </ul> <p><pre><code>&lt;label&gt;libell\u00e9&lt;input id=\"champ1\" name=\"monchamp\"  type=\"text\" &gt;&lt;/label&gt; \n</code></pre> Ajoutons des labels au formulaire de la page <code>formInscription.html</code></p> <p>formInscription.html</p> <pre><code>&lt;h1&gt;Cr\u00e9ation de votre compte&lt;/h1&gt;\n&lt;form action=\"#\" method=\"post\" &gt;\n\n    &lt;label for=\"nom\"&gt; Votre nom : &lt;/label&gt;\n    &lt;input type=\"text\" name=\"nom\" id=\"nom\" required placeholder=\"Entrez votre nom\" value=\"\"   &gt;\n\n    &lt;label for=\"prenom\"&gt; Votre pr\u00e9nom : &lt;/label&gt;\n    &lt;input type=\"text\" name=\"prenom\" id=\"prenom\" required placeholder=\"Entrez votre prenom\" value=\"\"   &gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"05_htmlFormulaire/balise/#balise-textarea","title":"Balise <code>&lt;textarea&gt;</code>","text":"<p>Pour qu'un utilisateur puisse encoder un long texte, de plusieurs lignes (exemples: une description, un commentaire, ...), il faut utiliser la balise <code>&lt;textarea&gt;</code>. Celle-ci poss\u00e8de les attributs rows (nombre de lignes visibles par d\u00e9faut) et cols (nombre de caract\u00e8res visibles par ligne par d\u00e9faut).</p> <p><pre><code>&lt;label&gt;libell\u00e9&lt;textarea name=\"message\" &gt;&lt;/textarea&gt;&lt;/label&gt;\n</code></pre> Ajoutons une zone pour laisser un message. Observez l'aspect du champ message. Entrez-y un texte d'au moins 5 lignes. Essayez de redimensionner le champ.</p> <p>formInscription.html</p> <pre><code>&lt;h1&gt;Cr\u00e9ation de votre compte&lt;/h1&gt;\n&lt;form action=\"#\" method=\"post\" &gt;\n\n    [...code pr\u00e9c\u00e9dent...]\n\n    &lt;label for=\"message\"&gt;Message&lt;/label&gt;\n    &lt;textarea id=\"message\" name=\"message\" rows=\"3\" cols=\"20\"&gt;&lt;/textarea&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"05_htmlFormulaire/balise/#des-choix-exclusifs-les-boutons-radio","title":"Des choix exclusifs: les boutons radio","text":"<p>Ajoutons la possiblit\u00e9 de choisir un choix.</p> <p>formInscription.html</p> <pre><code>&lt;h1&gt;Cr\u00e9ation de votre compte&lt;/h1&gt;\n&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;strong&gt;Sexe&lt;/strong&gt; \n    &lt;input  name=\"femme\" type=\"radio\" value=\"Femme\"&gt;\n    &lt;input  name=\"homme\" type=\"radio\" value=\"Homme\"&gt;\n    &lt;input name=\"autre\" type=\"radio\" value=\"Autre\"&gt; \n\n\n&lt;/form&gt;\n</code></pre> <p>Affichez le formulaire dans votre navigateur, constatez qu'aucun intitul\u00e9 ne permet de diff\u00e9rencier les deux choix.</p> <p>Modifiez ces champs comme suit et testez \u00e0 nouveau:</p> <p>formInscription.html</p> <pre><code>&lt;h1&gt;Cr\u00e9ation de votre compte&lt;/h1&gt;\n&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;strong&gt;Sexe&lt;/strong&gt; \n    &lt;label&gt;&lt;input  name=\"sexeF\" type=\"radio\" value=\"Femme\"&gt;Femme&lt;/label&gt;\n    &lt;label&gt;&lt;input  name=\"sexeH\" type=\"radio\" value=\"Homme\"&gt;Homme&lt;/label&gt;\n    &lt;label&gt;&lt;input  name=\"sexeA\" type=\"radio\" value=\"Autre\"&gt;Autre&lt;/label&gt; \n\n&lt;/form&gt;\n</code></pre> <p>Constatez qu'un clic sur le label permet de cocher le bouton radio correspondant, ce qui est beaucoup plus pratique !! Cependant, il reste un probl\u00e8me : cocher \"Homme\" ET \"Femme\" simultan\u00e9ment est possible !! Pourquoi ? Parce que ces deux champs ont des valeurs de name diff\u00e9rents et donc il est impossible pour le navigateur de savoir que ces deux boutons radio sont li\u00e9s.</p> <p>Modifiez ces champs comme suit et testez \u00e0 nouveau:</p> <p>formInscription.html</p> <pre><code>&lt;h1&gt;Cr\u00e9ation de votre compte&lt;/h1&gt;\n&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;strong&gt;Sexe&lt;/strong&gt; \n    &lt;label&gt;&lt;input  name=\"sexe\" type=\"radio\" value=\"Femme\"&gt;Femme&lt;/label&gt;\n    &lt;label&gt;&lt;input  name=\"sexe\" type=\"radio\" value=\"Homme\"&gt;Homme&lt;/label&gt;\n    &lt;label&gt;&lt;input  name=\"sexe\" type=\"radio\" value=\"Autre\"&gt;Autre&lt;/label&gt; \n\n&lt;/form&gt;\n</code></pre> <p>Il est possible de sp\u00e9cifier un bouton radio coch\u00e9 par d\u00e9faut gr\u00e2ce \u00e0 l'attribut checked <pre><code>    &lt;input id=\"sexe\" name=\"sexeH\" type=\"radio\" value=\"homme\" checked&gt;\n</code></pre></p>"},{"location":"05_htmlFormulaire/balise/#au-niveau-serveur_1","title":"Au niveau serveur","text":"<p>Nous avons vu pr\u00e9c\u00e9demment que les donn\u00e9es \u00e9taient r\u00e9cup\u00e9r\u00e9es au niveau du serveur sous forme de paires \"cl\u00e9-valeur\".  Ici les valeurs ne sont pas entr\u00e9es par l'utilisateur mais d\u00e9termin\u00e9es par le d\u00e9veloppeur.</p> <p>Pour ce code :</p> <p>formInscription.html</p> <pre><code>&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;strong&gt;Sexe&lt;/strong&gt; \n    &lt;label&gt;&lt;input id=\"sexe\"  name=\"sexe\" type=\"radio\" value=\"femme\"&gt;Femme&lt;/label&gt;\n    &lt;label&gt;&lt;input id=\"sexe\" name=\"sexe\" type=\"radio\" value=\"homme\"&gt;Homme&lt;/label&gt;\n    &lt;label&gt;&lt;input id=\"sexe\" name=\"sexe\" type=\"radio\" value=\"autre\"&gt;Autre&lt;/label&gt; \n&lt;/form&gt;\n</code></pre> <p>Si je choisis l'option \"Femme\", le serveur recevra <code>sexe=femme</code></p> <p>Defi02</p> <p>Petit d\u00e9fi :</p> <ul> <li>Cr\u00e9er un nouveau fichier nomm\u00e9 defiForm02.html</li> <li>Cr\u00e9er un formulaire permettant \u00e0 l'utilisateur de choisir un choix parmi ceux-ci : \"BaseBall\", \"Course \u00e0 pied\", \"Judo\" . Utilisez des boutons radios.</li> <li>Le formulaire doit \u00eatre envoy\u00e9 \u00e0 l'adresse suivante <code>/~p170025/supportCours/form/q1Form02.php</code></li> <li>La m\u00e9thode utilis\u00e9e doit \u00eatre le  <code>GET</code></li> <li>Le serveur attend des valeurs  via une cl\u00e9 nomm\u00e9e \"sport\"</li> <li>La valeur attendue pour le choix \"BaseBall\" est \"baseball\"</li> <li>La valeur attendue pour le choix \"Course \u00e0 pied\" est \"course\"</li> <li>La valeur attendue pour le choix \"Judo\" est \"judo\"</li> <li>Utiliser cette balise pour soumettre les donn\u00e9es  <code>&lt;input type=\"submit\" name=\"btn_submit\" value=\"Envoyer\"&gt;</code></li> <li>Uploader votre fichier sur panoramix</li> <li>Tester votre code</li> </ul> <p>Si votre code est correct, la page doit afficher votre choix (et non plus le formulaire).</p>"},{"location":"05_htmlFormulaire/balise/#des-choix-non-exclusifs-les-cases-a-cocher","title":"Des choix non exclusifs: les  cases \u00e0 cocher","text":"<p>Ajoutons la possiblit\u00e9 de choisir plusieurs choix.</p> <p>formInscription.html</p> <pre><code>&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;strong&gt;Cat\u00e9gories pr\u00e9f\u00e9r\u00e9es&lt;/strong&gt; \n\n    &lt;label for=\"cat1\"&gt;V\u00eatements&lt;/label&gt;\n    &lt;input id=\"cat1\" name=\"cat[]\" type=\"checkbox\" value=\"cat1\"&gt; \n\n    &lt;label for=\"cat2\"&gt;Livres&lt;/label&gt;\n    &lt;input id=\"cat2\" name=\"cat[]\" type=\"checkbox\" value=\"cat2\"&gt; \n\n    &lt;label for=\"cat3\"&gt;Bandes Dessin\u00e9es&lt;/label&gt;\n    &lt;input id=\"cat3\" name=\"cat[]\" type=\"checkbox\" value=\"cat3\"&gt; \n\n    &lt;label for=\"cat4\"&gt;Jeux&lt;/label&gt;\n    &lt;input id=\"cat4\" name=\"cat[]\" type=\"checkbox\" value=\"cat4\"&gt; \n\n&lt;/form&gt;\n</code></pre> <p>De m\u00eame que pour les boutons radio, l'association des cases \u00e0 cocher s'effectue en leur donnant la m\u00eame valeur de name. Observez la valeur donn\u00e9e \u00e0 l'attribut name.  Elle se termine par [].  Cela signifie que les valeurs seront r\u00e9cup\u00e9r\u00e9es sous forme de tableau.  Cela permet de r\u00e9cup\u00e9rer des valeurs multiples.</p> <p>Il est possible de sp\u00e9cifier des cases coch\u00e9es par d\u00e9faut gr\u00e2ce \u00e0 l'attribut checked <pre><code>&lt;input id=\"cat3\" name=\"cat[]\" type=\"checkbox\" value=\"cat3\" checked&gt; \n</code></pre></p>"},{"location":"05_htmlFormulaire/balise/#au-niveau-serveur_2","title":"Au niveau serveur","text":"<p>Nous avons vu pr\u00e9c\u00e9demment que les donn\u00e9es \u00e9taient r\u00e9cup\u00e9r\u00e9es au niveau du serveur sous forme de paires \"cl\u00e9-valeur\".  Ici les valeurs ne sont pas entr\u00e9es par l'utilisateur mais d\u00e9termin\u00e9e par le d\u00e9veloppeur.</p> <p>Pour ce code :</p> <p>formInscription.html</p> <pre><code>&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;label for=\"cat1\"&gt;Cat\u00e9gories&lt;/label&gt;\n    &lt;input id=\"cat1\" name=\"cat[]\" type=\"checkbox\" value=\"cat1\"&gt; \n\n    &lt;label for=\"cat2\"&gt;Livres&lt;/label&gt;\n    &lt;input id=\"cat2\" name=\"cat[]\" type=\"checkbox\" value=\"cat2\"&gt; \n\n    &lt;label for=\"cat3\"&gt;Bandes Dessin\u00e9es&lt;/label&gt;\n    &lt;input id=\"cat3\" name=\"cat[]\" type=\"checkbox\" value=\"cat3\"&gt; \n\n    &lt;label for=\"cat4\"&gt;Jeux&lt;/label&gt;\n    &lt;input id=\"cat4\" name=\"cat[]\" type=\"checkbox\" value=\"cat4\"&gt; \n&lt;/form&gt;\n</code></pre> <p>Si je choisis les options \"Livres\" et \"Jeux, le serveur recevra <code>cat[]=cat2&amp;cat[]=cat4</code></p> <p>Defi03</p> <p>Petit d\u00e9fi :</p> <ul> <li>Cr\u00e9er un nouveau fichier nomm\u00e9 defiForm03.html</li> <li>Cr\u00e9er un formulaire permettant \u00e0 l'utilisateur de choisir plusieurs cours parmi ceux-ci : \"DevWeb\", \"BD\", \"Java\", \"Python\" .</li> <li>Le formulaire doit \u00eatre envoy\u00e9 \u00e0 l'adresse suivante <code>/~p170025/supportCours/form/q1Form03.php</code></li> <li>La m\u00e9thode utilis\u00e9e doit \u00eatre le  <code>GET</code></li> <li>Le serveur attend des valeurs  via une cl\u00e9 nomm\u00e9e \"cours\"</li> <li>La valeur attendue pour le choix \"DevWeb\" est \"crs1\"</li> <li>La valeur attendue pour le choix \"BD\" est \"crs2\"</li> <li>La valeur attendue pour le choix \"Java\" est \"crs3\"</li> <li>La valeur attendue pour le choix \"Python\" est \"crs4\"</li> <li>Utiliser cette balise pour soumettre les donn\u00e9es  <code>&lt;input type=\"submit\" name=\"btn_submit\" value=\"Envoyer\"&gt;</code></li> <li>Uploader votre fichier sur panoramix</li> <li>Tester votre code</li> </ul> <p>Si votre code est correct, la page doit afficher vos choix (et non plus le formulaire).</p>"},{"location":"05_htmlFormulaire/balise/#une-liste-de-choix-les-listes-deroulantes","title":"Une liste de choix: les listes d\u00e9roulantes","text":"<p>Ajoutons une liste d\u00e9roulante limit\u00e9e \u00e0 1 choix</p> <p>formInscription.html</p> <pre><code>&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;label for=\"livraison\"&gt;Mode de livraison&lt;/label&gt;\n    &lt;select id=\"livraison\" name=\"livraison\"&gt;\n        &lt;option value=\"D\"&gt;A domicile&lt;/option&gt;\n        &lt;option value=\"M\"&gt;Au magasin&lt;/option&gt;\n        &lt;option value=\"P\"&gt;En point relais&lt;/option&gt;\n    &lt;/select&gt; \n\n\n&lt;/form&gt;\n</code></pre> <p>Les balises option permettent de d\u00e9finir les diff\u00e9rents \u00e9l\u00e9ments pr\u00e9sents dans la liste d\u00e9roulante. Le texte \u00e0 afficher \u00e0 l'utilisateur est plac\u00e9 entre les balises ouvrante et fermante; par contre, la valeur qui est envoy\u00e9e lors de la soumission du formulaire est plac\u00e9e dans l'attribut value. Si celle-ci n'est pas sp\u00e9cifi\u00e9e, la valeur renvoy\u00e9e est le texte affich\u00e9.</p> <p>Il est possible de sp\u00e9cifier une option par d\u00e9faut gr\u00e2ce \u00e0 l'attribut selected <pre><code>&lt;option value=\"M\" selected&gt;Au magasin&lt;/option&gt;\n</code></pre></p>"},{"location":"05_htmlFormulaire/balise/#au-niveau-serveur_3","title":"Au niveau serveur","text":"<p>Nous avons vu pr\u00e9c\u00e9demment que les donn\u00e9es \u00e9taient r\u00e9cup\u00e9r\u00e9es au niveau du serveur sous forme de paires \"cl\u00e9-valeur\".  Ici les valeurs ne sont pas entr\u00e9es par l'utilisateur mais d\u00e9termin\u00e9e par le d\u00e9veloppeur.</p> <p>Pour ce code :</p> <p>formInscription.html</p> <pre><code>&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;label for=\"livraison\"&gt;Mode de livraison&lt;/label&gt;\n    &lt;select id=\"livraison\" name=\"livraison\"&gt;\n        &lt;option value=\"D\"&gt;A domicile&lt;/option&gt;\n        &lt;option value=\"M\"&gt;Au magasin&lt;/option&gt;\n        &lt;option value=\"P\"&gt;En point relais&lt;/option&gt;\n    &lt;/select&gt; \n&lt;/form&gt;\n</code></pre> <p>Si je choisis l'option \"Au magasin\", le serveur recevra <code>livraison=M</code></p> <p>Defi04</p> <p>Petit d\u00e9fi :</p> <ul> <li>Cr\u00e9er un nouveau fichier nomm\u00e9 defiForm04.html</li> <li>Cr\u00e9er un formulaire permettant \u00e0 l'utilisateur de choisir un choix parmi une liste d\u00e9roulante : \"Ans\", \"Oupeye\", \"Juprelle\" .</li> <li>Le formulaire doit \u00eatre envoy\u00e9 \u00e0 l'adresse suivante <code>/~p170025/supportCours/form/q1Form04.php</code></li> <li>La m\u00e9thode utilis\u00e9e doit \u00eatre le  <code>GET</code></li> <li>Le serveur attend des valeurs  via une cl\u00e9 nomm\u00e9e \"ville\"</li> <li>La valeur attendue pour le choix \"Ans\" est \"ans\"</li> <li>La valeur attendue pour le choix \"Oupeye\" est \"oupeye\"</li> <li>La valeur attendue pour le choix \"Juprelle\" est \"juprelle\"</li> <li>Utiliser cette balise pour soumettre les donn\u00e9es  <code>&lt;input type=\"submit\" name=\"btn_submit\" value=\"Envoyer\"&gt;</code></li> <li>Uploader votre fichier sur panoramix</li> <li>Tester votre code</li> </ul> <p>Si votre code est correct, la page doit afficher vos choix (et non plus le formulaire).</p>"},{"location":"05_htmlFormulaire/balise/#boutons","title":"Boutons","text":"<p>Il existe plusieurs types de bouton avec un usage particulier :</p> <ul> <li>les boutons de soumission: pour envoyer les donn\u00e9es du formulaire, comportement par d\u00e9faut,</li> <li>les boutons de r\u00e9-initialisation: pour annuler les changements de valeurs des champs depuis le chargement du formulaire,</li> <li>les boutons d'action: pour ex\u00e9cuter des actions programm\u00e9es en Javascript sans soumettre le formulaire,</li> <li>les boutons de t\u00e9l\u00e9versement de fichier: pour lier un fichier aux donn\u00e9es du formulaire.</li> </ul> <p>Deux balises permettent de cr\u00e9er des boutons:</p> <ul> <li>La balise <code>&lt;input&gt;</code> : pour un label textuel uniquement</li> <li>La balise <code>&lt;button&gt;</code> : pour un label plus graphique avec du contenu HTML</li> </ul>"},{"location":"05_htmlFormulaire/balise/#bouton-de-soumission","title":"Bouton de soumission","text":"<p>Ajoutez deux boutons de soumission</p> <p>formInscription.html</p> <pre><code>&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;input type=\"submit\" name=\"buttsub1\" value=\"Valider\"&gt;\n    &lt;button type=\"submit\" name=\"buttsub1\" &gt;&lt;u&gt;Autre valider&lt;/u&gt;&lt;/button&gt;\n\n&lt;/form&gt;\n</code></pre> <p>Regardez l'aspect des deux boutons \"Valider\" sur diff\u00e9rents navigateurs.</p> <p>V\u00e9rifiez que le formulaire est bien soumis lors d'un clic sur un des boutons de soumission.</p>"},{"location":"05_htmlFormulaire/balise/#bouton-de-re-initialisation","title":"Bouton de r\u00e9-initialisation","text":"<p>Ajoutez deux boutons de r\u00e9-initialisation</p> <p>formInscription.html</p> <pre><code>&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;input type=\"reset\" name=\"reset1\" value=\"R\u00e9initialiser\"&gt;\n    &lt;button type=\"reset\" name=\"reset2\"&gt;&lt;u&gt;Autre r\u00e9initialiser&lt;/u&gt;&lt;/button&gt;\n\n&lt;/form&gt;\n</code></pre> <p>Ajoutez des valeurs dans votre formulaire, puis cliquez sur un des bouton de r\u00e9-initialisation. Que se passe-t-il ? </p>"},{"location":"05_htmlFormulaire/balise/#bouton-daction","title":"Bouton  d'action","text":"<p>Ajoutez deux boutons d'actions</p> <p>formInscription.html</p> <pre><code>&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;input type=\"button\" name=\"bouton1\" value=\"Buzzer\"&gt;\n    &lt;button type=\"button\" name=\"bouton2\" &gt;Buzzer&lt;/button&gt;\n\n&lt;/form&gt;\n</code></pre> <p>Ajoutez des valeurs dans votre formulaire, puis cliquez sur un des bouton d'action Que se passe-t-il ? </p>"},{"location":"05_htmlFormulaire/balise/#bouton-de-televersement-de-fichier","title":"Bouton de t\u00e9l\u00e9versement de fichier","text":"<p>Ajoutez cet input de type file</p> <p>formInscription.html</p> <pre><code>&lt;form action=\"#\" method=\"post\" &gt;\n\n   [...code pr\u00e9c\u00e9dent...]\n\n    &lt;input type=\"file\" name=\"avatar\" accept=\"image/*, .jpg, .png\"&gt;\n\n&lt;/form&gt;\n</code></pre> <p>Testez. Que se passe-t-il ?  Notez que si vous d\u00e9sirez uploader un fichier, il faut imp\u00e9rativement sp\u00e9cifier <code>`enctype=multipart/form-data</code> dans la balise <code>form</code>.</p>"},{"location":"05_htmlFormulaire/balise/#balise-fieldset","title":"Balise <code>&lt;fieldset&gt;</code>","text":"<p>Pour aider l'utilisateur \u00e0 percevoir la structure d'ensemble des champs d'un formulaire, il est parfois n\u00e9cessaire de regrouper des sous-ensembles de champs. Dans notre exemple, nous allons regrouper toutes les demandes d'informations des donn\u00e9es personnelles du client.</p> <p>Pour cela, nous allons utiliser la balise <code>&lt;fieldset&gt;</code>. Visuellement, par d\u00e9faut, cette balise va dessiner un cadre autour des champs qu'elle contient. Il est possible d'afficher l'intitul\u00e9 du groupement via la balise <code>&lt;legend&gt;</code></p> <p>formInscription.html</p> <pre><code>&lt;form action=\"#\" method=\"post\" &gt;\n\n    &lt;fieldset&gt;\n        &lt;legend&gt;Votre Coordonn\u00e9es&lt;/legend&gt;\n        &lt;label for=\"nom\"&gt; Votre nom : &lt;/label&gt;\n        &lt;input type=\"text\" name=\"nom\" id=\"nom\" required placeholder=\"Entrez votre nom\" value=\"\"   &gt;\n\n        &lt;label for=\"nom\"&gt; Votre pr\u00e9nom : &lt;/label&gt;\n        &lt;input type=\"text\" name=\"prenom\" id=\"prenom\" required placeholder=\"Entrez votre prenom\" value=\"\"   &gt;\n\n    &lt;/fieldset&gt;\n    [...code suivant...]\n&lt;/form&gt;\n</code></pre> <p>Visualisez le r\u00e9sultat.</p> <p>Un <code>&lt;fieldset&gt;</code> qui regroupe tous les champs est inutile. Si vous d\u00e9sirez un encadrement, utilisez plut\u00f4t une bordure sur la balise <code>&lt;form&gt;</code></p>"},{"location":"05_htmlFormulaire/balise/#testing","title":"Testing","text":"<p>Cr\u00e9ez un nouveau fichier nomm\u00e9 <code>formTesting.html</code> Copiez-collez ce code dans un nouveau fichier.</p> Code \u00e0 copier <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Demo formulaire&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"#\"  method=\"POST\"  &gt;\n            &lt;input id=\"counter\" name=\"counter\" type=\"hidden\" value=\"100\"&gt;\n\n            &lt;label for=\"nom\"&gt;Nom&lt;/label&gt;\n            &lt;input id=\"nom\" name=\"nom\" type=\"text\" &gt; \n\n            &lt;label for=\"courriel\"&gt;Courriel&lt;/label&gt;\n            &lt;input id=\"courriel\" name=\"courriel\" type=\"email\" &gt;\n\n            &lt;label for=\"motPasse\"&gt;Mot de passe&lt;/label&gt;\n            &lt;input id=\"motPasse\" name=\"motPasse\" type=\"password\" &gt;\n\n            &lt;label for=\"webPerso\"&gt;Votre site web&lt;/label&gt;\n            &lt;input id=\"webPerso\" name=\"webPerso\" type=\"url\"&gt; \n\n            &lt;label for=\"quantite\"&gt;Quantit\u00e9&lt;/label&gt;\n            &lt;input id=\"quantite\" name=\"quantite\" type=\"number\" value=\"0\"&gt;\n\n            &lt;label for=\"date\"&gt;Livr\u00e9 le&lt;/label&gt;\n            &lt;input id=\"date\" name=\"date\" type=\"date\"&gt; \n\n            &lt;label for=\"heure\"&gt;A partir de&lt;/label&gt;\n            &lt;input id=\"heure\" name=\"heure\" type=\"time\"&gt; \n\n            &lt;label for=\"couleur\"&gt;Couleur&lt;/label&gt;\n            &lt;input id=\"couleur\" name=\"couleur\" type=\"color\"&gt; \n\n            &lt;input type=\"submit\" name=\"Valider\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Tout d'abord, regardez l'aspect du formulaire sur diff\u00e9rents navigateurs (Chrome, Firefox, Opera, Edge, Safari, ...). Que constatez-vous pour les champs \"date\", \"heure\", \"couleur\" notamment ?</p> <p>Ensuite, testez votre formulaire en encodant des donn\u00e9es et en cliquant sur le bouton \"Valider\". Que se passe-t-il si vous entrez une adresse courriel au format incorrect (Exemple: jdupont#hotmail.com) ? A votre avis, est-ce des validations incontournables ?</p> <p>Constatez \u00e9galement que le champ \"counter\" est invisible \u00e0 l'affichage. Il sert \u00e0 conserver une information entre l'affichage d'un formulaire et son traitement. Il ne peut servir \u00e0 stocker une information sensible puisqu'il reste visible via le code source de la page !</p>"},{"location":"05_htmlFormulaire/balise/#en-resume","title":"En r\u00e9sum\u00e9","text":""},{"location":"05_htmlFormulaire/balise/#attributs","title":"Attributs","text":"<p>Adapter le comportement des champs Chaque champ poss\u00e8de des attributs facultatifs permettant de s'assurer de la validit\u00e9 des donn\u00e9es ou de guider l'utilisateur. Notamment, les <code>&lt;input&gt;</code> poss\u00e8dent l'attribut value qui permet de placer une valeur par d\u00e9faut au chargement du formulaire.</p> <code>&lt;autofocus&gt;</code>: \u00c9l\u00e9ment actif au chargement de la page <p>Pour faciliter l'utilisation d'un formulaire, il est parfois utile de rendre actif un \u00e9l\u00e9ment d\u00e8s la fin du chargement de la page. Par d\u00e9faut, c'est le premier \u00e9l\u00e9ment du formulaire.</p> <p>formInscription.html</p> <p>Ouvrez le fichier inscriptionForm.html dans votre navigateur et commencez \u00e0 taper quelque chose au clavier. Quel champ a le focus par d\u00e9faut ? \u00c9ditez ensuite le fichier comme suit: <pre><code>[...code pr\u00e9c\u00e9dent...]\n\n&lt;textarea id=\"message\" name=\"message\" rows=\"3\" cols=\"20\" autofocus&gt;&lt;/textarea&gt;\n\n[...code suivant...]\n</code></pre> Rechargez la page, commencez \u00e0 taper au clavier.. le texte sera \u00e9crit dans le champ \"message\".</p> <code>&lt;autocomplete&gt;</code>: Auto-compl\u00e9tion <p>L'auto-compl\u00e9tion fait appara\u00eetre les diff\u00e9rentes valeurs d\u00e9j\u00e0 entr\u00e9es par l'utilisateur dans le champ texte lors de soumissions ant\u00e9rieures. L'attribut peut \u00eatre plac\u00e9 sur la balise <code>&lt;form&gt;</code> ou sur un champ pr\u00e9cis du formulaire.</p> <p>formInscription.html</p> <p>Validez trois fois votre formulaire en pla\u00e7ant successivement les mots \"pomme\", \"poire\" et \"cerise\" comme valeur dans le champ \"Nom\". Tapez ensuite \"po\" dans le champ \"Nom\" et constatez les propositions du navigateur. Editez ensuite le fichier comme suit: <pre><code>[...code pr\u00e9c\u00e9dent...]\n\n&lt;input type=\"text\" name=\"nom\" id=\"nom\" required placeholder=\"Entrez votre nom\" value=\"\"  autocomplete=\"off\" &gt;\n\n[...code suivant...]\n</code></pre> Rechargez la page, recommencez le m\u00eame test pour v\u00e9rifier que le navigateur ne vous propose plus de suggestions.</p> <code>&lt;disabled&gt;</code>: \u00c9l\u00e9ment d\u00e9sactiv\u00e9 <p>Un \u00e9l\u00e9ment d\u00e9sactiv\u00e9 est affich\u00e9 par d\u00e9faut en gris\u00e9, n'est pas \u00e9ditable par l'utilisateur et ne sera pas envoy\u00e9 lors de la soumission du formulaire. L'utilit\u00e9 d'une telle option est de pouvoir activer un \u00e9l\u00e9ment, par Javascript, si les conditions sont remplies. (\u00e9l\u00e9ment d'une liste s\u00e9lectionn\u00e9, ...).</p> <p>formInscription.html</p> <p>Editez ensuite le fichier comme suit: <pre><code>[...code pr\u00e9c\u00e9dent...]\n\n&lt;input type=\"text\" name=\"prenom\" id=\"prenom\" required placeholder=\"Entrez votre prenom\" value=\"\" disabled  &gt;\n\n[...code suivant...]\n</code></pre> Savez-vous \u00e9diter la valeur du champ \"Pre\u00e9nom\" ? Lors de la soumission, le champ est-il envoy\u00e9 comme les autres donn\u00e9es ?</p> <code>&lt;pattern&gt;</code>: Expression r\u00e9guli\u00e8re <p>Les expressions r\u00e9guli\u00e8res permettent de garantir, c\u00f4t\u00e9 client, qu'un texte entr\u00e9 par un utilisateur respecte un format donn\u00e9.</p> <p>formInscription.html</p> <p>Ajouter cet input : <pre><code>[...code pr\u00e9c\u00e9dent...]\n\n&lt;label for=\"plaque\"&gt;Voiture&lt;/label&gt;&lt;input id=\"plaque\" name=\"plaque\" type=\"text\" pattern=\"^\\d-[A-Z]{3}\\d{3}$\" &gt; \n\n\n[...code suivant...]\n</code></pre> Essayez de soumettre votre formulaire avec les valeurs \"LIA533\" puis \"1-LIA533\".</p> <code>&lt;placeholder&gt;</code>: Indication \u00e0 destination de l'utilisateur <p>La valeur du \"placeholder\" (traduit litt\u00e9ralement: espace r\u00e9serv\u00e9) est un texte expliquant ce que repr\u00e9sente le champ texte (sur mobile, par gain de place, en remplacement d'un <code>&lt;label&gt;</code>) ou pour indiquer le format attendu . (Par exemple pour un champ date : \"jj/mm\"). D\u00e8s que l'utilisateur commence \u00e0 entrer du texte dans le champ et tant que ce champ n'est pas vide, le \"placeholder\" dispara\u00eet.</p> <p>formInscription.html</p> <p>Editez ensuite le fichier comme suit: <pre><code>[...code pr\u00e9c\u00e9dent...]\n\n&lt;input type=\"text\" name=\"prenom\" id=\"prenom\" required placeholder=\"Entrez votre prenom\" value=\"\" disabled  &gt;\n\n[...code suivant...]\n</code></pre> Commencez \u00e0 taper un mot dans le champ \"Nom\". Que constatez-vous ? Et lorsque vous videz \u00e0 nouveau le champ ? Remarquez \u00e9galement qu'\u00e0 la soumission d'un champ non obligatoire sans valeur, le \"placeholder\" n'est pas envoy\u00e9 \u00e0 la place !</p> <code>&lt;readonly&gt;</code>: \u00c9l\u00e9ment en lecture seule <p>Contrairement \u00e0 un \u00e9l\u00e9ment d\u00e9sactiv\u00e9, un \u00e9l\u00e9ment en lecture seule, bien que non modifiable par l'utilisateur, sera toutefois envoy\u00e9 lors de la soumission du formulaire.</p> <p>formInscription.html</p> <p>Ajoutez cet input <pre><code>[...code pr\u00e9c\u00e9dent...]\n\n&lt;label for=\"statut\"&gt;Statut&lt;/label&gt;&lt;input id=\"statut\" name=\"statut\" type=\"text\" readonly value=\"NOUVEAU\"&gt; \n\n[...code suivant...]\n</code></pre> SEssayez de modifier la valeur du champ \"statut\". Soumettez le formulaire et v\u00e9rifiez que la valeur de statut est bien envoy\u00e9e.</p> <code>&lt;required&gt;</code>: \u00c9l\u00e9ment obligatoire <p>Certains \u00e9l\u00e9ments de formulaire doivent \u00eatre rendus obligatoires pour garantir que l'utilisateur a bien encod\u00e9 le minimum d'informations n\u00e9cessaire.</p> <p>formInscription.html</p> <p>Editez ensuite le fichier comme suit: <pre><code>[...code pr\u00e9c\u00e9dent...]\n\n&lt;input type=\"text\" name=\"prenom\" id=\"prenom\" required placeholder=\"Entrez votre prenom\" value=\"\" disabled  &gt;\n\n[...code suivant...]\n</code></pre> Soumettez le formulaire sans sp\u00e9cifier de nom. Que constatez-vous ?</p>"},{"location":"05_htmlFormulaire/balise/#allez-plus-loin","title":"Allez plus loin","text":"<p>Note</p> <p>Pour des illustrations et explications suppl\u00e9mentaires sur les attributs possibles des champs de formulaires, consultez-les sur W3Schools.com</p>"},{"location":"05_htmlFormulaire/exercice/","title":"Exercices","text":""},{"location":"05_htmlFormulaire/exercice/#mutualitehtml","title":"mutualite.html","text":"M\u00e9thodes <ul> <li>Dans le dossier labo3, cr\u00e9ez un nouveau document nomm\u00e9 mutualite.html</li> <li>Cr\u00e9ez la  structure de base dans le fichier .html</li> <li>Cr\u00e9ez le formulaire en tenant compte des indications</li> </ul> <p>En fonction des informations \u00e0 demander aux utilisateurs, cr\u00e9ez votre formulaire en d\u00e9terminant les types de champs les plus adapt\u00e9s :</p> <ul> <li>le statut (Madame ou Monsieur)</li> <li>le nom (obligatoire)</li> <li>la date de naissance</li> <li>le nombre d'enfants (obligatoire)</li> <li>la rue,</li> <li>le num\u00e9ro de maison,</li> <li>le code postal</li> <li>la localit\u00e9</li> <li>la description de la situation familiale (possibilit\u00e9 de laisser un message),</li> <li>choix de l'agence pr\u00e9f\u00e9r\u00e9e (Li\u00e8ge, Namur, Mons) (plusieurs choix possible)</li> </ul>"},{"location":"06_cssBase/","title":"Introduction","text":"<p>L'acronyme CSS signifie (Cascading Style Sheets) ou feuilles de styles en cascade en fran\u00e7ais.</p> <ul> <li>Feuilles de styles... : documents sp\u00e9cifiant le rendu visuel d'\u00e9l\u00e9ments HTML</li> <li>... en cascade : les styles peuvent \u00eatre sp\u00e9cifi\u00e9s dans diff\u00e9rentes feuilles de styles, \u00e0 diff\u00e9rents niveaux d'imbrications de balises et sont appliqu\u00e9s les uns apr\u00e8s les autres, en cascade.</li> </ul> <p>Pour rappel, depuis le XHTML 1.0 et HTML 4.0, il est fortement recommand\u00e9 de s\u00e9parer les donn\u00e9es du document de leur repr\u00e9sentation visuelle. La structure et le contenu du document sont d\u00e9crits en HTML, le rendu visuel de ces \u00e9l\u00e9ments est r\u00e9alis\u00e9 en CSS.</p> Comprendre l'impact des feuilles de styles CSS <p>Consultez le site : CSS Zen Garden</p> <p>Il s'agit de la m\u00eame page html mais avec des feuilles de styles diff\u00e9rentes.</p> <p>Cliquez sur un \u00e9l\u00e9ment du menu lat\u00e9ral droit pour modifier le fichier CSS, et donc le visuel, le contenu du document HTML en lui-m\u00eame ne change pas.</p> <p>En plus de cette s\u00e9paration, l'utilisation des feuilles de styles CSS permet :</p> <ul> <li>d'uniformiser toutes les pages d'un m\u00eame site web, puisqu'une m\u00eame feuille de styles peut \u00eatre appliqu\u00e9e \u00e0 toutes les pages du site.</li> <li>de r\u00e9aliser plusieurs rendus diff\u00e9rents plus facilement  </li> <li>de simplifier la structure HTML puisqu'il n'y a plus d'attributs ou balises li\u00e9s au rendu visuel</li> </ul> <p>Le rendu visuel d'un \u00e9l\u00e9ment HTML par CSS comprend:</p> <ul> <li>Sa position et sa taille,</li> <li>Sa couleur d'avant et d'arri\u00e8re-plan,</li> <li>Son espacement par rapport aux autres \u00e9l\u00e9ments,</li> <li>Ses bordures,</li> <li>Son opacit\u00e9, son ombrage,</li> <li>\u2026</li> </ul>"},{"location":"06_cssBase/arrierePlan/","title":"Propri\u00e9t\u00e9 en arri\u00e8re plan","text":"<p>Cette partie est consacr\u00e9e aux propri\u00e9t\u00e9s d'arri\u00e8re-plan. Les styles vus ne sont pas exhaustifs.  Plus vous les utilisez, mieux vous les connaitrez.</p>"},{"location":"06_cssBase/arrierePlan/#background-color","title":"background-color","text":"background-color: La couleur de l'arri\u00e8re-plan <p>Permet de d\u00e9terminer la couleur de fond d'un \u00e9l\u00e9ment</p> <p>Exemple css<pre><code>body { \n    background-color: #CCC;\n}\n</code></pre> Valeurs possibles :</p> <ul> <li>Un nom pr\u00e9d\u00e9fini de couleur : red, blue,\u2026</li> <li>Une combinaison RGB : #ff0000 ou rgb(255,0,0)</li> <li>Une combinaison RGBa : rgba(255,0,0,0.5)</li> </ul>"},{"location":"06_cssBase/arrierePlan/#background-image","title":"background-image","text":"background-image : Appliquer une image en arri\u00e8re-plan <p>Permet d'appliquer une image en tant que fond d'un \u00e9l\u00e9ment</p> Exemple css<pre><code>body { \n    background-image: url(\"paysage.png\");\n }\n</code></pre> <p>Valeurs possibles :</p> <ul> <li>l'URL d'une image (absolue ou relative)</li> <li>None (d\u00e9faut)</li> </ul>"},{"location":"06_cssBase/arrierePlan/#background-repeat","title":"background-repeat","text":"background-repeat : R\u00e9p\u00e9tition de l'image <p>Permet d'appliquer une image en tant que fond d'un \u00e9l\u00e9ment</p> Exemple css<pre><code>body { \n    background-image: url(\"paysage.png\");\n    background-repeat: repeat-y;\n }\n</code></pre> <p>Valeurs possibles :</p> <ul> <li>repeat: l'image sera r\u00e9p\u00e9t\u00e9e horizontalement et verticalement</li> <li>repeat-x: l'image sera r\u00e9p\u00e9t\u00e9e horizontalement</li> <li>repeat-y: l'image sera r\u00e9p\u00e9t\u00e9e verticalement</li> <li>no-repeat: l'image ne sera pas r\u00e9p\u00e9t\u00e9e</li> </ul>"},{"location":"06_cssBase/entrainement/","title":"S'entrainer","text":"<p>\"Le codage, c'est comme un entra\u00eenement : il faut pers\u00e9v\u00e9rer, m\u00eame quand les bugs te donnent envie de tout balancer !\"</p> <p>Fluke Out est un site web interactif qui permet d'apprendre et de pratiquer les s\u00e9lecteurs CSS de mani\u00e8re ludique. Le jeu propose des d\u00e9fis o\u00f9 les utilisateurs doivent s\u00e9lectionner des \u00e9l\u00e9ments HTML sp\u00e9cifiques en utilisant les s\u00e9lecteurs CSS appropri\u00e9s. C'est un excellent outil pour am\u00e9liorer ses comp\u00e9tences en CSS tout en s'amusant. Les d\u00e9fis varient en difficult\u00e9, ce qui permet de s'adapter \u00e0 diff\u00e9rents niveaux d'exp\u00e9rience.</p> <p>Les \u00e9l\u00e9ments pr\u00e9sent\u00e9s ne sont pas des balises HTML r\u00e9elles, mais plut\u00f4t des repr\u00e9sentations visuelles qui simulent une structure DOM. Cela permet aux utilisateurs de se concentrer sur l'utilisation des s\u00e9lecteurs CSS sans se soucier de la syntaxe HTML.</p> <p></p> <p>Le site suivant utilise des s\u00e9lecteurs avanc\u00e9s.</p> <p>Speedrun est une plateforme ludique d\u00e9di\u00e9e \u00e0 l'apprentissage des s\u00e9lecteurs CSS, o\u00f9 les utilisateurs peuvent relever des d\u00e9fis de codage dans un format de jeu. En relevant des d\u00e9fis \u00e0 diff\u00e9rents niveaux, les utilisateurs \"courent\" pour atteindre des objectifs tout en recevant des retours instantan\u00e9s sur leur code. Avec une interface engageante et un classement comp\u00e9titif, Speedrun rend le codage fun et addictif, tout en boostant vos comp\u00e9tences en CSS !</p> <p></p>"},{"location":"06_cssBase/exercice/","title":"Exercices","text":""},{"location":"06_cssBase/exercice/#methode","title":"M\u00e9thode","text":"<ul> <li>T\u00e9l\u00e9chargez l'archive &gt;&gt; lien de t\u00e9l\u00e9chargement </li> <li>D\u00e9compressez-la et d\u00e9placez son contenu dans votre arborescence d\u00e9di\u00e9e aux exercices</li> <li>Reproduisez l'interface en tenant compte des consign\u00e9es donn\u00e9es ci-dessous  &gt;&gt; Voir l'interface </li> </ul>"},{"location":"06_cssBase/exercice/#consignes","title":"Consignes","text":"<ul> <li>La feuille de style doit \u00eatre externe et li\u00e9e \u00e0 la page html.  Elle sera situ\u00e9e dans le dossier <code>css</code>.</li> <li>Le fond de la page est de couleur gris clair (#eee)</li> <li>Le texte est majoritairement de couleur gris fonc\u00e9 (dimgray)</li> <li>La police est du Tahoma mais si la police n'est pas disponible, il faut pr\u00e9voir l'Arial, sinon une police de type sans-serif.</li> <li>La taille du texte est majoritairement identique \u00e0 celle du navigateur par d\u00e9faut.</li> <li>La couleur du header et du footer est #363636.  Le texte est \u00e9crit en blanc.</li> <li>Certains \u00e9l\u00e9ments sont mis en \u00e9vidence par une couleur verte ( #81b600), une police de couleur blanche et des bords l\u00e9g\u00e8rement arrondis. (&gt;&gt; Infos sur les bords arrondis)</li> <li>La citation est centr\u00e9e et sa taille de police est 1,5 plus grande que celle du navigateur.</li> <li>Les articles sont repr\u00e9sent\u00e9s sous forme de carte avec fond blanc, bordure grise (#CCC) et des bords l\u00e9g\u00e8rement arrondis. (&gt;&gt; Infos sur les bordures).</li> <li>Le mod\u00e8le de boite sera vu dans le prochain chapitre, mais vous pouvez utiliser la propri\u00e9t\u00e9 <code>margin: 1rem;</code> sur les articles pour les espacer les uns des autres.</li> <li>Les listes ne poss\u00e9dent jamais de puce.</li> <li> <p>Les liens, peut importe o\u00f9 ils se trouvent, seront de couleur verte (#81b600).  Au survol de la souris, le soulignement disparait.</p> </li> <li> <p>Votre CSS doit \u00eatre valide W3C (&gt;&gt; Lien validateur CSS)</p> </li> </ul>"},{"location":"06_cssBase/heritage/","title":"H\u00e9ritage","text":""},{"location":"06_cssBase/heritage/#decouverte-1","title":"D\u00e9couverte #1","text":"<p>C'est parti pour votre premi\u00e8re feuille de style.</p> <p> Durant ce premier exercice, pour une question de facilit\u00e9,  nous allons utiliser des techniques qui seront et devront \u00eatre optimis\u00e9es par la suite.</p> Exercice <ul> <li>Cr\u00e9ez un nouveau fichier nomm\u00e9 <code>css-cameleon.html</code> (&gt;&gt; veiller \u00e0 lui attribuer un emplacement et un nom coh\u00e9rents )</li> <li>Copiez ce texte dans le fichier <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Testing&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;em&gt;Ici le &lt;strong&gt;header&lt;/strong&gt; de la page&lt;/em&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;section&gt;\n            &lt;h1&gt;Offres \u00e0 la une&lt;/h1&gt;\n            &lt;p&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Dicta dignissimos hic in, distinctio deleniti corporis esse mollitia odit ratione doloremque architecto perferendis explicabo veritatis nesciunt assumenda voluptatum consequatur aspernatur libero?&lt;/p&gt;\n        &lt;/section&gt;\n        &lt;section&gt;\n            &lt;h2&gt;Nos agences&lt;/h2&gt;\n            &lt;p&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Dicta dignissimos hic in, distinctio deleniti corporis esse mollitia odit ratione doloremque architecto perferendis explicabo veritatis nesciunt assumenda voluptatum consequatur aspernatur libero?&lt;/p&gt;\n        &lt;/section&gt;\n        &lt;section&gt;\n            &lt;h2&gt;Nos circuits&lt;/h2&gt;\n            &lt;p&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Dicta dignissimos hic in, distinctio deleniti corporis esse mollitia odit ratione doloremque architecto perferendis explicabo veritatis nesciunt assumenda voluptatum consequatur aspernatur libero?&lt;/p&gt;\n        &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\n        Copyright HELMo 2024\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> </ul> <p>Observez le rendu dans un navigateur.  Nous pouvons constater que les titres sont en gras, et de taille plus importante que les paragraphes.  La balise <code>&lt;em&gt;</code> provoque un rendu italique et la balise <code>&lt;strong&gt;</code> provoque du gras.</p> <p>Nous pouvons donc en d\u00e9duire que les balises ont des styles par d\u00e9faut.</p>"},{"location":"06_cssBase/heritage/#styles-par-defaut","title":"Styles par d\u00e9faut","text":"<p>Le style par d\u00e9faut d'une balise HTML repr\u00e9sente l'apparence appliqu\u00e9e par le navigateur en l'absence de tout style CSS personnalis\u00e9. Ces styles sont d\u00e9finis par les navigateurs eux-m\u00eames et varient l\u00e9g\u00e8rement selon chaque navigateur. Ils incluent des propri\u00e9t\u00e9s comme les marges, les paddings, la taille des polices...  Les styles par d\u00e9faut sont appel\u00e9s user-agent stylesheets.</p> <p>Pour voir les styles par d\u00e9faut, on peut utiliser les outils de d\u00e9veloppement du navigateur (inspecter l'\u00e9l\u00e9ment) et observer les styles applicables par d\u00e9faut sous \"user-agent stylesheet\". </p>"},{"location":"06_cssBase/heritage/#decouverte-2","title":"D\u00e9couverte #2","text":"<p>Ajoutez le code suivant (surlign\u00e9 en bleu) dans votre fichier html</p> <p><pre><code>[code pr\u00e9c\u00e9dent]\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Testing&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            background-color: Lavender;\n            color : Purple;\n        }\n      &lt;/style&gt;\n&lt;/head&gt;\n[code suivant]\n</code></pre> Rafraichissez l'affichage du fichier \"css-cameleon.html\" dans votre navigateur. Vous pouvez constater que vous avez modifi\u00e9 le visuel de la page sans avoir modifi\u00e9 le code HTML.</p> <p>Que constatez-vous ?  Tous les \u00e9l\u00e9ments obtiennent un fond \"lavende\" et une couleur de texte \"Prune\".</p> <p>Modifiez maintenant ce code :</p> <pre><code>[code pr\u00e9c\u00e9dent]\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Testing&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            background-color: Lavender;\n            color : Purple;\n        }\n        h1{\n            color: DarkGreen;\n            font-size : 3rem;\n        }\n      &lt;/style&gt;\n&lt;/head&gt;\n[code suivant]\n</code></pre> <p>Que constatez-vous ?  Tous les \u00e9l\u00e9ments gardent le fond \"lavende\"  et une couleur de texte \"prune\", except\u00e9 le titre de niveau 1 qui devient de couleur verte et de taille plus grande.  Le titre de niveau 1 h\u00e9rite de la couleur de fond de son parent.</p> <p>Modifiez maintenant ce code :</p> <pre><code>[code pr\u00e9c\u00e9dent]\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Testing&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            background-color: Lavender;\n            color : Purple;\n        }\n        h1{\n            color: DarkGreen;\n            font-size : 3rem;\n        }\n        section {\n            background-color: white;\n        }\n      &lt;/style&gt;\n&lt;/head&gt;\n[code suivant]\n</code></pre> <p>Que constatez-vous ?  Le fond des sections devient blanc mais le texte garde la couleur \"prune\".</p>"},{"location":"06_cssBase/heritage/#heritage-les-concepts-de-balises-parent-et-enfant","title":"H\u00e9ritage : Les concepts de balises \"parent\" et \"enfant\"","text":"<p>Les r\u00e8gles de styles CSS s'appliquent en cascade d'une balise conteneur (parent) aux balises contenues (enfants) selon le mod\u00e8le parent-enfant.</p> <p>Dans notre exercice, nous avons cette structure :</p> <p></p> <p>On constate donc clairement que tous les enfants et petits-enfants du body h\u00e9ritent des styles du parent. Par contre, la couleur de fond des  <code>&lt;section&gt;</code>, bien qu'h\u00e9ritant elle aussi de la couleur \"lavende\" de <code>&lt;body&gt;</code>, est remplac\u00e9e explicitement par du blanc.</p> <p> toutes les propri\u00e9t\u00e9s ne sont pas h\u00e9rit\u00e9es automatiquement. Certaines balises n'h\u00e9ritent pas de certaines propri\u00e9t\u00e9s de leur parent par d\u00e9faut pour des raisons de logique ou de comportement. Nous y reviendrons par la suite.</p> <p> il est important d'\u00e9viter la redondance des styles en les d\u00e9finissant le plus haut possible dans l'arborescence des balises HTML.</p> <p>Comparez ces deux codes :</p> <p> Don't do this </p> <pre><code>body {\n        background-color: Lavender;\n        color : Purple;      \n}\nh1{\n        background-color: Lavender;\n        color: DarkGreen;\n        font-size : 3rem;\n}\nsection {\n        background-color: white;\n        color : Purple;\n}\nsection h1 {\n        background-color: white;\n        color : Purple;\n}\nsection p {\n        background-color: white;\n        color : Purple;\n}\n</code></pre> <p> Do this </p> <pre><code>body {\n        background-color: Lavender;\n        color : Purple;      \n}\nh1{\n        color: DarkGreen;\n        font-size : 3rem;\n}\nsection {\n        background-color: white;\n}\n</code></pre>"},{"location":"06_cssBase/inspecteur/","title":"Inspecteur","text":"<p>Vid\u00e9o: \"Conflits CSS et outil Inspecteur\", dur\u00e9e: 4min11</p>"},{"location":"06_cssBase/liaison/","title":"Liaison","text":"<p>Nous avons vu que les balises html poss\u00e8dent des styles par d\u00e9faut.</p>"},{"location":"06_cssBase/liaison/#decouverte-1","title":"D\u00e9couverte #1","text":"<p>Dans l'exemple utilis\u00e9 pr\u00e9c\u00e9demment, nous avons vu que les styles \u00e9taient encod\u00e9s directement dans la page html au sein de la balise <code>&lt;head&gt;</code>.</p>"},{"location":"06_cssBase/liaison/#feuille-de-styles-interne","title":"Feuille de styles interne","text":"<p>Les r\u00e8gles CSS sont regroup\u00e9es dans le contenu de la page HTML (mais toujours dans la section <code>&lt;head&gt;</code>) au moyen des balises <code>&lt;style&gt;..&lt;/style</code>&gt;</p> <p><pre><code>&lt;head&gt;\n    [code existant]\n    &lt;style&gt;\n        les r\u00e8gles CSS...\n    &lt;/style&gt;\n    [code existant]\n&lt;/head&gt;\n</code></pre> A votre avis, pourquoi n'est-ce pas une bonne pratique ?</p>"},{"location":"06_cssBase/liaison/#decouverte-2","title":"D\u00e9couverte #2","text":"<p>Modifiez le code suivant (surlign\u00e9 en bleu) dans votre fichier html</p> <p><pre><code>[code pr\u00e9c\u00e9dent]\n&lt;section style=\"background-color: LightGrey;\" &gt;\n    &lt;h2&gt;Nos agences&lt;/h2&gt;\n    &lt;p&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Dicta dignissimos hic in, distinctio deleniti corporis esse mollitia odit ratione doloremque architecto perferendis explicabo veritatis nesciunt assumenda voluptatum consequatur aspernatur libero?&lt;/p&gt;\n&lt;/section&gt;\n[code suivant]\n</code></pre> Que constatez-vous ?  Toutes les sections ont un fond de couleur \"blanc\" except\u00e9e celle qui poss\u00e8de un style interne (\"inline\").</p>"},{"location":"06_cssBase/liaison/#style-interne","title":"Style interne","text":"<p>Les propri\u00e9t\u00e9s de style peuvent \u00eatre d\u00e9finies directement au niveau de chaque balise \u00e0 l'aide de l'attribut <code>style</code>. Cette technique est \u00e0 \u00e9viter car le m\u00e9lange de code HTML et CSS rend plus complexe la maintenance de la page.</p> <p><pre><code>&lt;section style=\"background-color: LightGrey;\" &gt;\n</code></pre> A votre avis, pourquoi n'est-ce pas une bonne pratique ?</p>"},{"location":"06_cssBase/liaison/#decouverte-3","title":"D\u00e9couverte #3","text":"<p>Modifiez maintenant ce code :</p> <pre><code>[code pr\u00e9c\u00e9dent]\n &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Testing&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            background-color: Lavender;\n            color : Purple;  \n        }\n\n        h1{\n            color: DarkGreen;\n            font-size : 3rem;\n        }\n        section {\n            background-color: white;\n        }\n    &lt;/style&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/testing.css\" /&gt;\n&lt;/head&gt;\n[code suivant]\n</code></pre> <ul> <li>Cr\u00e9ez un dossier nomm\u00e9 <code>css</code> dans lequel vous cr\u00e9ez un fichier nomm\u00e9 <code>testing.css</code></li> </ul> <p>Dans ce fichier, copiez-collez ce code <pre><code>section{\n    background-color: LightBlue;\n} \n</code></pre></p> <p>Que constatez-vous ?  Pourquoi ? </p>"},{"location":"06_cssBase/liaison/#feuille-de-styles-externe","title":"Feuille de styles externe","text":"<p>La m\u00e9thode recommand\u00e9e est de centraliser l'ensemble des r\u00e8gles CSS d\u2019un site dans un fichier *.css et lier celui-ci aux pages HTML en pla\u00e7ant ce qui suit dans le <code>&lt;head&gt;</code> :</p> <pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"chemin vers fichier *.css\"  &gt;\n</code></pre> Attribut Explication <code>rel</code> d\u00e9finit la relation entre le fichier .html et le fichier li\u00e9. Ici, il s'agit de notre feuille de style. <code>type</code> d\u00e9finit le type de document li\u00e9. Ici, il s'agit d'un fichier .css <code>href</code> permet d'indiquer le chemin vers le fichier css"},{"location":"06_cssBase/liaison/#priorites","title":"Priorit\u00e9s","text":"<p>Nous venons donc de voir qu'il y a 3 niveaux de style en cascade :</p> <ul> <li>La feuille de styles interne d\u00e9finie au niveau d'une page</li> <li>Les styles internes (inlines) d\u00e9finis  au niveau d'une balise sp\u00e9cifique</li> <li>La feuille de style externe appliqu\u00e9e \u00e0 toutes les pages d'un site</li> </ul> <p>Tip</p> <p>Le style le plus proche de la balise est prioritaire :     inline &gt; interne &gt; externe</p>"},{"location":"06_cssBase/liaison/#que-faut-il-utiliser","title":"Que faut-il utiliser ?","text":"<p>Sauf cas particulier, l'utilisation d'une feuille de styles externe est recommand\u00e9e :</p> <ul> <li>Tous les styles sont regroup\u00e9s dans un seul document ce qui facilite la maintenance</li> <li>Les styles ne sont pas dupliqu\u00e9s dans chaque page voire pour chaque balise</li> <li>Le document HTML est plus \u00ab l\u00e9ger \u00bb et plus lisible</li> <li>La feuille de styles, unique pour un site, peut \u00eatre mise en cache par le navigateur, ce qui am\u00e9liore le temps de chargement des pages HTML</li> <li>En ne m\u00e9langeant pas les types de styles (inline, interne ou externe), on \u00e9vite les conflits li\u00e9s \u00e0 des d\u00e9clarations multiples pour les m\u00eames \u00e9l\u00e9ments</li> </ul>"},{"location":"06_cssBase/miseFormeTexte/","title":"Mise en forme","text":"<p>Cette partie est consacr\u00e9e au texte et sa mise en forme. Les styles vus ne sont pas exhaustifs.  Plus vous les utilisez, mieux vous les connaitrez.</p>"},{"location":"06_cssBase/miseFormeTexte/#font-family","title":"font-family","text":"font-family: La police de caract\u00e8res <p>Historiquement, il n'existe que tr\u00e8s peu de polices utilisables sur un site internet :     Arial     Verdana     Times New Roman     ... Cette liste est tr\u00e8s r\u00e9duite.  Pourquoi ? ces typos sont appel\u00e9es Web Safe Fonts, des polices standardis\u00e9es qui sont pr\u00e9install\u00e9es sur la plupart des syst\u00e8mes d'exploitation et navigateurs, garantissant ainsi leur affichage coh\u00e9rent sur tous les appareils et plateformes sans n\u00e9cessiter de chargement externe.</p> <p>Exemple css<pre><code>body { \n    font-family: Arial, Verdana, sans-serif;\n}\n</code></pre> Dans l'exemple ci-dessus, la liste des polices est sp\u00e9cifi\u00e9e dans l'ordre de pr\u00e9f\u00e9rence. Si ni Arial ni Verdana ne sont disponibles, le navigateur appliquera la police par d\u00e9faut sans-serif.</p> <p>Polices g\u00e9n\u00e9riques :</p> <ul> <li>Serif: empattements aux extr\u00e9mit\u00e9s</li> <li>Sans-serif: extr\u00e9mit\u00e9s simples et droites</li> <li>Monospace: tous les caract\u00e8res ont la m\u00eame largeur (i,l,o,m)</li> <li>Cursive: \u00e9criture li\u00e9e</li> <li>Fantasy: police d\u00e9corative</li> </ul>"},{"location":"06_cssBase/miseFormeTexte/#font-weight","title":"font-weight","text":"font-weight: Le texte en gras <p>Permet de contr\u00f4ler la \"graisse\" du texte</p> <p>Exemple css<pre><code>.item { \n    font-weight: bold;\n}\n</code></pre> Diff\u00e9rentes valeurs sont possibles :</p> <ul> <li>normal : Niveau de graisse regular.</li> <li>bold : Niveau de graisse gras.</li> <li>lighter : Diminue d'un niveau la valeur de graisse.</li> <li>bolder : Augmente d'un niveau la valeur de graisse.</li> </ul> <p>Il est aussi possible de donner une valeur comprise en 0 et 1000 :</p> <pre><code>font-weight: 100; /* Thin (Hairline) */\nfont-weight: 200; /* Extra Light (Ultra Light) */\nfont-weight: 300; /* Light*/\nfont-weight: 400; /* Normal */\nfont-weight: 500; /* Medium */\nfont-weight: 600; /* Semi Bold (Demi Bold) */\nfont-weight: 700; /* Bold */\nfont-weight: 800; /* Extra Bold (Ultra Bold) */\nfont-weight: 900; /* Black (Heavy) */\n</code></pre>"},{"location":"06_cssBase/miseFormeTexte/#font-style","title":"font-style","text":"font-style: Le texte en italique <p>Permet de d\u00e9terminer l'orientation du texte</p> <p>Exemple css<pre><code>h3 { \n    font-style: italic;\n}\n</code></pre> Valeurs possibles :</p> <ul> <li>italic: recherche variante de police si elle existe, si elle n'existe pas : elle apparait \"normale\"</li> <li>oblique: g\u00e9n\u00e8re \u00e0 la vol\u00e9e une police italique en inclinant chaque caract\u00e8re, ce qui implique un rendu plus lent mais permet de pr\u00e9senter n'importe quelle police inclin\u00e9e</li> <li>normal : valeur par d\u00e9faut</li> </ul>"},{"location":"06_cssBase/miseFormeTexte/#font-size","title":"font-size","text":"font-size: La taille de la police <p>Permet de d\u00e9terminer la taille du texte</p> Exemple css<pre><code>body { \n    font-size: 1.5rem;\n}\n</code></pre>"},{"location":"06_cssBase/miseFormeTexte/#text-align","title":"text-align","text":"text-align: L'alignement du texte <p>Permet de d\u00e9terminer l\u2019alignement du contenu d\u2019un bloc</p> <p>Exemple css<pre><code>p { \n    text-align: center;\n}\n</code></pre> Valeurs possibles :</p> <ul> <li>left: texte align\u00e9 \u00e0 gauche</li> <li>right: texte align\u00e9 \u00e0 droite</li> <li>center: texte centr\u00e9 dans son \u00e9l\u00e9ment parent</li> <li>justify: texte justifi\u00e9 dans son \u00e9l\u00e9ment parent</li> </ul>"},{"location":"06_cssBase/miseFormeTexte/#text-decoration","title":"text-decoration","text":"text-decoration: Le soulignement du texte <p>Permet de d\u00e9terminer une \"d\u00e9coration\" pour le texte</p> <p>Exemple css<pre><code>p { \n    text-decoration: underline;\n}\n</code></pre> Valeurs possibles :</p> <ul> <li>none: aucun soulinement, par d\u00e9faut</li> <li>underline: texte soulign\u00e9</li> <li>overline: texte surlign\u00e9</li> <li>line-through: texte barr\u00e9</li> </ul>"},{"location":"06_cssBase/miseFormeTexte/#line-height","title":"line-height","text":"line-height: La hauteur d'une ligne de texte <p>Permet de d\u00e9terminer la hauteur d'une ligne pour un texte</p> <p>Exemple css<pre><code>p { \n    line-height: 1rem;\n}\n</code></pre> Valeurs possibles :</p> <ul> <li>normal: par d\u00e9faut</li> <li>un nombre: facteur de multiplication appliqu\u00e9 \u00e0 la taille de police courante,</li> <li>une longueur: exprim\u00e9e en %, px, em, rem, pt, cm, ...</li> </ul>"},{"location":"06_cssBase/miseFormeTexte/#color","title":"color","text":"color: La couleur du texte <p>Permet de d\u00e9terminer la couleur de premier plan d'un \u00e9l\u00e9ment</p> <p>Exemple css<pre><code>body { \n    color : #CCC; /*gris*/\n}\n</code></pre>  Valeurs possibles :</p> <ul> <li>Un nom pr\u00e9d\u00e9fini de couleur : red, blue,\u2026</li> <li>Une combinaison RGB : #ff0000 ou rgb(255,0,0)</li> <li>Une combinaison RGBa : rgba(255,0,0,0.5)</li> </ul>"},{"location":"06_cssBase/selecteur/","title":"S\u00e9lecteur","text":"<p>Les s\u00e9lecteurs sont utilis\u00e9s pour cibler les \u00e9l\u00e9ments HTML sur lesquels des styles doivent s'appliquer.</p> <p></p> Terme Explication <code>selecteur</code> d\u00e9termine sur quel \u00e9l\u00e9ment sera appliqu\u00e9 l'ensemble des propri\u00e9t\u00e9s <code>propri\u00e9t\u00e9</code> d\u00e9termine la propri\u00e9t\u00e9 \u00e0 appliquer <code>valeur</code> valeur \u00e0 appliquer pour la propri\u00e9t\u00e9 <code>propri\u00e9t\u00e9 : valeur</code> d\u00e9termine le style \u00e0 appliquer <p>Pour d\u00e9couvrir les s\u00e9lecteurs, nous allons utiliser cet exercice.</p> <p>REM : cette liste de s\u00e9lecteurs n'est pas exhaustive.</p> <p>M\u00e9thode :</p> <ul> <li>Cr\u00e9ez un nouveau fichier nomm\u00e9 testing.html (&gt;&gt; veiller \u00e0 lui attribuer un emplacement et un nom coh\u00e9rents )</li> <li>Cr\u00e9ez un dossier nomm\u00e9 <code>css</code> et dans ce dossier, cr\u00e9er un fichier nomm\u00e9 <code>testing.css</code>.</li> <li>Copiez ce code dans le fichier <code>testing.html</code></li> <li>Tous les exemples suivants sont \u00e0 appliquer dans cet exercice.</li> </ul> Code \u00e0 copier <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Testing&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n    Fornite \n    &lt;nav&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Boutique&lt;/li&gt;\n            &lt;li&gt;Passe de combat&lt;/li&gt;\n            &lt;li&gt;Actus&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;section&gt;\n            &lt;h1&gt;Fortnite : Cauchemars s'abat sur la mise \u00e0 jour 31.40 de Battle Royale&lt;/h1&gt;\n            &lt;p&gt;Envie de jouer \u00e0 un petit jeu ? Que diriez-vous d'une partie de Battle Royale... pendant &lt;strong&gt;Fortnite : Cauchemars 2024&lt;/strong&gt; ? Cette ann\u00e9e, les festivit\u00e9s comprennent le &lt;strong&gt;Billy explosif&lt;/strong&gt;, une tron\u00e7onneuse mobile, le retour du mode Assaut de la horde et des tas de r\u00e9compenses de qu\u00eate, comme par exemple la tra\u00een\u00e9e &lt;strong&gt;Citrouille planante&lt;/strong&gt; et le planeur &lt;strong&gt;Grand \u00e9pouvantail&lt;/strong&gt;. Fortnite : Cauchemars 2024 se d\u00e9roule jusqu'\u00e0 la fin du Chapitre 5 - Saison 4 !&lt;/p&gt;\n        &lt;/section&gt;\n        &lt;section&gt;\n            &lt;h2&gt;\u00c7a va tron\u00e7onner&lt;/h2&gt;\n            &lt;p&gt;Assez jou\u00e9 comme \u00e7a. Utilisez la &lt;strong&gt;tron\u00e7onneuse &lt;/strong&gt; pour trancher vos adversaires... ou plantez-la dans le sol pour vous propulser en avant \u00e0 toute vitesse ! De quoi encha\u00eener les victoires !&lt;/p&gt;\n            &lt;p&gt;Vous pouvez trouver les tron\u00e7onneuses sur le sol et dans les coffres. \u00c7a va trancher !&lt;/p&gt;\n            &lt;h2&gt;Terreur en tricycle&lt;/h2&gt;\n            &lt;p&gt;Si vous voyez un tricycle derri\u00e8re vous, fuyez ! Les joueurs peuvent d\u00e9sormais lancer un &lt;strong&gt;Billy explosif&lt;/strong&gt;, un petit pantin qui traque l'adversaire le plus proche... et cela peut tout \u00e0 fait \u00eatre vous.&lt;/p&gt;\n            &lt;p&gt;Il s'approche de vous en tricycle, puis explose \u00e0 l'impact. \u00c9chappez-vous avant sa d\u00e9tonation, ou vous serez sa nouvelle victime !&lt;/p&gt;\n            &lt;h2&gt;Plongez vos crocs dans les r\u00e9compenses de qu\u00eate&lt;/h2&gt;\n            &lt;ul&gt;\n                &lt;li&gt;Accomplir 1 qu\u00eate : la basse &lt;strong&gt;Chauve-souris d\u00e9moniaque&lt;/strong&gt;&lt;/li&gt;\n                &lt;li&gt;Accomplir 2 qu\u00eates : l'\u00e9motic\u00f4ne &lt;strong&gt;Heaume du Sculpteur&lt;/strong&gt;&lt;/li&gt;\n                &lt;li&gt;Accomplir 3 qu\u00eates : l'accessoire de dos &lt;strong&gt;Pneu guerrier de la horde&lt;/strong&gt;&lt;/li&gt;\n                &lt;li&gt;Accomplir 4 qu\u00eates : l'\u00e9cran de chargement &lt;strong&gt;Angoisse et chair de poule&lt;/strong&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\n        Copyright Epic Games 2024\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Diff\u00e9rents types de s\u00e9lecteurs existent.</p>"},{"location":"06_cssBase/selecteur/#selecteur-de-type","title":"S\u00e9lecteur de type","text":"<p>Permet d'appliquer un style \u00e0 une balise pour styler toutes les occurrences de cette balise. <pre><code>strong{\n    color: orange;\n}\n</code></pre></p> <p>Le s\u00e9lecteur de balise cible tous les \u00e9l\u00e9ments d\u2019un type sp\u00e9cifique.  Dans l'exemple donn\u00e9, tous les textes de toutes les balises <code>&lt;br&gt;</code> seront de couleur orange. Il n\u2019est pas tr\u00e8s pr\u00e9cis car il applique le m\u00eame style \u00e0 tous les \u00e9l\u00e9ments de ce type sur la page, sans distinction. Pour des styles plus cibl\u00e9s, on utilise des s\u00e9lecteurs de classe ou d\u2019identifiant.</p>"},{"location":"06_cssBase/selecteur/#selecteur-de-class","title":"S\u00e9lecteur de class","text":"<p>Le s\u00e9lecteur de type <code>class</code> permet de d\u00e9finir un style qui sera appliqu\u00e9 \u00e0 toutes les balises html utilisant cette <code>class</code>.</p> <p>Le s\u00e9lecteur de classe commence toujours par un point <code>.</code>  suivi d'un <code>nom de votre choix</code>.</p> <p>CSS<pre><code>.final-summary{\n    background-color: DarkRed;\n    color: white;\n}\n</code></pre> Les balises html sur lesquelles nous vous appliquer le style utilisera l'attribut <code>class</code> et le <code>nom de la class</code> comme valeur d'attribut. HTML<pre><code>&lt;section&gt;\n    &lt;h2&gt;\u00c7a va tron\u00e7onner&lt;/h2&gt;\n    &lt;p&gt;Assez jou\u00e9 comme \u00e7a. Utilisez la &lt;strong&gt;tron\u00e7onneuse &lt;/strong&gt; pour trancher vos adversaires... ou plantez-la dans le sol pour vous propulser en avant \u00e0 toute vitesse ! De quoi encha\u00eener les victoires !&lt;/p&gt;\n    &lt;p class=\"final-summary\"&gt;Vous pouvez trouver les tron\u00e7onneuses sur le sol et dans les coffres. \u00c7a va trancher !&lt;/p&gt;\n    &lt;h2&gt;Terreur en tricycle&lt;/h2&gt;\n    &lt;p&gt;Si vous voyez un tricycle derri\u00e8re vous, fuyez ! Les joueurs peuvent d\u00e9sormais lancer un &lt;strong&gt;Billy explosif&lt;/strong&gt;, un petit pantin qui traque l'adversaire le plus proche... et cela peut tout \u00e0 fait \u00eatre vous.&lt;/p&gt;\n    &lt;p class=\"final-summary\"&gt;Il s'approche de vous en tricycle, puis explose \u00e0 l'impact. \u00c9chappez-vous avant sa d\u00e9tonation, ou vous serez sa nouvelle victime !&lt;/p&gt;\n    &lt;h2&gt;Plongez vos crocs dans les r\u00e9compenses de qu\u00eate&lt;/h2&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Accomplir 1 qu\u00eate : la basse &lt;strong&gt;Chauve-souris d\u00e9moniaque&lt;/strong&gt;&lt;/li&gt;\n        &lt;li&gt;Accomplir 2 qu\u00eates : l'\u00e9motic\u00f4ne &lt;strong&gt;Heaume du Sculpteur&lt;/strong&gt;&lt;/li&gt;\n        &lt;li&gt;Accomplir 3 qu\u00eates : l'accessoire de dos &lt;strong&gt;Pneu guerrier de la horde&lt;/strong&gt;&lt;/li&gt;\n        &lt;li&gt;Accomplir 4 qu\u00eates : l'\u00e9cran de chargement &lt;strong&gt;Angoisse et chair de poule&lt;/strong&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/section&gt;\n</code></pre></p>"},{"location":"06_cssBase/selecteur/#selecteur-didentifiant","title":"S\u00e9lecteur d'identifiant","text":"<p>Le s\u00e9lecteur de type <code>id</code> permet de d\u00e9finir un style qui sera appliqu\u00e9 \u00e0 la balise html utilisant cet <code>id</code>.</p> <p>Le s\u00e9lecteur d'identifiant commence toujours par un point <code>#</code>  suivi d'un <code>nom de votre choix</code>.</p> CSS<pre><code>#nav-principal{\n    background-color: black;\n    color: white;\n}\n</code></pre> <p>La balise  html sur laquelle nous vous appliquer le style utilisera l'attribut <code>id</code> et le <code>nom de l'identifant</code> comme valeur d'attribut. HTML<pre><code>&lt;nav id=\"nav-principal\"&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Boutique&lt;/li&gt;\n        &lt;li&gt;Passe de combat&lt;/li&gt;\n        &lt;li&gt;Actus&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre></p> <p>Tip</p> <p>Le nom d'un #id ne doit pas contenir :</p> <pre><code>- des espaces,\n- des caract\u00e8res sp\u00e9ciaux,\n- des accents.\n</code></pre> <p>Il doit commencer par une lettre (non pas un chiffre).</p> <p>Tip</p> <p>IMPORTANT : Un style appliqu\u00e9 \u00e0 un id est prioritaire au style appliqu\u00e9 \u00e0 une classe. IMPORTANT : vous pouvez appliquer une class autant de fois que vous le d\u00e9sirez dans un document html. Par contre, vous ne pouvez utiliser qu'une seule fois un identifiant sur une page html. html incorrect<pre><code>    &lt;section id=\"monId\"&gt;\n        ici le texte de la section \n    &lt;section&gt;\n    &lt;section id=\"monId\"&gt;\n        ici le texte de la section \n    &lt;section&gt;\n    &lt;section id=\"monId\"&gt;\n        ici le texte de la section \n    &lt;section&gt;\n</code></pre> html correct<pre><code>    &lt;section class=\"maClass\"&gt;\n        ici le texte de la section \n    &lt;section&gt;\n    &lt;section class=\"maClass\"&gt;\n        ici le texte de la section \n    &lt;section&gt;\n    &lt;section class=\"maClass\"&gt;\n        &lt;p id=\"monId\"&gt;ici le texte de la section &lt;/p&gt;\n    &lt;section&gt;\n</code></pre></p>"},{"location":"06_cssBase/selecteur/#liste-de-selecteurs","title":"Liste de s\u00e9lecteurs","text":"<p>Cibler toutes les occurences de plusieurs balises</p> <p>CSS<pre><code>h1, h2{\n    border-bottom : 1px solid DarkRed;\n}\n</code></pre> Tous les titres <code>h1</code> ET  (,)  <code>h2</code> auront une bordure basse.</p>"},{"location":"06_cssBase/selecteur/#selecteurs-descendants","title":"S\u00e9lecteurs descendants","text":"<p>Cibler toutes les occurrences d'une balise contenues dans une balise sp\u00e9cifique.</p> <p>CSS<pre><code>#nav-principal li {\n   list-style-type: \"\\1F44D\";\n}\n</code></pre> Tous les <code>li</code> contenu dans la balise poss\u00e9dant l'identifiant <code>nav-principal</code> auront une puce modifi\u00e9e. Regardez votre fichier, la seconde liste n'a pas ses puces modifi\u00e9es.</p>"},{"location":"06_cssBase/selecteur/#selecteurs-balise-html","title":"S\u00e9lecteurs balise html","text":"<p>Un \u00e9l\u00e9ment html peut poss\u00e9der plusieurs valeurs pour l'attribut class, ce qui permet d'appliquer plusieurs styles CSS \u00e0 un m\u00eame \u00e9l\u00e9ment. </p> <p>Syntaxe : Les valeurs de classe sont s\u00e9par\u00e9es par des espaces. Cascading : Les styles s'appliquent en fonction de l'ordre de d\u00e9finition dans le CSS. Si deux classes d\u00e9finissent des styles conflictuels, le style de la derni\u00e8re classe sp\u00e9cifi\u00e9e dans le CSS prendra effet. </p> <p>Utilit\u00e9 :  </p> <ul> <li> <p>R\u00e9utilisation des styles  :  Permet de combiner des styles de diff\u00e9rentes classes pour un seul \u00e9l\u00e9ment, facilitant ainsi la gestion et la r\u00e9utilisation du code CSS.  </p> </li> <li> <p>Modularit\u00e9   : En utilisant plusieurs classes, les d\u00e9veloppeurs peuvent appliquer des styles sp\u00e9cifiques tout en maintenant une structure modulaire. Cela am\u00e9liore la clart\u00e9 et la maintenabilit\u00e9 du code.</p> </li> </ul> <pre><code>&lt;h1 class=\"classe1 classe2 classe3\"&gt;Contenu&lt;/h1&gt;\n</code></pre>"},{"location":"06_cssBase/selecteurAvance/","title":"S\u00e9lecteurs avanc\u00e9s","text":"<p>Ce chapitre est optionnel. Mais n'h\u00e9sitez pas \u00e0 le parcourir et utiliser les techniques pour \u00eatre plus performant.</p>"},{"location":"06_cssBase/selecteurAvance/#descendants-directs","title":"Descendants directs","text":"<p>Pour les exemples suivants, utilisons ce codePen.</p> <p> See the Pen    Untitled by Flolec (@Flolec)   on CodePen. </p> <p>Obervez la structure du code html enfant. Le code suivant permet de cibler les <code>p</code> si ils sont descendants directs d'une section. Nous pouvons donc voir que le <code>p</code> pr\u00e9sent dans le <code>blockquote</code> n'est pas atteint.</p> <p>CSS<pre><code>section &gt; p{ \n    color: red;\n}\n</code></pre> Permet de cibler les <code>p</code> qui sont enfants directs de la <code>section</code>.</p> <p>A votre avis, que se passe-t-il si on enl\u00e8ve le signe <code>&gt;</code> ? Testez-le dans le codePen.</p>"},{"location":"06_cssBase/selecteurAvance/#voisins-directs","title":"Voisins directs","text":"<p>Commentez-le premier s\u00e9lecteur et d\u00e9commentez le second. Qu'observez-vous ? CSS<pre><code>section + p{\n    color: blue;\n}\n</code></pre> Seul  le <code>p</code> directement voisin de la <code>section</code> est impact\u00e9. (cibler le <code>p</code> qui est plac\u00e9 directement apr\u00e8s la <code>section</code> ) </p>"},{"location":"06_cssBase/selecteurAvance/#voisins","title":"Voisins","text":"<p>Commentez-le deuxi\u00e8me s\u00e9lecteur et d\u00e9commentez le troisi\u00e8me. Qu'observez-vous ? CSS<pre><code>section ~ p{\n    color: green;\n}\n</code></pre> Seuls  les <code>p</code> qui suivent la <code>section</code> sont impact\u00e9s. (cibler les <code>p</code> qui sont plac\u00e9s apr\u00e8s la <code>section</code> tout en ayant le m\u00eame parent) </p>"},{"location":"06_cssBase/selecteurAvance/#first-child","title":":first-child","text":"<p>Pour les exemples suivants, utilisons ce codePen.</p> <p>La pseudo-classe <code>:first-child</code> permet de cibler un \u00e9l\u00e9ment qui est le premier \u00e9l\u00e9ment enfant par rapport \u00e0 son  parent.</p> <p> See the Pen    pseudo-class by Flolec (@Flolec)   on CodePen. </p>"},{"location":"06_cssBase/selecteurAvance/#last-child","title":":last-child","text":"<p>La pseudo-classe <code>:last-child</code> permet de cibler un \u00e9l\u00e9ment qui est le dernier enfant de son parent.</p> <p>Commentez-le premier s\u00e9lecteur et d\u00e9commentez le second.</p>"},{"location":"06_cssBase/selecteurAvance/#pseudo-classes","title":"Pseudo-classes","text":"<p>Vous avez maintenant compris le principe des pseudos-classe, observez les exemples suivants dans le doc MDN :</p> <p>:last-of-type :nth-child :nth-last-child</p>"},{"location":"06_cssBase/selecteurAvance/#pseudo-element-before","title":"pseudo-\u00e9l\u00e9ment ::before","text":"<p>Le pseudo-\u00e9l\u00e9ment <code>::before</code> est utilis\u00e9 en CSS pour ins\u00e9rer du contenu avant l'\u00e9l\u00e9ment cibl\u00e9, sans modifier le HTML.</p> <p>Voici les points cl\u00e9s de son fonctionnement :</p> <p>Principes de Base</p> <ul> <li>D\u00e9claration et contenu</li> </ul> <p><code>::before</code> est d\u00e9clar\u00e9 avec content, qui d\u00e9finit ce qu\u2019il affiche. Le contenu peut \u00eatre du texte, une image, un symbole, ou m\u00eame laiss\u00e9 vide (content: \"\") pour styliser l'\u00e9l\u00e9ment.</p> <p>Ce pseudo-\u00e9l\u00e9ment est id\u00e9al pour ajouter des d\u00e9corations, ic\u00f4nes, ou m\u00eame des \u00e9l\u00e9ments graphiques, sans toucher \u00e0 la structure HTML.</p> <ul> <li>Position et rendu</li> </ul> <p><code>::before</code> est toujours positionn\u00e9 avant le contenu r\u00e9el de l'\u00e9l\u00e9ment cibl\u00e9.</p> <p>Il h\u00e9rite du type de bo\u00eete de l\u2019\u00e9l\u00e9ment parent (bloc ou en ligne), mais peut aussi \u00eatre modifi\u00e9 ind\u00e9pendamment en ajoutant des propri\u00e9t\u00e9s comme display: block ou display: inline-block.</p> <ul> <li>Exemples d\u2019utilisation</li> </ul> <p>Ic\u00f4nes et symboles : En ajoutant une ic\u00f4ne ou un symbole avant un texte, comme un coche (\u2713) ou une puce.   \u00c9l\u00e9ments graphiques : Cr\u00e9er des \u00e9l\u00e9ments de d\u00e9corations comme des bordures ou des arri\u00e8re-plans stylis\u00e9s (soulignement de titres, puces de liste).</p> <p><pre><code> a::before {\n  content: \"||\";\n}\n</code></pre> * Avantages</p> <p>S\u00e9paration du style et du contenu : Permet d'enrichir visuellement le contenu sans complexifier le HTML.</p> <p>Optimisation du code : Les \u00e9l\u00e9ments d\u00e9coratifs peuvent \u00eatre ajout\u00e9s via CSS seulement, \u00e9vitant la duplication de balises HTML.</p>"},{"location":"07_cssBoite/","title":"Bloc-inline","text":"<p>Tout \u00e9l\u00e9ment html est inclus dans une bo\u00eete (\"box\" en anglais). Il existe deux types de boites : le boite de type bloc  (\"block boxes\" en anglais) et les bo\u00eetes en ligne (\"inline boxes\").</p>"},{"location":"07_cssBoite/#type-bloc","title":"Type bloc","text":"<p>Les principales caract\u00e9ristiques d'une boite de type bloc sont</p> <ul> <li>l'\u00e9l\u00e9ment occupe tout l'espace disponible de son parent</li> <li>l'\u00e9l\u00e9ment provoque un retour \u00e0 la ligne et fait passer l'\u00e9l\u00e9ment suivant \u00e0 la ligne</li> <li>on peut jouer sur les propri\u00e9t\u00e9s de largeur (<code>width</code>) et hauteur (<code>height</code>)</li> <li>les propri\u00e9t\u00e9s padding, margin, et border du mod\u00e8le de bo\u00eete (vues prochainement) influencent la disposition des \u00e9l\u00e9ments </li> </ul> <p>Exemples : <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;h1&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;header&gt;</code>...</p>"},{"location":"07_cssBoite/#type-en-ligne","title":"Type en ligne","text":"<p>Les principales caract\u00e9ristiques d'une boite de type en ligne sont</p> <ul> <li>l'\u00e9l\u00e9ment, par d\u00e9faut, occupe la place de son contenu</li> <li>l'\u00e9l\u00e9ment ne provoque pas de retour \u00e0 la ligne, les autres \u00e9l\u00e9ments se suivent donc en ligne</li> <li>les propri\u00e9t\u00e9s de largeur (<code>width</code>) et hauteur (<code>height</code>) ne s'appliquent pas</li> <li>les propri\u00e9t\u00e9s padding vertical, margin vertical, bordures verticales (vues prochainement) seront appliqu\u00e9es mais ne provoqueront pas de d\u00e9placement des \u00e9l\u00e9ments</li> <li>les propri\u00e9t\u00e9s padding horizontal, margin horizontal, bordures horizontal (vues prochainement) seront appliqu\u00e9es et provoqueront des d\u00e9placements des \u00e9l\u00e9ments</li> </ul> <p>Exemples : <code>&lt;span&gt;</code>, <code>&lt;img&gt;</code>,<code>&lt;a&gt;</code>, <code>&lt;strong&gt;</code>...</p>"},{"location":"07_cssBoite/#flux-courant","title":"Flux courant","text":"<p>Le flux courant des \u00e9l\u00e9ments HTML d\u00e9crit la mani\u00e8re dont les \u00e9l\u00e9ments sont dispos\u00e9s sur une page en fonction de leur ordre dans le code et de leurs propri\u00e9t\u00e9s CSS. </p> <p>Voici les points cl\u00e9s :</p> <ul> <li>Ordre de rendu : Les \u00e9l\u00e9ments sont affich\u00e9s dans l'ordre dans lequel ils apparaissent dans le code, de haut en bas et de gauche \u00e0 droite.</li> <li>Mod\u00e8le de bo\u00eete : Chaque \u00e9l\u00e9ment est trait\u00e9 comme une bo\u00eete avec des marges, du padding et une bordure (vus prochainement), influen\u00e7ant son espacement et son positionnement.</li> </ul> <p>Par d\u00e9faut, les \u00e9l\u00e9ments html sont donc plac\u00e9s sur la page d'apr\u00e8s le flux courant.</p>"},{"location":"07_cssBoite/boite/","title":"Mod\u00e8le de la boite","text":""},{"location":"07_cssBoite/boite/#intro","title":"Intro","text":"<p>Chaque \u00e9l\u00e9ment HTML est interpr\u00e9t\u00e9 par le navigateur comme une \"bo\u00eete\".  D\u00e9couvrons les caracteristiques de cette boite.</p> <p>Note : les captures d'\u00e9cran de l'inspecteur ont \u00e9t\u00e9 r\u00e9alis\u00e9es sous Chrome.  En fonction de votre navigateur, il se peut que les informations et couleurs soit pr\u00e9sent\u00e9es diff\u00e9remment.</p> <p>Pr\u00e9parez votre environnement de d\u00e9couverte :</p> <ul> <li>Cr\u00e9ez un nouveau dossier</li> <li>Cr\u00e9ez un nouveau fichier nomm\u00e9 <code>boiteTest.html</code> et copiez le code suivant </li> </ul> Code \u00e0 copier <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Mod\u00e8le de boite : testing&lt;/title&gt;\n    &lt;style&gt;\n        /*pour une question de facilit\u00e9, nous utiliserons les styles directement dans la page. Mais n'oubliez pas que dans tout projet, il faut utiliser une feuille de style externe.*/\n        section{\n            border: 0.1rem solid #000;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;section&gt;\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim totam nihil perferendis veritatis maxime\n        accusantium, tenetur repudiandae exercitationem expedita magnam dignissimos vitae eligendi ad iure incidunt\n        corrupti autem nulla reprehenderit!\n    &lt;/section&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"07_cssBoite/boite/#contenu","title":"Contenu","text":"<p>A l'aide de l'inspecteur, observez le mod\u00e8le de boite.</p> <p> </p> <p>Le contenu de l'\u00e9l\u00e9ment est en bleu.</p> <p>Les propri\u00e9t\u00e9s <code>height</code> et <code>width</code> permettent de d\u00e9finir la hauteur et la largeur du contenu. Rem :  Nous verrons plus tard qu'il ne s'agit pas de la place occup\u00e9e par l'\u00e9l\u00e9ment dans le flux courant.</p>"},{"location":"07_cssBoite/boite/#padding","title":"Padding","text":"<p>Toujours \u00e0 l'aide de l'inspecteur, observez le mod\u00e8le de boite,  le padding (en vert) et le margin (en orange).</p> <p></p> <p>Nous observons qu'il n'y a pas de valeurs pour les margin et padding.  Le contenu est coll\u00e9 au bord de la boite, mat\u00e9rialis\u00e9 par la bordure.</p> <p>Modifions le code : </p> <p>css : padding<pre><code>[...code pr\u00e9c\u00e9dent...]\nsection {\n    border: 0.1rem solid #000;\n    padding: 1rem;\n}\n[...code suivant...]\n</code></pre> Le contenu est maintenant espac\u00e9 du bord de la boite de l'\u00e9l\u00e9ment.</p> <p>Inspectez votre code.</p> <p></p> <p>Visuellement, nous retrouvons l'espace en vert.</p> <p>Nous pouvons donc dire que la propri\u00e9t\u00e9 padding est l'espace vide plac\u00e9 entre le contenu et le bord de l'\u00e9l\u00e9ment. On pourrait \u00e9galement appeler la propri\u00e9t\u00e9 padding \"marge int\u00e9rieure de la boite\". </p>"},{"location":"07_cssBoite/boite/#margin","title":"Margin","text":"<p>Modifions le code et ajoutons une autre section :</p> <p>css : margin<pre><code>[...code pr\u00e9c\u00e9dent...]\n&lt;section&gt;\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim totam nihil perferendis veritatis maxime accusantium, tenetur repudiandae exercitationem expedita magnam dignissimos vitae eligendi ad iure incidunt corrupti autem nulla reprehenderit!\n&lt;/section&gt;\n[...code suivant...]\n</code></pre> </p> <p>Visuellement, les deux sections se touchent.  Pour les espacer, nous allons utiliser un <code>margin</code>.</p> css : margin<pre><code>[...code pr\u00e9c\u00e9dent...]\nsection {\n    border: 0.1rem solid #000;\n    padding: 1rem;\n    margin : 1.2rem;\n}\n[...code suivant...]\n</code></pre> <p>Inspectez votre code et observez les marges.</p> <p></p> <p>Visuellement, nous retrouvons l'espace en orange.</p> <p>Nous pouvons donc dire que la propri\u00e9t\u00e9 margin est l'espace vide plac\u00e9 entre le bord de l'\u00e9l\u00e9ment et les autres \u00e9l\u00e9ments. On pourrait \u00e9galement appeler la propri\u00e9t\u00e9 padding \"marge ext\u00e9rieure de la boite\". </p>"},{"location":"07_cssBoite/boite/#valeur-par-defaut","title":"Valeur par d\u00e9faut","text":"<p>Selon le type d'\u00e9l\u00e9ment, les \u00e9l\u00e9ments HTML ont par d\u00e9faut des valeurs pour les marges et le padding. Par exemple, les titres (<code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, etc.), les listes (<code>&lt;ul&gt;</code>), les paragraphes (<code>&lt;p&gt;</code>)... ont des marges automatiques d\u00e9finies par le navigateur.</p> <p>Modifiez le code comme suit et observez les diff\u00e9rentes valeurs par d\u00e9faut avec l'inspecteur.</p> <p>TIPS : cliquez sur la balise html pour voir le code css appliqu\u00e9 et les valeurs par d\u00e9faut.</p> <pre><code>&lt;section class=\"intro\"&gt;\n    &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim totam nihil perferendis veritatis maxime accusantium&lt;/p&gt;\n    &lt;p&gt;Tenetur repudiandae exercitationem expedita magnam dignissimos vitae eligendi ad iure incidunt\n    corrupti autem nulla reprehenderit!&lt;/p&gt;\n&lt;/section&gt;\n&lt;section class=\"theme\"&gt;\n    &lt;h2&gt;Les marges&lt;/h2&gt;\n    &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim totam nihil perferendis veritatis maxime  accusantium, tenetur repudiandae exercitationem expedita magnam dignissimos vitae eligendi ad iure incidunt corrupti autem nulla reprehenderit!\n&lt;/section&gt;\n</code></pre> <p>Ces valeurs par d\u00e9faut peuvent \u00eatre modifi\u00e9es via le CSS en sp\u00e9cifiant explicitement les propri\u00e9t\u00e9s margin et padding. Cela permet de contr\u00f4ler pr\u00e9cis\u00e9ment l'espacement interne (padding) et externe (margin) de chaque \u00e9l\u00e9ment.</p>"},{"location":"07_cssBoite/boite/#la-fusion-des-marges","title":"La fusion des marges","text":"<p>Toujours en partant du code pr\u00e9c\u00e9dent. Vous avez d\u00e9fini une marge de 1.2rem pour chaque section. Logiquement, on pourrait s'attendre \u00e0 ce que l'espace entre deux sections adjacentes soit la somme de ces deux marges, soit 2.4rem (1.2rem + 1.2rem). Cependant, en inspectant la page avec les outils de d\u00e9veloppement, on constate que l'espace r\u00e9el entre les sections est seulement de 1.2rem.</p> <p>Pourquoi l'espace entre les sections n'est-il pas de 2.4rem ?</p> <p>Utilisez l'inspecteur pour observer le comportement des marges. Modifiez le code css comme suit et attribuez la class <code>intro</code> \u00e0 la premi\u00e8re section et la class <code>theme</code> \u00e0 la seconde section:</p> <p>margin<pre><code>&lt;style&gt;\n        /*pour une question de facilit\u00e9, nous utiliserons les styles directement dans la page. Mais n'oubliez pas que dans tout projet, il faut utiliser une feuille de style externe.*/\n        section {\n            border: 0.1rem solid #000;\n            padding: 1rem;\n        }\n\n        .intro {\n            margin: 1.2rem;\n        }\n\n        .theme {\n            margin: 4rem;\n        }\n&lt;/style&gt;\n</code></pre> Que pouvez-vous en d\u00e9duire ? </p> <p>L'espace entre les deux sections est de 4rem au lieu de 5.2rem (1.2rem + 4rem) en raison du ph\u00e9nom\u00e8ne appel\u00e9 \"fusion de marges\" (collapsing margins). Lorsque deux \u00e9l\u00e9ments blocs verticaux ont des marges adjacentes, la marge la plus grande est appliqu\u00e9e, et non la somme des deux.  Attention, la fusion des marges concerne uniquement les marges verticales.</p>"},{"location":"07_cssBoite/boite/#debordement","title":"D\u00e9bordement","text":"<p>Remplacez votre code par celui-ci : </p> Nouveau code margin<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Mod\u00e8le de boite : testing&lt;/title&gt;\n    &lt;style&gt;\n        /*pour une question de facilit\u00e9, nous utiliserons les styles directement dans la page. Mais n'oubliez pas que dans tout projet, il faut utiliser une feuille de style externe.*/\n        section {\n            background-color: #CCC;\n        }\n\n        .intro {}\n\n        .theme {}\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;section class=\"intro\"&gt;\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim totam nihil perferendis veritatis maxime\n        accusantium\n        Tenetur repudiandae exercitationem expedita magnam dignissimos vitae eligendi ad iure incidunt\n        corrupti autem nulla reprehenderit!\n    &lt;/section&gt;\n    &lt;section class=\"theme\"&gt;\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim totam nihil perferendis veritatis maxime\n        accusantium, tenetur repudiandae exercitationem expedita magnam dignissimos vitae eligendi ad iure incidunt\n        corrupti autem nulla reprehenderit!\n    &lt;/section&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Les sections ne poss\u00e8dent plus de bordures, plus de marge ni de padding. Par contre, elles ont un fond de couleur. Visuellement, on constate que les sections se touchent.</p> <p></p> <p>Ajoutez un titre <code>&lt;h2&gt;Les marges&lt;/h2&gt;</code> dans la deuxi\u00e8me section.</p> <p>Nous constatons qu'il existe un \u00e9cart entre les deux sections.</p> <p>Inspectez les sections.  Vous constatez que les sections n'ont pas de marges.  </p> <p></p> <p>D'o\u00f9 vient l'espace ? Inspectez le titre.</p> <p></p> <p>Pourquoi ?  L'espace entre les sections ici est d\u00fb \u00e0 un d\u00e9bordement des marges (ou margin collapse) caus\u00e9 par l'\u00e9l\u00e9ment <code>&lt;h2&gt;</code>.</p> <p>Dans ce cas :</p> <p>L'\u00e9l\u00e9ment <code>&lt;h2&gt;</code> \u00e0 l'int\u00e9rieur de la section <code>.theme</code> poss\u00e8de des marges par d\u00e9faut. Cette marge d\u00e9borde en dehors de la section parent (.theme), cr\u00e9ant un espace entre les deux sections.  Cela se produit parce que les marges des \u00e9l\u00e9ments enfants peuvent parfois d\u00e9border vers l'ext\u00e9rieur des conteneurs.</p> <p>Pour \u00e9viter ce d\u00e9bordement, on peut ajouter un padding ou une bordure \u00e0 la section parente, par exemple :  <pre><code>.theme {\n    padding-top: 0.063rem; /* \u00c9vite le d\u00e9bordement de la marge */\n}\n</code></pre></p>"},{"location":"07_cssBoite/boite/#elements-en-ligne","title":"El\u00e9ments en ligne","text":"<p>Remplacez votre code par celui-ci : </p> Nouveau code inline<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Mod\u00e8le de boite : testing&lt;/title&gt;\n    &lt;style&gt;\n        /*pour une question de facilit\u00e9, nous utiliserons les styles directement dans la page. Mais n'oubliez pas que dans tout projet, il faut utiliser une feuille de style externe.*/\n        section {\n            border: 0.063rem solid #CCC;\n            margin: 1rem;\n            padding: 1rem;\n        }\n\n        .info {\n            border: 0.063rem solid #000;\n            background-color: rgba(255, 0, 0, 0.3);\n\n            /* width: 10rem; */\n\n            /* padding: 0.5rem; */\n\n            /* margin: 0.5rem; */\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;section&gt;\n        Lorem ipsum &lt;span class=\"info\"&gt;dolor sit amet&lt;/span&gt;dolor sit amet consectetur adipisicing elit. Enim totam\n        nihil perferendis veritatis maxime accusantium Tenetur repudiandae exercitationem expedita magnam dignissimos\n        vitae eligendi ad iure incidunt\n        corrupti autem nulla reprehenderit!\n    &lt;/section&gt;\n    &lt;section&gt;\n        &lt;h2&gt;Titre&lt;/h2&gt;\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Enim totam nihil perferendis veritatis maxime\n        accusantium, tenetur repudiandae exercitationem expedita magnam dignissimos vitae eligendi ad iure incidunt\n        corrupti autem nulla reprehenderit!\n    &lt;/section&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>D\u00e9commentez les lignes une \u00e0 une, utilisez l'inspecteur pour observer le code et son rendu. Qu'observez-vous ?</p> <p>Relisez ces informations Propri\u00e9t\u00e9s des boites. Les comprenez-vous mieux ?</p>"},{"location":"07_cssBoite/centrerBloc/","title":"Centrer un \u00e9l\u00e9ment de type block","text":"<p>Si vous d\u00e9sirez un \u00e9l\u00e9ment de type bloc au milieu de la page, une m\u00e9thode tr\u00e8s simple est d'utiliser </p> <ul> <li>des marges lat\u00e9rales <code>auto</code></li> <li>une largeur \u00e0 votre \u00e9l\u00e9ment bloc</li> </ul> <p>Les marges auto se r\u00e9partissent \u00e9galement de chaque c\u00f4t\u00e9, centrant l'\u00e9l\u00e9ment dans son conteneur.</p> <p>Testez ce code :</p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p> <p>Testing :</p> <ul> <li>R\u00e9duisez la largeur de la fen\u00eatre. Que constatez-vous ?</li> <li>On a utilis\u00e9 max-width et non width.  Pourquoi ?</li> </ul>"},{"location":"07_cssBoite/display/","title":"Display","text":"<p>La propri\u00e9t\u00e9 <code>display</code> d\u00e9finit le type d'affichage utilis\u00e9 pour le rendu d'un \u00e9l\u00e9ment.</p>"},{"location":"07_cssBoite/display/#decouverte","title":"D\u00e9couverte","text":"<p>Observons et testons le code suivant :</p> <p> See the Pen    display inline-block by Flolec (@Flolec)   on CodePen. </p> <ul> <li>D\u00e9commentez la ligne <code>display: inline;</code> Qu'observez-vous concernant la <code>&lt;li&gt;</code> (position et largeur) ?</li> <li>Supprimez la ligne <code>display: inline;</code></li> <li>D\u00e9commentez la ligne <code>display: inline-block;</code> Qu'observez-vous concernant la <code>&lt;li&gt;</code> (position et largeur) ?</li> </ul> <p>Vous pouvez constatez qu'un l\u00e9ger \u00e9cart est pr\u00e9sent entre les deux <code>&lt;li&gt;</code>. Inspectez le code.  Voyez-vous une marge ? D'o\u00f9 vient cet espace ? </p> <ul> <li>Dans le code html, supprimez l'indentation entre les <code>&lt;li&gt;</code>.</li> </ul> <p><pre><code>&lt;li&gt;&lt;em&gt;Auteur : &lt;/em&gt;Pixabay&lt;/li&gt;&lt;li&gt;&lt;em&gt;Commentaires : &lt;/em&gt;15&lt;/li&gt;\n</code></pre> Qu'observez-vous ?</p>"},{"location":"07_cssBoite/display/#en-resume","title":"En r\u00e9sum\u00e9","text":"<p>On peut modifier le display d\u2019un \u00e9l\u00e9ment en CSS pour adapter son comportement de mise en page. Les valeurs inline et inline-block sont particuli\u00e8rement utiles :</p> <p>display: inline transforme un \u00e9l\u00e9ment de type bloc en \u00e9l\u00e9ment de ligne. Ainsi, il s\u2019ins\u00e8re dans le flux du texte et prend uniquement la largeur de son contenu. Toutefois, il ne permet pas de d\u00e9finir une largeur, une hauteur ou des marges et padding verticaux sp\u00e9cifiques.</p> <p>display: inline-block combine les avantages d\u2019un \u00e9l\u00e9ment en ligne (s\u2019ins\u00e9rant dans le flux de texte) et d\u2019un \u00e9l\u00e9ment de bloc. Contrairement \u00e0 inline, il permet de d\u00e9finir explicitement la largeur, la hauteur, les margin et padding.</p> <p>Ces options offrent une flexibilit\u00e9 accrue pour structurer des \u00e9l\u00e9ments de mani\u00e8re harmonieuse dans un flux de texte .</p> <p>Attention, cette technique n'est pas adapt\u00e9e pour r\u00e9aliser compl\u00e8tement une mise en page.  Nous verrons que le <code>display: flex;</code> est plus adapt\u00e9.</p> <p>Quand les \u00e9l\u00e9ments sont en display: inline-block, des espaces ind\u00e9sirables apparaissent souvent entre eux. Ces espaces proviennent des espaces blancs dans le code HTML lui-m\u00eame (comme des sauts de ligne ou des espaces entre les balises). Le navigateur interpr\u00e8te ces espaces comme des espaces entre les \u00e9l\u00e9ments inline, et cela cr\u00e9e des espaces visibles.</p> <p>Solutions pour \u00e9liminer ces espaces :</p> <ul> <li>Supprimer les espaces dans le code HTML </li> </ul> <pre><code>&lt;li&gt;&lt;em&gt;Auteur :&lt;/em&gt; Pixabay&lt;/li&gt;&lt;li&gt;&lt;em&gt;Commentaires :&lt;/em&gt; 15&lt;/li&gt;\n</code></pre> <ul> <li>Utiliser des commentaires HTML  <pre><code>&lt;li&gt;&lt;em&gt;Auteur :&lt;/em&gt; Pixabay&lt;/li&gt;&lt;!--\n--&gt;&lt;li&gt;&lt;em&gt;Commentaires :&lt;/em&gt; 15&lt;/li&gt;\n</code></pre></li> </ul>"},{"location":"07_cssBoite/exercice/","title":"Exercices","text":""},{"location":"07_cssBoite/exercice/#exe1-offre","title":"Exe1 : Offre","text":""},{"location":"07_cssBoite/exercice/#methode","title":"M\u00e9thode","text":"<ul> <li>Cr\u00e9ez un nouveau dossier nomm\u00e9 exeOffre</li> <li> <p>Dans ce dossier, </p> <ul> <li>cr\u00e9ez un nouveau fichier nomm\u00e9 <code>offre.html</code> </li> <li>copiez-collez ce code dans le fichier html</li> </ul> Code \u00e0 copier <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;h1&gt;D\u00e9couvrez nos offres de voyage&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;section&gt;\n            &lt;h2&gt;Voyage \u00e0 Bali&lt;/h2&gt;\n            &lt;p&gt;Profitez de nos offres sp\u00e9ciales pour d\u00e9couvrir les plages magnifiques de Bali.&lt;/p&gt;\n            &lt;ul&gt;\n                &lt;li class=\"stars\"&gt;\n                    &lt;span class=\"material-icons\"&gt;star&lt;/span&gt;\n                    &lt;span class=\"material-icons\"&gt;star&lt;/span&gt;\n                    &lt;span class=\"material-icons\"&gt;star&lt;/span&gt;\n                    &lt;span class=\"material-icons\"&gt;star&lt;/span&gt;\n                    &lt;span class=\"material-icons\"&gt;star_half&lt;/span&gt;\n                &lt;/li&gt;\n                &lt;li&gt;500 commentaires&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;a href=\"#\"&gt;R\u00e9server&lt;/a&gt;\n        &lt;/section&gt;\n    &lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>cr\u00e9ez un nouveau dossier nomm\u00e9 <code>css</code></li> <li>dans ce dossier css, cr\u00e9ez un nouveau fichier nomm\u00e9 <code>offre.css</code></li> <li>copiez-collez ce code dans la feuille css</li> </ul> Code \u00e0 copier <pre><code>/* Ic\u00f4nes \u00e9toile */\n.stars .material-icons {\n    font-size: 1.2rem;\n    color: #FFD700;\n}\n</code></pre> <ul> <li>Reproduisez l'interface en tenant compte des consign\u00e9es donn\u00e9es ci-dessous  &gt;&gt; Voir l'interface </li> </ul> </li> </ul>"},{"location":"07_cssBoite/exercice/#contraintes","title":"Contraintes","text":"<ul> <li>Vous ne pouvez pas utiliser de techniques comme le flexbox, float, position absolue, position relative.</li> <li>Le code Html ne peut \u00eatre modifi\u00e9, seuls des class ou id peuvent \u00eatre ajout\u00e9s</li> <li>Le code Html doit \u00eatre valide W3C</li> <li>Le code Css doit \u00eatre valide W3C</li> </ul>"},{"location":"07_cssBoite/exercice/#par-ou-commencer","title":"Par o\u00f9 commencer ?","text":"<ul> <li>Analysez le code html fourni.</li> <li>La partie <code>head</code> comprend un lien vers la biblioth\u00e8que d'ic\u00f4nes Material Icons de Google</li> </ul> Material Icons <p>Le lien https://fonts.googleapis.com/icon?family=Material+Icons importe la biblioth\u00e8que d'ic\u00f4nes Material Icons de Google, une collection de symboles visuels (\u00e9toiles, fl\u00e8ches, etc.) utilis\u00e9e pour embellir les interfaces web.</p> <p>Ce lien permet de :</p> <ul> <li>Charger les ic\u00f4nes comme une police : Les ic\u00f4nes sont trait\u00e9es comme du texte, ce qui facilite leur redimensionnement et leur stylisation (couleur, taille).</li> <li>Acc\u00e9der \u00e0 un large choix d\u2019ic\u00f4nes (https://fonts.google.com/icons).</li> </ul> <p>&gt;&gt;Info Material Symbols</p> <ul> <li>La feuille de style doit \u00eatre externe et li\u00e9e \u00e0 la page html.  Elle sera situ\u00e9e dans le dossier <code>css</code>. (Liaison)</li> </ul>"},{"location":"07_cssBoite/exercice/#consignes","title":"Consignes","text":"<p>Warning</p> <p>Pour vous aider, vous avez des astuces.  Utilisez l'astuce uniquement si vous \u00eates bloqu\u00e9s ou si vous d\u00e9sirez v\u00e9rifier ce que vous avez r\u00e9alis\u00e9. </p> <ul> <li>Le titre de la page est \"Offres de Voyage\"</li> </ul> Astuce <p>Le titre de la page s'affiche dans l'onglet via la balise <code>&lt;title&gt;</code>.  &gt;&gt; info </p> <ul> <li>La police utilis\u00e9e est l'arial mais attention, pr\u00e9voyez une s\u00e9lection automatique d'une autre police sans empattement (sans-serif) si l'Arial n'est pas disponible.</li> </ul> Astuce <p>Utilisez l'h\u00e9ritage et sp\u00e9cifier la police \u00e0 utiliser dans le body.  &gt;&gt; info </p> <ul> <li>La couleur de fond de la page est <code>#f7f7f7;</code></li> </ul> Astuce <p>Utilisez l'h\u00e9ritage et sp\u00e9cifier la couleur de fond \u00e0 utiliser dans le body.  &gt;&gt; info </p> <ul> <li>Pour une meilleure lisibilit\u00e9, la hauteur de ligne est 1,5 fois la taille de la police de l'\u00e9l\u00e9ment. (&gt;&gt;info  )</li> </ul> Astuce <p>Utilisez l'h\u00e9ritage et sp\u00e9cifier la hauteur de ligne \u00e0 utiliser dans le body.  </p> <ul> <li>Tous les titres de niveau 1 du site seront de couleur <code>#008CBA;</code></li> </ul> Astuce <p>Etant donn\u00e9 que tous les titres du site auront le m\u00eame look, pr\u00e9f\u00e9rez utiliser la redefinition de balise \u00e0 une classe  &gt;&gt; info </p> <ul> <li>Tous les titres de niveau 2 du site seront de couleur <code>#333;</code></li> </ul> Astuce <p>Etant donn\u00e9 que tous les titres du site auront le m\u00eame look, pr\u00e9f\u00e9rez utiliser la redefinition de balise \u00e0 une classe  &gt;&gt; info </p> <ul> <li>Tous les bords arrondis auront une valeur de <code>0.5rem</code></li> </ul> Astuce <p>Pr\u00e9voyez une classe g\u00e9n\u00e9rique qui pourra \u00eatre utilis\u00e9e \u00e0 chaque fois que vous avez besoin de bords arrondis.  N'oubliez pas qu'une balise html peut poss\u00e9der plusieurs valeur pour l'attribut class. &gt;&gt; info </p> <ul> <li>Le titre dans le header est centr\u00e9</li> </ul> Astuce <p>On peut aligner le texte via la propri\u00e9t\u00e9 text-align. &gt;&gt; info </p> <ul> <li>La vignette est centr\u00e9e sur la page du navigateur</li> </ul> Astuce <p>La propri\u00e9t\u00e9 text-align ne permet pas de centrer des \u00e9l\u00e9ments de type bloc.  Pour centrer un \u00e9l\u00e9ment de type bloc, vous devez lui donner une largeur et des marges lat\u00e9rales automatiques.  &gt;&gt; info </p> <ul> <li>La vignette a une couleur de fond <code>#f0f8ff</code></li> <li>La vignette poss\u00e8de une bordure de couleur <code>#008CBA</code></li> <li>La vignette comprend des bords arrondis</li> </ul> Astuce <p>Utilisez le style g\u00e9n\u00e9rique cr\u00e9\u00e9 pr\u00e9c\u00e9demment.</p> <ul> <li>Le contenu n'est pas coll\u00e9 au bord de la vignette</li> </ul> Astuce <p>Pour espacer le contenu par rapport \u00e0 la boite, utilisez des marges int\u00e9rieures appel\u00e9es padding.  &gt;&gt; info </p> <ul> <li>Les \u00e9toiles et le nombre de commentaires sont c\u00f4te \u00e0 c\u00f4te sur la m\u00eame ligne et les puces de la liste sont masqu\u00e9es.</li> </ul> Astuce <p>Positionnement des <code>&lt;li&gt;</code> Les <code>&lt;li&gt;</code> sont par d\u00e9faut des \u00e9l\u00e9ments de type bloc. Cela signifie qu'ils se positionnent les uns au-dessus des autres. Pour les aligner c\u00f4te \u00e0 c\u00f4te, nous pouvons modifier leur propri\u00e9t\u00e9 display.&gt;&gt; info </p> <p>Masquage des Puces de Liste Pour masquer les puces de la liste, la propri\u00e9t\u00e9 <code>list-style-type</code> peut \u00eatre utilis\u00e9e. &gt;&gt; info  </p> <p>Alignement des \u00c9toiles et du Nombre de Votes Les \u00e9toiles sont d\u00e9cal\u00e9es sur la droite. Utilisez l'inspecteur et v\u00e9rifiez s'il n'existe pas une marge ext\u00e9rieure (margin) et/ou une marge int\u00e9rieure (padding) par d\u00e9faut.  Si oui, annulez-les. &gt;&gt; info </p> <p>Le nombre de commentaire doit \u00eatre align\u00e9 sur la droite.  Une id\u00e9e est d'utiliser l'alignement du texte sur la droite <code>text-align:right</code> .  Testez-le.  Autre astuce, vous pouvez utiliser un s\u00e9lecteur avanc\u00e9 pour cibler le dernier <code>&lt;li&gt;</code> de la liste. <pre><code>.vignette ul li:last-child {\n    text-align: right;\n}\n</code></pre></p> <p>Si vous avez appliqu\u00e9 cette d\u00e9claration sur le 2e <code>&lt;li&gt;</code>, vous constaterez que le texte n'est pas align\u00e9 \u00e0 droite.  Utilisez l'inspecteur pour regarder l'espace occup\u00e9 par les <code>&lt;li&gt;</code>. Vous constaterez que la largeur de <code>&lt;li&gt;</code> d\u00e9pend du contenu.  L'alignement sur la droite est bien appliqu\u00e9 mais n'est pas visible pas faute de place.  L'id\u00e9e est de donc d'attribuer une largeur aux 2 <code>&lt;li&gt;</code>.  Mais rappelez-vous, nous avons modifi\u00e9 le display des <code>&lt;li&gt;</code> pour qu'ils puissent se positionner c\u00f4te \u00e0 c\u00f4te.  Ils se comportent d\u00e9sormais comme des \u00e9l\u00e9ment inline et un \u00e9l\u00e9ment inline ne peut avoir de largeur.  Nous allons donc leur demander de se comporter comme un \u00e9lement inline tout en gardant les propri\u00e9t\u00e9s d'un \u00e9l\u00e9ment de type bloc. <pre><code>display: inline-block;\nwidth : 50%;\n</code></pre> Oups, cela ne fonctionne pas... Utilisez l'inspecteur.  Vous consaterez que chaque <code>&lt;li&gt;</code> poss\u00e8de une largeur de 50% et que l'alignement est bien respect\u00e9. </p> <p>Pourquoi les \u00e9l\u00e9ments ne se positionnent-ils pas c\u00f4te \u00e0 c\u00f4te alors ? Toujours \u00e0 l'aide de l'inspecteur, modifiez la largeur(ex : 48%).  Que constatez-vous ? </p> <p>Les \u00e9l\u00e9ments sont donc capables de se positionner c\u00f4te \u00e0 c\u00f4te. Et par cons\u00e9quent, deux \u00e9lements de largeur de 50% doivent pouvoir se positionner c\u00f4te \u00e0 c\u00f4te.</p> <p>Rappelez-vous : Quand les \u00e9l\u00e9ments sont en <code>display: inline-block</code>, des espaces ind\u00e9sirables apparaissent souvent entre eux. Ces espaces proviennent des espaces blancs dans le code HTML lui-m\u00eame (comme des sauts de ligne ou des espaces entre les balises). Le navigateur interpr\u00e8te ces espaces comme des espaces entre les \u00e9l\u00e9ments inline, et cela cr\u00e9e des espaces visibles. &gt;&gt; info  Pour corriger ce probl\u00e8me, vous pouvez supprimer l'indentation dans le code html ou ajouter un commentaire</p> exemple<pre><code>&lt;/li&gt;&lt;!--\n--&gt;&lt;li&gt;500 commentaires&lt;/li&gt;\n</code></pre> <ul> <li>La vignette poss\u00e8de une ombre (&gt;&gt;info  )</li> <li>La vignette poss\u00e8de un bouton de r\u00e9servation qui <ul> <li>est de couleur <code>#008CBA;</code></li> <li>comprend du texte blanc</li> <li>des bords arrondis </li> </ul> Astuce <p>Pensez \u00e0 utiliser votre classe g\u00e9n\u00e9rique</p> <ul> <li>le texte est centr\u00e9 sur le bouton</li> </ul> Astuce <p>Utilisez <code>text-align: center</code></p> <ul> <li>le texte n'est pas coll\u00e9 au bord du bouton </li> </ul> Astuce <p>Utilisez des marges int\u00e9rieures (padding)</p> <ul> <li>le bouton est espac\u00e9 par rapport aux \u00e9l\u00e9ments qui lui sont proches</li> </ul> Astuce <p>Utilisez des marges ext\u00e9rieures (margin). Oups, cela ne donne pas le rendu voulu.  Utilisez l'inspecteur.  Voyez-vous les marges haut et bas ?  Non ? Rappelez-vous, les propri\u00e9t\u00e9s padding vertical, margin vertical, bordures verticales (vus prochainement) seront appliqu\u00e9es mais ne provoqueront pas de d\u00e9placement des \u00e9l\u00e9ments. Pour palier \u00e0 cela, nous allons lui modifier son display par d\u00e9faut <code>display:block</code>.</p> <ul> <li>est centr\u00e9 sur la largeur de la vignette</li> </ul> Astuce <p>Comme nous avons modifi\u00e9 son display, la balise <code>&lt;a&gt;</code> se comporte comme une balise de type block.  Pour le centrer, il suffit de lui appliquer une largeur et des marges lat\u00e9rale auto.</p> <ul> <li>quand la souris passe sur le bouton, celui-ci change de couleur <code>#005f6b;</code></li> </ul> Astuce <p>Utilisez la pseudo class :hover &gt;&gt;info</p> </li> </ul>"},{"location":"07_cssBoite/exercice/#exe2-carte-offre-speciale","title":"Exe2 : Carte Offre Sp\u00e9ciale","text":""},{"location":"07_cssBoite/exercice/#methode_1","title":"M\u00e9thode","text":"<ul> <li>Cr\u00e9ez un nouveau dossier nomm\u00e9 exeOffreSpec</li> <li> <p>Dans ce dossier, </p> <ul> <li>cr\u00e9ez un nouveau fichier nomm\u00e9 <code>carteOffreSpec.html</code> </li> <li>copiez-collez ce code dans le fichier html</li> </ul> Code \u00e0 copier <pre><code>&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Carte Offre sp\u00e9ciale&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;main&gt;\n        &lt;article&gt;\n            &lt;header&gt;\n            &lt;h2&gt;Offre Sp\u00e9ciale&lt;/h2&gt;\n            &lt;p&gt;Profitez de notre tarif r\u00e9duit !&lt;/p&gt;\n            &lt;/header&gt;\n            &lt;ul&gt;\n                &lt;li&gt;\u20ac99&lt;/li&gt;\n                &lt;li&gt;\u20ac49&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;ul class=\"avantage\"&gt;\n                &lt;li&gt;Illimit\u00e9 &lt;/li&gt;\n                &lt;li&gt;Support 24/7&lt;/li&gt;\n                &lt;li&gt;Garantie&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;a href=\"#\"&gt;Acheter Maintenant&lt;/a&gt;\n        &lt;/article&gt;\n    &lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>cr\u00e9ez un nouveau dossier nomm\u00e9 <code>css</code></li> <li>dans ce dossier css, cr\u00e9ez un nouveau fichier nomm\u00e9 <code>exeOffreSpec.css</code></li> <li>copiez-collez ce code dans la feuille css</li> </ul> Code \u00e0 copier <pre><code>.avantage li::before {\n    content: \"\";\n    display: inline-block;\n    background-image: url(\"data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 30 30'&gt;&lt;path fill='%2306be1e' d='M20 12.194v9.806h-20v-20h18.272l-1.951 2h-14.321v16h16v-5.768l2-2.038zm.904-10.027l-9.404 9.639-4.405-4.176-3.095 3.097 7.5 7.273 12.5-12.737-3.096-3.096z'/&gt;&lt;/svg&gt;\");\n\n    /* Taille de l'ic\u00f4ne */\n    background-size: 1.875rem;\n    /* Largeur de l'ic\u00f4ne */\n    width: 1.875rem;\n    /* Hauteur de l'ic\u00f4ne */\n    height: 1.875rem;\n    /* Espace entre l'ic\u00f4ne et le texte */\n    margin-right: 0.625rem;\n    /* Alignement de l'ic\u00f4ne avec le texte */\n    vertical-align: middle;\n}\n</code></pre> Info <p>Le pseudo-\u00e9l\u00e9ment <code>::before</code> est une technique CSS permettant d'ins\u00e9rer du contenu virtuel avant le contenu r\u00e9el d'un \u00e9l\u00e9ment sans avoir \u00e0 ajouter d'\u00e9l\u00e9ments HTML suppl\u00e9mentaires. Il est couramment utilis\u00e9 pour ins\u00e9rer des ic\u00f4nes, des guillemets, des d\u00e9corations, ou toute autre sorte de contenu visuel.</p> <p>Dans l'exemple donn\u00e9 :</p> <p>Pseudo-\u00e9l\u00e9ment ::before  Le ::before cr\u00e9e un pseudo-\u00e9l\u00e9ment avant chaque \u00e9l\u00e9ment de liste (li) de .avantage. Cela permet d'ajouter une ic\u00f4ne avant le contenu du li. content: \"\" Ce pseudo-\u00e9l\u00e9ment n'a pas de texte, car il utilise uniquement une image en arri\u00e8re-plan. Ic\u00f4ne en SVG background-image : Cette propri\u00e9t\u00e9 inclut une ic\u00f4ne SVG en tant qu\u2019image d\u2019arri\u00e8re-plan directement int\u00e9gr\u00e9e dans le CSS via une URL encod\u00e9e en data:image/svg+xml.</p> <p>G\u00e9n\u00e9rateur d'ic\u00f4ne SVG</p> </li> <li> <p>Reproduisez l'interface en tenant compte des consign\u00e9es donn\u00e9es ci-dessous  &gt;&gt; Voir l'interface </p> </li> </ul>"},{"location":"07_cssBoite/exercice/#contraintes_1","title":"Contraintes","text":"<ul> <li>Vous ne pouvez pas utiliser de techniques comme le flexbox, float, position absolue, position relative.</li> <li> <p>Le code html ne peut \u00eatre modifi\u00e9, seuls des class ou id peuvent \u00eatre ajout\u00e9s</p> </li> <li> <p>Aucune information suppl\u00e9mentaire n'est fournie.  Rapprochez-vous le plus du mod\u00e8le.</p> </li> </ul>"},{"location":"07_cssBoite/placeOccupee/","title":"Place occup\u00e9e par un \u00e9l\u00e9ment","text":"<p>Pour comprendre la place occup\u00e9e par un \u00e9l\u00e9ment, testons diff\u00e9rents codes.</p>"},{"location":"07_cssBoite/placeOccupee/#decouverte-1","title":"D\u00e9couverte #1","text":"<p>Exemple th\u00e9orique :</p> <p>Testez le code suivant :</p> <p> See the Pen    Untitled by Flolec (@Flolec)   on CodePen. </p> <ul> <li>D\u00e9commentez la ligne  <code>border:1px solid #000;</code> </li> </ul> <p>Que constatez-vous ?</p> <ul> <li>Adaptez la largeur du parent : <code>width : 404px;</code></li> </ul> <p>Que constatez-vous ?</p> <ul> <li>D\u00e9commentez la ligne  <code>padding:2px;</code> </li> </ul> <p>Que constatez-vous ?</p> <ul> <li>Quelle taille doit avoir le parent pour que ses deux enfants soient positionn\u00e9s c\u00f4te \u00e0 c\u00f4te ? </li> </ul>"},{"location":"07_cssBoite/placeOccupee/#modele-de-boite-standard","title":"Mod\u00e8le de bo\u00eete standard","text":"<p>Dans le flux courant, par d\u00e9faut (mod\u00e8le de bo\u00eete standard), la place occup\u00e9e par un \u00e9l\u00e9ment d\u00e9pend de la somme de plusieurs propri\u00e9t\u00e9s :</p> <ul> <li>le contenu</li> <li>la bordure</li> <li>le padding (marges internes)</li> </ul> <p></p>"},{"location":"07_cssBoite/placeOccupee/#decouverte-2","title":"D\u00e9couverte #2","text":"<p>Exemple th\u00e9orique :</p> <p>Testez le code suivant :</p> <p> See the Pen    place occup\u00e9e : mod\u00e8le de boite standard by Flolec (@Flolec)   on CodePen. </p> <p>Comme nous l'avons vu pr\u00e9c\u00e9demment, le parent n'est pas assez large pour contenir les deux articles c\u00f4te \u00e0 c\u00f4te. Le parent a une largeur de 400px et chaque enfant poss\u00e8de une largeur de 206px (bordure gauche + padding gauche + largeur + padding droit + bordure droite).</p> <p>Nous pourrions adapter la largeur du parent mais cela reste tr\u00e8s fastidieux.</p> <ul> <li> <p>D\u00e9commentez le code  <code>*{   box-sizing: border-box; }</code></p> </li> <li> <p>Qu'observez-vous ?</p> </li> </ul> <p>Note : </p> <p>Le s\u00e9lecteur <code>*</code> en CSS, appel\u00e9 s\u00e9lecteur universel, s\u00e9lectionne tous les \u00e9l\u00e9ments d'une page.</p> <ul> <li> <p>Usage commun : Appliquer des styles de base \u00e0 l'ensemble des \u00e9l\u00e9ments, comme la r\u00e9initialisation des marges ou l'utilisation de box-sizing: border-box.</p> </li> <li> <p>Attention : A utiliser avec parcimonie car il peut impacter la performance sur de tr\u00e8s grandes pages en appliquant des styles globalement.</p> </li> </ul>"},{"location":"07_cssBoite/placeOccupee/#box-sizing","title":"Box-sizing","text":"<p>En d\u00e9finissant la propri\u00e9t\u00e9 et sa valeur \u00e0 <code>box-sizing: border-box;</code>, on change le comportement par d\u00e9faut : la place occup\u00e9e par un \u00e9l\u00e9ment inclut d\u00e9sormais le contenu, les bordures et le padding. </p> <p>Cela signifie que :</p> <ul> <li>La taille totale de l'\u00e9l\u00e9ment reste celle sp\u00e9cifi\u00e9e par la largeur et la hauteur \u00e9ventuelle dans le CSS, sans surprise li\u00e9e aux bordures et au padding.</li> <li>Avantages : cette approche simplifie la mise en page et \u00e9vite les d\u00e9bordements inattendus des \u00e9l\u00e9ments.</li> </ul>"},{"location":"08_cssFlex/","title":"CSS: Module FlexBox","text":""},{"location":"08_cssFlex/#introduction","title":"Introduction","text":""},{"location":"08_cssFlex/#le-module-flexbox","title":"Le module FlexBox","text":"<p>Le positionnement d'\u00e9l\u00e9ments HTML n'est pas toujours \u00e9vident, et ce, d'autant plus lorsque la taille des \u00e9l\u00e9ments ne peut \u00eatre d\u00e9termin\u00e9e et fix\u00e9e \u00e0 l'avance.</p> <p>Le module FlexBox propose une m\u00e9thode efficace pour disposer des \u00e9l\u00e9ments au sein d'un conteneur, m\u00eame si leurs tailles sont inconnues et/ou dynamiques. Le conteneur peut adapter la largeur, la hauteur voire l'ordre des \u00e9l\u00e9ments pour utiliser au mieux l'espace disponible.</p> <p>Ce module d\u00e9finit une dizaine  propri\u00e9t\u00e9s. Une fois celles-ci apprises, vous ne pourrez plus vous en passer pour r\u00e9aliser la mise en page de vos sites web !</p>"},{"location":"08_cssFlex/#differentes-versions-de-flexbox","title":"Diff\u00e9rentes versions de FlexBox","text":"<p>La premi\u00e8re version du module a \u00e9t\u00e9 publi\u00e9e en juillet 2009. La version actuelle date d'octobre 2017 . (W3C : CSS Flexible Box Layout Module Level 1).</p> <p>Si vous recherchez des exemples d'utilisation de FlexBox sur Internet, vous risquez de consulter des extraits de codes exploitant une version obsol\u00e8te du module.</p> <p>La syntaxe <code>display: box;</code> ou une propri\u00e9t\u00e9 <code>box-...</code> datent de la version originelle de 2009.</p> <p>La syntaxe <code>display: flexbox;</code> ou la fonction <code>flex()</code> proviennent d'une version de 2011.</p> <p>Si par contre, les styles contiennent des <code>display: flex</code> ou une propri\u00e9t\u00e9 <code>flex-...</code>, la syntaxe utilis\u00e9e est bien l'actuelle.</p>"},{"location":"08_cssFlex/conteneur/","title":"Conteneur FlexboxDisplay","text":""},{"location":"08_cssFlex/conteneur/#conteneur-flex","title":"Conteneur Flex","text":"<p>Un conteneur Flex est une \"boite\" dont les \u00e9l\u00e9ments peuvent se dilater pour occuper tout l'espace ou au contraire, se contracter pour ne pas d\u00e9border hors du conteneur.</p> <p>Un \u00e9l\u00e9ment devient un conteneur Flex en sp\u00e9cifiant son rendu :</p> <ul> <li><code>display: flex;</code> : le conteneur a, lui-m\u00eame, un rendu \"bloc\"</li> <li><code>display: inline-flex;</code> : le conteneur a, lui-m\u00eame, un rendu \"bloc en ligne\"</li> </ul> <p>Au sein du conteneur Flex, les \u00e9l\u00e9ments peuvent \u00eatre dispos\u00e9s suivant un axe principal orient\u00e9 verticalement (\u00e9l\u00e9ments en colonnes) ou horizontalement (\u00e9l\u00e9ments en lignes).</p> <p>Hormis <code>&lt;fieldset&gt;</code>, <code>&lt;button&gt;</code> et <code>&lt;textarea&gt;</code>, n'importe quel \u00e9l\u00e9ment HTML peut devenir un conteneur Flex.</p> <p>Toutes les propri\u00e9t\u00e9s FlexBox ne sont interpr\u00e9t\u00e9es que sur les \u00e9l\u00e9ments enfants directs d'un conteneur Flex ou sur le conteneur Flex lui-m\u00eame !"},{"location":"08_cssFlex/conteneur/#exemple-menu-de-navigation","title":"Exemple :  menu de navigation","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p> <p> Menu html<pre><code>&lt;nav&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;a href=\"\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"\"&gt;Produits&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"\"&gt;FAQ&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre></p> <p>Les  <code>&lt;li&gt;</code>, \u00e9tant des balises poss\u00e9dant un rendu de type block, sont  positionn\u00e9s naturellement les uns au dessus des autres.</p> <p>On d\u00e9sire que les balises <code>&lt;li&gt;</code> se positionnent c\u00f4te \u00e0 c\u00f4te.  On va donc faire de leur parent direct un container de type flexbox.</p> <p> CSS : containeur flexbox<pre><code>ul {\n    display : flex;\n}\n</code></pre></p> Am\u00e9lioration de la CSS CSS : containeur flexbox<pre><code>li{\n        list-style-type: none;\n        margin : 0.5rem;\n   }\n</code></pre> <p>Magique, non ?  D\u00e9couvrons comment cela fonctionne en explorant les propri\u00e9t\u00e9s du conteneur et des \u00e9l\u00e9ments flex.</p>"},{"location":"08_cssFlex/conteneurAlignContent/","title":"Propri\u00e9t\u00e9s sur conteneur FlexAlign-content","text":""},{"location":"08_cssFlex/conteneurAlignContent/#decouverte-1","title":"D\u00e9couverte #1","text":""},{"location":"08_cssFlex/conteneurAlignContent/#exemple-vignettes","title":"Exemple : Vignettes","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p> <p>Assignons une hauteur minimum au conteneur flex. </p> <p>Par d\u00e9faut, la hauteur de tous les enfants flex s'adapte pour occuper tout l'espace disponible. </p> <p>Nous pouvons modifier ce comportement en utilisant la propri\u00e9t\u00e9 <code>align-content</code>  Testez cette propri\u00e9t\u00e9. <pre><code>align-content: flex-start;\n</code></pre> Testez d'autres valeurs comme <code>center</code>, <code>flex-end</code>, <code>space-around</code>...</p>"},{"location":"08_cssFlex/conteneurAlignContent/#align-content","title":"Align-content","text":"<p>L'ensemble des lignes d'\u00e9l\u00e9ments n'occupent pas toujours l'enti\u00e8ret\u00e9 de la taille du conteneur selon l'axe crois\u00e9. La propri\u00e9t\u00e9 <code>align-content</code> indique comment r\u00e9partir cet espace restant. Bien entendu, il faut pour cela autoriser la disposition des \u00e9l\u00e9ments en plusieurs lignes (flex-wrap) et que le conteneur ait une taille plus grande que l'ensemble des lignes d'\u00e9l\u00e9ments.</p> propri\u00e9t\u00e9 illustration stretch (par d\u00e9faut) : flex-start : flex-end : center  : space-around  : space-between  :"},{"location":"08_cssFlex/conteneurAlignContent/#testez-la-propriete","title":"Testez la propri\u00e9t\u00e9","text":""},{"location":"08_cssFlex/conteneurAlignItems/","title":"Propri\u00e9t\u00e9s sur conteneur FlexAlign-items","text":""},{"location":"08_cssFlex/conteneurAlignItems/#decouverte-1","title":"D\u00e9couverte #1","text":""},{"location":"08_cssFlex/conteneurAlignItems/#exemple-vignettes","title":"Exemple : Vignettes","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p> <p>Augmentons le contenu de l'article 2. La hauteur de cet article n'\u00e9tant pas d\u00e9fini, sa hauteur est donc d\u00e9pendante du contenu.</p> <p>Par d\u00e9faut, la hauteur de tous les enfants flex s'adapte en fonction de la hauteur de l'enfant le plus grand. </p> <p>Nous pouvons modifier ce comportement en utilisant la propri\u00e9t\u00e9 <code>align-items</code>  Testez cette propri\u00e9t\u00e9. <pre><code>align-items: flex-start;\n</code></pre> Testez d'autres valeurs comme <code>center</code>, <code>baseline</code>, <code>center</code>...</p>"},{"location":"08_cssFlex/conteneurAlignItems/#align-items","title":"Align-items","text":"<p>La taille du conteneur selon l'axe crois\u00e9 est soit fix\u00e9e explicitement, soit d\u00e9termin\u00e9e par l'\u00e9l\u00e9ment contenu le plus grand. La propri\u00e9t\u00e9 <code>align-items</code> permet de d\u00e9terminer comment doit \u00eatre r\u00e9parti l'espace restant selon l'axe crois\u00e9 pour les \u00e9l\u00e9ments plus petits que le conteneur.</p> propri\u00e9t\u00e9 illustration stretch (par d\u00e9faut) : flex-start : flex-end : center  : baseline  :"},{"location":"08_cssFlex/conteneurAlignItems/#testez-la-propriete","title":"Testez la propri\u00e9t\u00e9","text":""},{"location":"08_cssFlex/conteneurDirection/","title":"Propri\u00e9t\u00e9s sur conteneur FlexFlex-direction","text":""},{"location":"08_cssFlex/conteneurDirection/#decouverte-1","title":"D\u00e9couverte #1","text":""},{"location":"08_cssFlex/conteneurDirection/#exemple-menu","title":"Exemple : menu","text":"<p>Le fait d'assigner la propri\u00e9t\u00e9 <code>display:flex</code> \u00e0 un \u00e9l\u00e9ment dispose ses enfants directs c\u00f4te \u00e0 c\u00f4te.</p> <p>Comme nous l'avons vu pr\u00e9c\u00e9demment, il n'est pas n\u00e9cessaire de sp\u00e9cifier la direction. Revoir l'exemple &gt;&gt;</p>"},{"location":"08_cssFlex/conteneurDirection/#exemple-formulaire","title":"Exemple : formulaire","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p> <p>Prenons ce code html.</p> Menu html<pre><code>&lt;section class=\"form-container borderElement\"&gt;\n   &lt;h1&gt;Inscription&lt;/h1&gt;\n   &lt;form class=\"registration-form cornerElement\"&gt;\n      &lt;label for=\"nom\"&gt;Votre nom (*) : &lt;/label&gt;  \n      &lt;input type=\"text\" id=\"nom\" name=\"nom\" placeholder=\"Nom d'utilisateur\" required  &gt;\n      &lt;label for=\"mail\"&gt;Votre nom (*) : &lt;/label&gt; \n      &lt;input type=\"email\"  id=\"mail\" name=\"mail\" placeholder=\"Email\" required class=\"borderElement\" &gt;\n      &lt;label for=\"mdp\"&gt;Votre mot de passe (*) : &lt;/label&gt; \n      &lt;input type=\"password\" id=\"mdp\" name=\"mdp\" placeholder=\"Mot de passe\" required  &gt;\n      &lt;button type=\"submit\"  &gt;S'inscrire&lt;/button&gt;\n   &lt;/form&gt;\n&lt;/section&gt;\n</code></pre> <p></p> <p>Nous observons que les \u00e9lements du formulaire se positionnent les uns \u00e0 c\u00f4t\u00e9 des autres.</p> <p>Si nous d\u00e9sirons que les \u00e9l\u00e9ments se positionnent les uns-au-dessus des autres, nous allons </p> <ul> <li>modifier le display de leur containeur</li> <li>modifier leur direction</li> </ul> <p>CSS : containeur flexbox<pre><code>.registration-form {\n    display: flex;\n    flex-direction: column; /* Aligne les enfants directs les uns au dessus des autres */  \n}\n</code></pre> </p> <p>Magique, non ?</p> CSS compl\u00e8te CSS : containeur flexbox<pre><code>.registration-form {\n    display: flex;\n    /* Aligne les enfants directs les uns au dessus des autres */\n    flex-direction: column;\n}\n\n/*************CSS d\u00e9coration*****************/\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f8f9fa;\n    font: size;\n    : 0.75rem;\n}\n\n.borderElement,\nregistration-form&gt;input {\n    border: 0.06rem solid #ddd;\n}\n\n.form-container {\n    background-color: #fff;\n    border-radius: 0.63rem;\n    box-shadow: 0 0.06rem 0.31rem rgba(0, 0, 0, 0.1);\n    padding: 1rem 3rem;\n    max-width: 30rem;\n    margin: 5rem auto;\n\n}\n\n.registration-form input {\n    margin-bottom: 0.94rem;\n    padding: 0.63rem;\n    border: 0.06rem solid #ddd;\n}\n\n.registration-form button {\n    padding: 0.63rem;\n    border: none;\n\n    background-color: #007bff;\n    color: white;\n\n    transition: background-color 0.3s;\n}\n\n.registration-form&gt;*,\n.cornerElement {\n    border-radius: 0.31rem;\n}\n\n.registration-form button:hover {\n    background-color: #0056b3;\n}\n\n.registration-form label {\n    font-size: small;\n    margin-bottom: 0.5rem;\n}\n</code></pre>"},{"location":"08_cssFlex/conteneurDirection/#flex-direction","title":"Flex-direction","text":"<p>La propri\u00e9t\u00e9 <code>flex-direction</code> d\u00e9termine la disposition des \u00e9l\u00e9ments dans leur conteneur, sp\u00e9cifiant l'axe principal et la direction (normale ou invers\u00e9e) de ces \u00e9l\u00e9ments.</p> <ul> <li>row (par d\u00e9faut): axe principal horizontal, direction de gauche \u00e0 droite,</li> <li>row-reverse: axe principal horizontal, direction de droite \u00e0 gauche,</li> </ul> <p></p> <ul> <li>column: axe principal vertical, direction de haut en bas,</li> <li>column-reverse: axe principal vertical, direction de bas en haut.</li> </ul> <p></p>"},{"location":"08_cssFlex/conteneurDirection/#testez-la-propriete","title":"Testez la propri\u00e9t\u00e9","text":""},{"location":"08_cssFlex/conteneurJustifyContent/","title":"Propri\u00e9t\u00e9s sur conteneur FlexJustify-content","text":""},{"location":"08_cssFlex/conteneurJustifyContent/#decouverte-1","title":"D\u00e9couverte #1","text":""},{"location":"08_cssFlex/conteneurJustifyContent/#exemple-vignettes","title":"Exemple : Vignettes","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p> <p>Partons de l'exemple pr\u00e9c\u00e9dent. Nous remarquons que l'espace entre les vignettes n'est pas r\u00e9parti \u00e9quitablement entre les \u00e9l\u00e9ments. A votre avis que vaut la valeur des espaces? </p> R\u00e9ponse &gt;&gt; <p></p> <ol> <li><code>/!\\</code> nous sommes en <code>border-box</code></li> <li>La valeur de la marge de gauche de la vignette : 1.25rem (20px)</li> <li>La valeur de la marge de gauche + la valeur de la marge de droite de la vignette : 2.50rem (40px)</li> <li>La largeur du blog-container - nbre de vignettes * (la largeur de la vignette + la valeur de la marge de gauche + la valeur de la marge de droite de la vignette ): 45rem - (3 * (10rem + 1.25rem + 1. 25rem )) = 7.50 rem</li> </ol> <p>La propri\u00e9t\u00e9 <code>justify-content</code> permet de g\u00e9rer la r\u00e9partition de l'espace restant. Testez la propri\u00e9t\u00e9 </p> <pre><code>justify-content: space-evenly;\n</code></pre>"},{"location":"08_cssFlex/conteneurJustifyContent/#justify-content","title":"Justify-content","text":"<p>Les \u00e9l\u00e9ments plac\u00e9s au sein du conteneur ne remplissent pas forc\u00e9ment tout l'espace. La propri\u00e9t\u00e9 <code>justify-content</code> permet d'indiquer comment l'espace restant doit \u00eatre r\u00e9parti. Dans les images ci-dessous illustrant les diff\u00e9rentes valeurs de cette propri\u00e9t\u00e9, chaque carr\u00e9 de couleur poss\u00e8de des marges.</p> propri\u00e9t\u00e9 illustration flex-start (par d\u00e9faut) : flex-end : center : space-between  : space-around  : space-evenly  :"},{"location":"08_cssFlex/conteneurJustifyContent/#testez-la-propriete","title":"Testez la propri\u00e9t\u00e9","text":""},{"location":"08_cssFlex/conteneurWrap/","title":"Propri\u00e9t\u00e9s sur conteneur Flexflex-wrap :","text":""},{"location":"08_cssFlex/conteneurWrap/#decouverte-1","title":"D\u00e9couverte #1","text":""},{"location":"08_cssFlex/conteneurWrap/#exemple-vignettes","title":"Exemple : Vignettes","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p> <p>Nous d\u00e9sirons afficher des vignettes c\u00f4te \u00e0 c\u00f4te. </p> <p>Partons du code suivant : une section comprenant plusieurs articles</p> <p>Extrait HTML Vignette - Le code complet est dispo sur CodePen<pre><code>&lt;section class=\"blog-container\"&gt;\n    &lt;article class=\"blog-card\"&gt;\n        &lt;h2&gt;Article 1&lt;/h2&gt;\n        &lt;p&gt;Ceci est une br\u00e8ve description de l'article 1. Il donne un aper\u00e7u du contenu de l'article.&lt;/p&gt;\n    &lt;/article&gt;\n    &lt;article class=\"blog-card\"&gt;\n        &lt;h2&gt;Article 2&lt;/h2&gt;\n        &lt;p&gt;Ceci est une br\u00e8ve description de l'article 2. Il donne un aper\u00e7u du contenu de l'article.&lt;/p&gt;\n    &lt;/article&gt;\n    [...]\n&lt;/section&gt;  \n</code></pre> La section qui comprend les articles poss\u00e8de une largeur impos\u00e9e.  Par d\u00e9faut, la largeur des articles d\u00e9pend de leur contenu. Nous allons imposer une largeur aux articles.  \u00c9tant donn\u00e9 que nous allons utiliser la propri\u00e9t\u00e9 flex, nous allons utiliser la propri\u00e9t\u00e9 sp\u00e9cifique <code>flex-basis</code>. Cette propri\u00e9t\u00e9 sp\u00e9cifie la largeur initiale de l'\u00e9l\u00e9ment flexible. Cette propri\u00e9t\u00e9 sera vue en d\u00e9tail ult\u00e9rieurement.</p> Extrait CSS Vignette - Le code complet est dispo sur CodePen<pre><code>/*************start css position flex **********************/\n.blog-container{\n    width: 45rem;       \n}\n\n.blog-card {\n  /*The flex-basis property specifies the initial length of a flexible item.*/\n   flex-basis: 10rem;\n}\n</code></pre> <p>Par d\u00e9faut, les articles se positionnent les uns au dessus des autres. Nous d\u00e9sirons les placer c\u00f4te \u00e0 c\u00f4te.</p> <p> La premi\u00e8re question \u00e0 se poser est : Qui est le parent direct des \u00e9l\u00e9ments que nous d\u00e9sirons positionner c\u00f4te \u00e0 c\u00f4te ?</p> <p> La section dont la class est <code>blog-container</code>. Cet \u00e9l\u00e9ment sera donc notre conteneur <code>flex</code>.</p> <p>CSS<pre><code>    .blog-container{\n        display: flex;  \n    }\n</code></pre> Malheureusement, le rendu n'est pas au rendez-vous...</p> <p>On observe que les vignettes d\u00e9borde du conteneur. </p> <p>Pourquoi ?</p> <ul> <li>Le conteneur <code>blog-container</code> a une largeur fixe</li> <li>Par d\u00e9faut, les enfants flex se positionnent c\u00f4te \u00e0 c\u00f4te sur une seule ligne.</li> </ul> <p>On doit donc les autoriser \u00e0 se placer c\u00f4te \u00e0  c\u00f4te sur plusieurs lignes avec la propri\u00e9t\u00e9 <code>flex-wrap : wrap;</code> CSS<pre><code>    .blog-container{\n        display: flex;  \n        flex-wrap : wrap; \n    }\n</code></pre></p>"},{"location":"08_cssFlex/conteneurWrap/#exemple-vignettes-inversees","title":"Exemple : Vignettes invers\u00e9es","text":"<p>Dans le code pen  modifiez   <code>flex-wrap : wrap;</code> en <code>flex-wrap : wrap-reverse;</code></p> <p>Que constatez-vous ?</p> CSS<pre><code>.blog-container{\n    display: flex;\n    flex-wrap : wrap-reverse;    \n}\n</code></pre>"},{"location":"08_cssFlex/conteneurWrap/#flex-wrap","title":"Flex-wrap","text":"<p>\u00c9tant donn\u00e9 que les \u00e9l\u00e9ments peuvent s'adapter \u00e0 la taille du conteneur, la propri\u00e9t\u00e9 <code>flex-wrap</code> va indiquer si la taille de ceux-ci doit \u00eatre adapt\u00e9e pour tenir sur une seule ou plusieurs lignes verticales ou horizontales en fonction de la direction de l'axe principal.</p> <ul> <li>nowrap (par d\u00e9faut): les items sont plac\u00e9s sur une seule ligne dans le sens de l'axe principal </li> <li>wrap: les items sont plac\u00e9s en plusieurs lignes si n\u00e9cessaire, celles-ci plac\u00e9es dans le sens de l'axe crois\u00e9, </li> <li>wrap-reverse: les items sont plac\u00e9s en plusieurs lignes si n\u00e9cessaire, celles-ci plac\u00e9es dans le sens oppos\u00e9 de l'axe crois\u00e9. </li> </ul>"},{"location":"08_cssFlex/conteneurWrap/#testez-la-propriete","title":"Testez la propri\u00e9t\u00e9","text":""},{"location":"08_cssFlex/enfantFlexAlignSelf/","title":"Propri\u00e9t\u00e9s sur enfant Flexalign-self :","text":"<p>Si la propri\u00e9t\u00e9 align-items d\u00e9finit comment l'espace restant est r\u00e9parti selon l'axe crois\u00e9 pour tous les \u00e9l\u00e9ments, la propri\u00e9t\u00e9 align-self fait de m\u00eame pour un \u00e9l\u00e9ment particulier. </p> <p><pre><code>.conteneur { align-items: flex-start; }\n</code></pre> </p> <p><pre><code>.conteneur { align-items: flex-start; }\n.item:nth-child(3){ align-self: flex-end; }\n</code></pre> </p>"},{"location":"08_cssFlex/enfantFlexBasis/","title":"Propri\u00e9t\u00e9s sur enfant Flexflex-basis :","text":""},{"location":"08_cssFlex/enfantFlexBasis/#decouverte-1","title":"D\u00e9couverte #1","text":""},{"location":"08_cssFlex/enfantFlexBasis/#exemple-vignettes","title":"Exemple : Vignettes","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p> <p>Observez le rendu et le code. Comment les enfants flex se positionnent-ils par d\u00e9faut ?</p> <p> </p> <p>Ajoutez cette propri\u00e9t\u00e9 aux enfants flex:</p> <pre><code>.blog-card {\n  flex-basis: 10rem;\n}\n</code></pre> <p>Qu'observez-vous ?  Vous pouvez bien \u00e9videmment g\u00e9rer l'espace inoccup\u00e9 via la propri\u00e9t\u00e9 justify-content appliqu\u00e9e au conteneur flex.</p>"},{"location":"08_cssFlex/enfantFlexBasis/#decouverte-2","title":"D\u00e9couverte #2","text":""},{"location":"08_cssFlex/enfantFlexBasis/#exemple-largeur-calculee","title":"Exemple : Largeur calcul\u00e9e","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p> <p>Observez le rendu et le code. Les marges des vignettes ont \u00e9t\u00e9 supprim\u00e9es. Nous d\u00e9sirons que les \u00e9l\u00e9ments se positionnent c\u00f4te \u00e0 c\u00f4te deux par deux.  L'utilisation de la fonction calc() permet au navigateur de calculer la taille des enfants flex automatiquement.</p> <p>Ajoutez cette propri\u00e9t\u00e9 au enfant flex:</p> <p><pre><code>.blog-card {\n  flex-basis : calc(100% / 2); \n}\n</code></pre> Vous pouvez tester avec 3,4...</p> <p>Ajoutons maintenant des marges aux enfants flex. D\u00e9commentez la ligne   <code>/* margin:   1.25rem ;*/</code></p> <p>Que se passe-t-il ? Pourquoi ? A votre avis, comment pouvons-nous r\u00e9soudre ce d\u00e9bordement ?</p>"},{"location":"08_cssFlex/enfantFlexBasis/#flex-basis","title":"Flex-basis","text":"<p>La propri\u00e9t\u00e9 <code>flex-basis</code> permet de sp\u00e9cifier la taille par d\u00e9faut de l'item avant que l'espace restant du conteneur ne soit r\u00e9parti ou que les items ne soient r\u00e9duits pour ne pas d\u00e9border du conteneur (si autoris\u00e9). La taille est exprim\u00e9e selon les unit\u00e9s de tailles habituelles (auto, %, px, rem, ...).</p> <p>Vous pouvez utiliser <code>calc()</code> avec flex-basis pour d\u00e9finir une taille initiale flexible en combinant des valeurs fixes et relatives.</p> <p>calc<pre><code>.item{\n    flex-basis: calc(100% / 3 );\n}\n</code></pre> La taille de l'enfant flex sera la largeur totale de son parent / 3.</p> <p>Si l'enfant flex poss\u00e8de des marges, il faut les supprimer.</p> calc<pre><code>.item{\n    margin : 1rem;\n    flex-basis: calc((100% / 3) - 2rem)\n}\n</code></pre> <ul> <li> <p>D\u00e9finit la largeur initiale de chaque \u00e9l\u00e9ment \u00e0 un tiers de l\u2019espace disponible (100% / 3), ce qui permet de placer trois \u00e9l\u00e9ments c\u00f4te \u00e0 c\u00f4te dans le conteneur.</p> </li> <li> <p>Attention, on enl\u00e8ve l'espace occup\u00e9 par les marges.  Pourquoi 2rem, alors qu'on a sp\u00e9cif\u00e9 1rem ? n'oubliez pas que margin: 1rem \u00e9quivaut margin-top: 1rem + margin-right: 1rem + margin-bottom: 1rem + margin-left: 1rem.</p> </li> </ul> <p> Attention, il faut laisser un espace entre l'op\u00e9rateur et le nombre qui suit ! (calc(100%/30px) est incorrect !!)</p>"},{"location":"08_cssFlex/enfantFlexGrow/","title":"Propri\u00e9t\u00e9s sur enfant Flexgrow :","text":"<p>D\u00e9finition : flex-grow contr\u00f4le la capacit\u00e9 d\u2019un \u00e9l\u00e9ment flex \u00e0 grandir pour occuper l'espace suppl\u00e9mentaire dans un conteneur flex.</p> <p>Fonctionnement : Plus la valeur de flex-grow est \u00e9lev\u00e9e, plus l'\u00e9l\u00e9ment occupe proportionnellement l'espace disponible par rapport aux autres \u00e9l\u00e9ments du m\u00eame conteneur.</p> <p>Valeur par d\u00e9faut : flex-grow: 0, ce qui signifie qu'un \u00e9l\u00e9ment ne s'agrandit pas automatiquement.</p> <p>REM : Tester des valeurs de flex-grow dans une fen\u00eatre redimensionnable aide \u00e0 s'assurer que le comportement est bien celui attendu en responsive design.</p>"},{"location":"08_cssFlex/enfantFlexGrow/#exemple-1-flex-grow-avec-des-valeurs-differentes","title":"Exemple 1 : flex-grow avec des valeurs diff\u00e9rentes","text":"<p>Sc\u00e9nario :</p> <ul> <li>Imaginons un conteneur flex avec trois \u00e9l\u00e9ments de largeur initiale de 100px chacun.</li> <li>Le conteneur a une largeur plus grande que la somme des \u00e9l\u00e9ments, donc de l\u2019espace est disponible.</li> </ul> <pre><code> .container {\n    display: flex;\n    width: 500px; /* Plus grand que 3 x 100px */\n}\n\n.item1 {\n    flex-grow: 1; /* Grandit normalement */\n}\n\n.item2 {\n    flex-grow: 2; /* Grandit deux fois plus que item1 */\n}\n\n.item3 {\n    flex-grow: 0; /* Ne grandit pas */\n}\n</code></pre> <p>Explication :</p> <ul> <li> <p>item1 et item2 vont s'agrandir pour occuper l\u2019espace disponible, mais item2 grandit deux fois plus que item1.</p> </li> <li> <p>item3 garde sa taille initiale de 100px et n\u2019occupe pas l\u2019espace suppl\u00e9mentaire.</p> </li> <li>R\u00e9sultat visuel : item1 s'agrandit un peu, item2 prend une part importante de l'espace, et item3 garde sa taille fixe.</li> </ul>"},{"location":"08_cssFlex/enfantFlexGrow/#exemple-2-utilisation-en-pratique-interface-dune-page-web","title":"Exemple 2 : Utilisation en pratique - Interface d'une page web","text":"<p>Sc\u00e9nario :</p> <ul> <li>On veut une barre de navigation (navbar), une section de contenu (content), et une barre de widgets (widgets).</li> <li>La content doit prendre le plus de place possible, tandis que navbar et widgets ont une taille fixe.</li> </ul> <pre><code>.container {\n    display: flex;\n    width: 100%;\n}\n\n.navbar {\n    width: 150px;\n    flex-grow: 0; /* Ne grandit pas */\n}\n\n.content {\n    flex-grow: 1; /* Prend tout l\u2019espace restant */\n}\n\n.widgets {\n    width: 100px;\n    flex-grow: 0; /* Ne grandit pas */\n}\n</code></pre> <p>Explication :</p> <ul> <li>La navbar et la widgets conservent une taille fixe.</li> <li>La section content occupe tout l\u2019espace restant, s\u2019adaptant dynamiquement en fonction de la largeur de l\u2019\u00e9cran.</li> <li>R\u00e9sultat visuel : Un layout fluide o\u00f9 le contenu principal s\u2019ajuste \u00e0 l\u2019espace, tandis que la navigation et les widgets restent constants.</li> </ul>"},{"location":"08_cssFlex/enfantFlexOrder/","title":"Propri\u00e9t\u00e9s sur enfant Flexorder :","text":""},{"location":"08_cssFlex/enfantFlexOrder/#decouverte-1","title":"D\u00e9couverte #1","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p> <p>Observez le rendu et le code. Testez diff\u00e9rentes valeurs pour le order.</p>"},{"location":"08_cssFlex/enfantFlexOrder/#order","title":"order","text":"<p>Les items sont plac\u00e9s par ordre croissant de la valeur \"order\" et, pour des valeurs \u00e9gales, par ordre d'apparition dans le code HTML.</p> <p>Par d\u00e9faut, la valeur de la propri\u00e9t\u00e9 order est 0 pour les \u00e9l\u00e9ments flexibles. Aussi, si on utilise un coefficient sup\u00e9rieur \u00e0 0, les \u00e9l\u00e9ments concern\u00e9s seront affich\u00e9s apr\u00e8s les \u00e9l\u00e9ments pour lesquels aucune valeur explicite n'a \u00e9t\u00e9 fournie pour order.</p> <p>On peut \u00e9galement utiliser des valeurs n\u00e9gatives. Cela est plut\u00f4t pratique si on souhaite afficher un \u00e9l\u00e9ment en premier sans avoir \u00e0 indiquer de valeurs pour les autres \u00e9l\u00e9ments : il suffira d'affecter l'ordre -1 au premier \u00e9l\u00e9ment. Cette valeur \u00e9tant inf\u00e9rieure \u00e0 0, l'\u00e9l\u00e9ment sera toujours affich\u00e9 en premier.</p>"},{"location":"08_cssFlex/enfantFlexShrink/","title":"Propri\u00e9t\u00e9s sur enfant Flexshrink :","text":"<ul> <li> <p>D\u00e9finition : flex-shrink contr\u00f4le la capacit\u00e9 d'un \u00e9l\u00e9ment flex (\u00e9l\u00e9ment dans un conteneur flex) \u00e0 r\u00e9tr\u00e9cir si l'espace disponible devient trop petit.</p> </li> <li> <p>Fonctionnement : Plus la valeur de flex-shrink est \u00e9lev\u00e9e, plus l'\u00e9l\u00e9ment est susceptible de se r\u00e9duire pour s'adapter \u00e0 l\u2019espace disponible. Si flex-shrink vaut 0, l'\u00e9l\u00e9ment ne r\u00e9tr\u00e9cit pas.</p> </li> <li> <p>Valeur par d\u00e9faut : flex-shrink: 1 (l\u2019\u00e9l\u00e9ment peut r\u00e9tr\u00e9cir proportionnellement si n\u00e9cessaire).</p> </li> </ul>"},{"location":"08_cssFlex/enfantFlexShrink/#exemple-1-flex-shrink-avec-des-valeurs-differentes","title":"Exemple 1 : flex-shrink avec des valeurs diff\u00e9rentes","text":"<p>Sc\u00e9nario :</p> <ul> <li> <p>On a un conteneur flex avec trois \u00e9l\u00e9ments.</p> </li> <li> <p>Tous les \u00e9l\u00e9ments ont la m\u00eame largeur initiale de 200px.</p> </li> <li> <p>La largeur du conteneur est inf\u00e9rieure \u00e0 600px, donc les \u00e9l\u00e9ments doivent r\u00e9tr\u00e9cir pour s\u2019adapter.</p> </li> </ul> <p>Rem : Testez en r\u00e9duisant la fen\u00eatre pour v\u00e9rifier les comportements des \u00e9l\u00e9ments en fonction des valeurs flex-shrink.</p> <pre><code>.container {\n    display: flex;\n    width: 500px; /* Plus petit que 3 x 200px */\n}\n\n.item1 {\n    flex-shrink: 1; /* Peut r\u00e9tr\u00e9cir normalement */\n}\n\n.item2 {\n    flex-shrink: 2; /* R\u00e9tr\u00e9cit deux fois plus que item1 */\n}\n\n.item3 {\n    flex-shrink: 0; /* Ne r\u00e9tr\u00e9cit pas */\n}\n</code></pre> <p>Explication :</p> <ul> <li> <p>item1 et item2 vont se r\u00e9duire, mais item2 r\u00e9tr\u00e9cira deux fois plus vite que item1.</p> </li> <li> <p>item3 ne r\u00e9tr\u00e9cira pas du tout.</p> </li> <li> <p>R\u00e9sultat visuel : L'\u00e9l\u00e9ment 3 conserve sa taille initiale, tandis que les deux autres r\u00e9tr\u00e9cissent de mani\u00e8re in\u00e9gale.</p> </li> </ul>"},{"location":"08_cssFlex/enfantFlexShrink/#exemple-2-utilisation-en-pratique-interface-de-tableau-de-bord","title":"Exemple 2 : Utilisation en pratique - Interface de tableau de bord","text":"<p>Sc\u00e9nario :</p> <ul> <li> <p>On veut afficher une barre lat\u00e9rale (sidebar), une section principale (main) et une section de notifications (notifications).</p> </li> <li> <p>La sidebar et la section de notifications doivent rester lisibles, mais la main peut se r\u00e9duire un peu si l\u2019espace devient restreint.</p> </li> </ul> <pre><code>.container {\n    display: flex;\n    width: 100%;\n}\n\n.sidebar {\n    width: 150px;\n    flex-shrink: 0; /* Ne r\u00e9tr\u00e9cit pas */\n}\n\n.main {\n    flex-shrink: 1; /* Peut r\u00e9tr\u00e9cir pour donner de l\u2019espace */\n}\n\n.notifications {\n    width: 100px;\n    flex-shrink: 0; /* Ne r\u00e9tr\u00e9cit pas */\n}\n</code></pre> <p>Explication :</p> <ul> <li>La sidebar et la section notifications ne r\u00e9tr\u00e9ciront pas (toujours lisibles).</li> <li>La section main se r\u00e9duit si la largeur de l\u2019\u00e9cran devient insuffisante, ce qui permet de garder le contenu visible sans d\u00e9former la structure.</li> </ul>"},{"location":"08_cssFlex/entrainement/","title":"S'entrainer","text":"<p>\"Le codage, c'est comme un entra\u00eenement : il faut pers\u00e9v\u00e9rer, m\u00eame quand les bugs te donnent envie de tout balancer !\"</p> <p>Flexbox Froggy</p> <p></p>"},{"location":"08_cssFlex/exercice/","title":"Exercices","text":""},{"location":"08_cssFlex/exercice/#exe1-offre-de-prix","title":"Exe1 : Offre de prix","text":""},{"location":"08_cssFlex/exercice/#methode","title":"M\u00e9thode","text":"<ul> <li>Cr\u00e9ez un nouveau dossier nomm\u00e9 <code>flexOffrePrix</code> </li> <li> <p>Dans ce dossier,</p> </li> <li> <p>cr\u00e9ez un nouveau fichier nomm\u00e9 <code>flexOffrePrix.html</code></p> </li> <li>copiez-collez ce code dans le fichier html</li> </ul> Code \u00e0 copier <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;nav&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"#home\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"#projects\"&gt;Projects&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"#about\"&gt;About&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;section&gt;\n            &lt;h1&gt;Nos offres&lt;/h1&gt;\n            &lt;article&gt;\n                &lt;h2&gt;Beginner&lt;/h2&gt;\n                &lt;h3&gt;$10 &lt;span&gt;/ month&lt;/span&gt;&lt;/h3&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;Feature 1&lt;/li&gt;\n                    &lt;li&gt;Feature 2&lt;/li&gt;\n                    &lt;li&gt;Feature 3&lt;/li&gt;\n                &lt;/ul&gt;\n                &lt;a href=\"#\"&gt;Get Started&lt;/a&gt;\n            &lt;/article&gt;\n            &lt;article&gt;\n                &lt;h2&gt;Standard&lt;/h2&gt;\n                &lt;h3&gt;$20 &lt;span&gt;/ month&lt;/span&gt;&lt;/h3&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;Feature 1&lt;/li&gt;\n                    &lt;li&gt;Feature 2&lt;/li&gt;\n                    &lt;li&gt;Feature 3&lt;/li&gt;\n                &lt;/ul&gt;\n                &lt;a href=\"#\"&gt;Get Started&lt;/a&gt;\n            &lt;/article&gt;\n            &lt;article&gt;\n                &lt;h2&gt;Premium&lt;/h2&gt;\n                &lt;h3&gt;$30 &lt;span&gt;/ month&lt;/span&gt;&lt;/h3&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;Feature 1&lt;/li&gt;\n                    &lt;li&gt;Feature 2&lt;/li&gt;\n                    &lt;li&gt;Feature 3&lt;/li&gt;\n                &lt;/ul&gt;\n                &lt;a href=\"#\"&gt;Get Started&lt;/a&gt;\n            &lt;/article&gt;\n        &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\n    &lt;div&gt;@Flexbox&lt;/div&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>cr\u00e9ez un nouveau dossier nomm\u00e9 <code>css</code></li> <li> <p>dans ce dossier css, cr\u00e9ez un nouveau fichier nomm\u00e9 <code>flexOffrePrix.css</code></p> </li> <li> <p>Reproduisez l'interface en tenant compte des consign\u00e9es donn\u00e9es ci-dessous &gt;&gt; Voir l'interface</p> </li> </ul>"},{"location":"08_cssFlex/exercice/#contraintes","title":"Contraintes","text":"<ul> <li>Vous ne pouvez pas utiliser de techniques comme le float, position absolue, position relative.</li> <li>Le code html ne peut \u00eatre modifi\u00e9, seuls des class ou id peuvent \u00eatre ajout\u00e9s</li> <li>Le code Html doit \u00eatre valide W3C</li> <li>Le code Css doit \u00eatre valide W3C</li> </ul>"},{"location":"08_cssFlex/exercice/#par-ou-commencer","title":"Par o\u00f9 commencer ?","text":"<ul> <li>Analysez le code html fourni.</li> <li>La feuille de style doit \u00eatre externe et li\u00e9e \u00e0 la page html. Elle sera situ\u00e9e dans le dossier <code>css</code>. (Liaison)</li> </ul>"},{"location":"08_cssFlex/exercice/#consignes","title":"Consignes","text":"<p>Warning</p> <p>Pour vous aider, vous avez des astuces. Utilisez l'astuce uniquement si vous \u00eates bloqu\u00e9s ou si vous d\u00e9sirez v\u00e9rifier ce que vous avez r\u00e9alis\u00e9.</p>"},{"location":"08_cssFlex/exercice/#styles-generaux","title":"Styles g\u00e9n\u00e9raux","text":"<ul> <li>Le titre de la page est \"Offres de prix\"</li> </ul> Astuce <p>Le titre de la page s'affiche dans l'onglet via la balise <code>&lt;title&gt;</code>. &gt;&gt; info </p> <ul> <li>La police utilis\u00e9e est <code>Tahoma</code> mais attention, pr\u00e9voyez une s\u00e9lection automatique d'une autre police sans empattement (sans-serif) si <code>Tahoma</code> n'est pas disponible.</li> </ul> Astuce <p>Utilisez l'h\u00e9ritage et sp\u00e9cifiez la police \u00e0 utiliser dans le body. &gt;&gt; info </p> <ul> <li>La couleur de fond de la page est <code>#eee;</code></li> </ul> Astuce <p>Utilisez l'h\u00e9ritage et sp\u00e9cifiez la couleur de fond \u00e0 utiliser dans le body. &gt;&gt; info </p> <ul> <li>La taille de la police doit \u00eatre une fois celle sp\u00e9cifi\u00e9e par le navigateur</li> </ul> Astuce <p>Utilisez l'h\u00e9ritage et sp\u00e9cifiez la taille de la police \u00e0 utiliser dans le body. Utilisez l'unit\u00e9 rem.</p> <ul> <li>Quand on regarde le mod\u00e8le, on s'aper\u00e7oit que le contenu ne prend pas toute la largeur du navigateur. Utilisons une classe g\u00e9n\u00e9rique qui sera appliqu\u00e9e aux diff\u00e9rents \u00e9l\u00e9ments html.</li> </ul> Astuce <p><pre><code>.centrage{\n    /* ici les d\u00e9clarations des styles*/\n}\n</code></pre> Pour centrer un \u00e9l\u00e9ment de type bloc, vous devez lui donner une largeur et des marges lat\u00e9rales automatiques. &gt;&gt; info </p> <p>La class doit \u00eatre appliqu\u00e9e aux conteneurs qui seront centr\u00e9s. <code>&lt;nav class=\"centrage\"&gt;</code> <code>&lt;section class=\"centrage&gt;</code> <code>&lt;div class=\"centrage&gt;</code> A votre avis, pourquoi appliquer la class centrage au div et non au footer ?</p> <ul> <li>Quand on regarde le mod\u00e8le, on s'aper\u00e7oit que le header et le footer ont les m\u00eames styles.</li> </ul> Astuce <p>Regroupez les s\u00e9lecteurs. &gt;&gt; info </p> <p>Appliquez les styles communs (color et background)</p> <ul> <li>Le contenu du header et du footer ne sont pas coll\u00e9s au bord. Espacez le contenu des bords du header et du footer</li> </ul> Astuce <p>Utiliser un padding sur le header et le footer</p> <ul> <li>Les bords des header et footer doivent \u00eatre coll\u00e9s au bord du navigateur. A votre avis, d'o\u00f9 vient l'espace ?</li> </ul> Astuce <p>Annuler les marges externes (margin) du body</p>"},{"location":"08_cssFlex/exercice/#concentrons-nous-sur-le-menu","title":"Concentrons-nous sur le menu.","text":"<p>Quand on regarde le mod\u00e8le, on s'aper\u00e7oit que</p> <ul> <li>Les \u00e9l\u00e9ments du menu n'ont pas de puce. Masquons-les.</li> </ul> Astuce <p>Utilisez une classe, par exemple, <code>nav-menu</code> sur la liste <code>&lt;ul class=\"nav-menu\"&gt;</code> Utilisez la propri\u00e9t\u00e9 <code>list-style-type</code> &gt;&gt;Info</p> <ul> <li>Nous constatons que la couleur du texte des liens n'est pas blanche mais bleue. En effet, la couleur du texte des liens n'est pas h\u00e9rit\u00e9e. Nous allons donc, explicitement, leur sp\u00e9cifier une couleur de texte. De plus, le texte de lien est plus grands, gras et non-soulign\u00e9.</li> </ul> Astuce <ul> <li>Sp\u00e9cifions que nous travaillons sur les liens du menu <code>.nav-menu li a</code> </li> <li>Blanc =&gt; &gt;&gt;Info - Gras =&gt; &gt;&gt;Info </li> <li>Plus Grand (1.1 )=&gt; &gt;&gt;Info - Non soulign\u00e9 =&gt; &gt;&gt;Info</li> </ul> <ul> <li>Les \u00e9l\u00e9ments du menu doivent \u00eatre positionn\u00e9s les uns \u00e0 c\u00f4t\u00e9 des autres.   Nous allons donc utiliser le flex.   Posez-vous les questions suivantes :<ul> <li>Qui est le parent direct des \u00e9l\u00e9ments qui doivent \u00eatre positionn\u00e9s c\u00f4te \u00e0 c\u00f4te ? Cet \u00e9l\u00e9ment sera le conteneur Flex.</li> <li>Les \u00e9l\u00e9ments positionn\u00e9s c\u00f4te \u00e0 c\u00f4te doivent-ils autoriser le retour \u00e0 la ligne ?</li> <li>Comment les enfants du conteneur occupent-ils l'espace ?</li> <li>Les enfants du conteneur doivent-il poss\u00e9der une largeur d\u00e9finie ?</li> </ul> </li> </ul> Astuce <p>Qui est le parent direct des \u00e9l\u00e9ments qui doivent \u00eatre positionn\u00e9s c\u00f4te \u00e0 c\u00f4te ? Cet \u00e9l\u00e9ment sera le conteneur Flex. ==&gt; la balise <code>&lt;ul&gt;</code> aura son display en flex. &gt;&gt;Info </p> <p> Utilisons la class nav-menu appliqu\u00e9e sur <code>&lt;ul&gt;</code></p> <p>Les \u00e9l\u00e9ments positionn\u00e9s c\u00f4te \u00e0 c\u00f4te doivent-ils autoriser le retour \u00e0 la ligne ? Oui pour \u00eatre responsive =&gt; le balise <code>&lt;ul&gt;</code> qui est le conteneur flex autorisera le retour \u00e0 la ligne de ses enfants directs =&gt; wrap &gt;&gt;Info</p> <p> Utilisons la class nav-menu appliqu\u00e9e sur <code>&lt;ul&gt;</code></p> <p>Les \u00e9l\u00e9ments se positionnent c\u00f4te \u00e0 c\u00f4te mais ils sont coll\u00e9s.  Nous ne d\u00e9sirons pas qu'ils prennent tous l'espace disponible.  On va donc simplement les espacer.  Nous pouvons travailler avec les marges mais nous pouvons \u00e9galement travailler avec la propri\u00e9t\u00e9 <code>gap</code> &gt;&gt;Info</p> <p> Utilisons la class nav-menu appliqu\u00e9e sur <code>&lt;ul&gt;</code></p> <p>Observez bien, le menu est d\u00e9cal\u00e9 vers la droite.  Utilisons l'inspecteur pour identifier d'o\u00f9 provient ce d\u00e9calage. <code>ul</code> comprend des marges et des padding implicites. Supprimons les marges et les padding de cet ul.</p> <p> Utilisons la class nav-menu appliqu\u00e9e sur <code>&lt;ul&gt;</code></p>"},{"location":"08_cssFlex/exercice/#realisons-les-cartes","title":"R\u00e9alisons les cartes","text":"<ul> <li>Les cartes ont un fond blanc, une ombre et des bords arrondis</li> </ul> Astuce <p>Cr\u00e9ez un s\u00e9lecteur par exemple <code>price-card</code>. Cette class sera attribu\u00e9e aux articles. Attribuez-lui</p> <ul> <li> <p>un fond blanc (&gt;&gt;info  )</p> </li> <li> <p>une ombre (&gt;&gt;info  )</p> </li> <li> <p>des bords arrondis (&gt;&gt;info  )</p> </li> </ul> <ul> <li>Les 3 cartes doivent \u00eatre positionn\u00e9es les unes \u00e0 c\u00f4t\u00e9 des autres.     Nous allons donc utiliser le flex.     Posez-vous les questions suivantes :<ul> <li>Qui est le parent direct des \u00e9l\u00e9ments qui doivent \u00eatre positionn\u00e9s c\u00f4te \u00e0 c\u00f4te ? Cet \u00e9l\u00e9ment sera le conteneur Flex.</li> <li>Les \u00e9l\u00e9ments positionn\u00e9s c\u00f4te \u00e0 c\u00f4te doivent-ils autoriser le retour \u00e0 la ligne ?</li> <li>Les enfants du conteneur doivent-il poss\u00e9der une largeur d\u00e9finie ?</li> <li>Comment les enfants du conteneur occupent-ils l'espace ?</li> </ul> </li> </ul> Astuce <p>Qui est le parent direct des \u00e9l\u00e9ments qui doivent \u00eatre positionn\u00e9s c\u00f4te \u00e0 c\u00f4te ? Cet \u00e9l\u00e9ment sera le conteneur Flex. ==&gt; la balise <code>&lt;section&gt;</code> aura son display en flex. &gt;&gt;Info Utilisons, par exemple, une classe nomm\u00e9e <code>pricing-section</code> qui sera attribu\u00e9e \u00e0 la section parente.</p> <p>Rappel : plusieurs class peuvent \u00eatre attribu\u00e9es au m\u00eame \u00e9l\u00e9ment html <code>&lt;section class=\"centrage pricing-section\"&gt;</code></p> <p>Les \u00e9l\u00e9ments positionn\u00e9s c\u00f4te \u00e0 c\u00f4te doivent-ils autoriser le retour \u00e0 la ligne ? Oui pour \u00eatre responsive =&gt; la balise <code>&lt;section&gt;</code> qui est le conteneur flex autorisera le retour \u00e0 la ligne de ses enfants directs =&gt; wrap &gt;&gt;Info</p> <p> Utilisons la class <code>pricing-section</code> appliqu\u00e9e sur <code>&lt;section&gt;</code></p> <p>Oups, le titre se met \u00e0 c\u00f4t\u00e9 des cartes.  Pas de panique, c'est normal. En effet, une fois la <code>&lt;section&gt;</code> devenue conteneur flex, tous ses enfants directs sont positionn\u00e9s c\u00f4te \u00e0 c\u00f4te.  Le titre se place donc \u00e0 c\u00f4t\u00e9 des cartes.</p> <p>Pour \u00e9viter cela, nous allons demander au titre d'occuper tous l'espace disponible.  Pour ce faire, utilisons la propri\u00e9t\u00e9 <code>flex-basis</code>. <pre><code>    .pricing-section h1 {\n        flex-basis: 100%;\n    }\n</code></pre> Eh hop, le tour est jou\u00e9 !</p> <p>Les enfants du conteneur doivent-il poss\u00e9der une largeur d\u00e9finie ? Actuellement, la largeur de la carte est d\u00e9pendante de son contenu. Nous allons leur imposer une taille en utilisant la propri\u00e9t\u00e9 <code>flex-basis</code>. Ex : <code>flex-basis: 15rem;</code></p> <p> La propri\u00e9t\u00e9 <code>flex-basis</code> doit \u00eatre appliqu\u00e9e aux enfants ! Utilisons la classe   <code>.price-card</code> d\u00e9clar\u00e9e pr\u00e9c\u00e9demment.</p> <p>Comment les enfants du conteneur occupent-ils l'espace ? Nous d\u00e9sirons qu'ils soient centr\u00e9s sur la largeur de leur parent et poss\u00e9der un espace entre eux.  Pour cela, utilisons les propri\u00e9t\u00e9s <code>justify-content</code> et <code>gap</code>.   &gt;&gt;Info`</p> <p> Utilisons la class <code>pricing-section</code> appliqu\u00e9e sur <code>&lt;section&gt;</code></p> <ul> <li>Le contenu de la vignette n'est pas coll\u00e9 au bord</li> </ul> Astuce <p>Utilisez des marges int\u00e9rieurs (padding) </p> <p> Utilisons la class <code>price-card</code></p> <ul> <li>Le texte est centr\u00e9.</li> </ul> Astuce <p>Utilisez text-align: center; </p> <p> Utilisons la class <code>price-card</code></p> <ul> <li>La liste ne contient pas de puce.</li> </ul> Astuce <p>Utilisez list-style: none </p> <p> Vous pouvez sp\u00e9cifier la liste de la class price-card =&gt; <code>.price-card ul</code></p> <p>Observez le d\u00e9calage.  A votre avis, d'o\u00f9 vient-il ? Supprimer les marges et le padding de la liste. A ce moment, nous observons que la liste est coll\u00e9e au lien Get Started.  Modifions les marges haut / bas.  <code>margin: 1rem 0;</code></p> <ul> <li> <p>La vignette poss\u00e8de un bouton de r\u00e9servation qui</p> </li> <li> <p>est de couleur <code>#008CBA;</code></p> </li> <li>comprend du texte blanc</li> <li>des bords arrondis</li> <li>des marges int\u00e9rieures pour \u00e9viter que le contenu colle au bord du bouton.</li> </ul> Astuce <p>Cr\u00e9ez, par exemple, une class nomm\u00e9e <code>buttonAction</code></p> <p>Oups,  le bouton chevauche d'autres \u00e9l\u00e9ments.  Pourquoi ? Rappelez-vous : <code>&lt;a&gt;</code> est une balise en ligne. Le comportement des padding ne sont pas les m\u00eames pour les \u00e9l\u00e9ments en ligne et pour les \u00e9l\u00e9ments de type block.  Modifiez le display pour que l'\u00e9l\u00e9ment se comporte comme un inline-block.</p> <ul> <li>Les vignettes ne sont pas coll\u00e9es au bord du footer et le titre \"Nos offres\" est plus bas.</li> </ul> Astuce <p>Utilisons un padding sur la section pour que l'ensemble de son contenu ne soit pas coll\u00e9 au bord. </p> <p> Utilisez la class <code>pricing-section</code></p> <ul> <li>Modifions la couleur du prix et la taille  </li> </ul> Astuce <p>Appliquons du vert sur l'ensemble du h3 / modifions la taille / modifions les marges externes / modifions l'\u00e9paisseur de la police <code>.price-card h3 {     font-size: 2rem;     color: #27ae60;     margin: 0.5rem 0;     font-weight: lighter; }</code></p> <ul> <li>Modifions la couleur du prix et la taille /month</li> </ul> Astuce <p>Modifions la taille et la couleur du texte <code>.price-card h3 span {     font-size: 0.8rem;     color: #888; }</code></p> <ul> <li>Augmontons l'espace entre les \u00e9l\u00e9ments Feature</li> </ul> Astuce <p><code>.price-card ul li {         margin: 0.5rem 0; }</code></p>"},{"location":"08_cssFlex/exercice/#exe2-crearchitex","title":"Exe2 : Crearchitex","text":""},{"location":"08_cssFlex/exercice/#methode_1","title":"M\u00e9thode","text":"<ul> <li>Cr\u00e9ez un nouveau dossier nomm\u00e9 <code>flexCrearchitex</code> </li> <li> <p>Dans ce dossier,</p> </li> <li> <p>cr\u00e9ez un nouveau fichier nomm\u00e9 <code>flexCrearchitex.html</code></p> </li> <li>copiez-collez ce code dans le fichier html</li> </ul> Code \u00e0 copier <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;CrearchiteX&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;div&gt;\n            &lt;img src=\"img/logo.png\" alt=\"CrearchiteX Logo\"&gt;\n            &lt;nav&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=\"\" id=\"current\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;Equipe&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;Projet&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/nav&gt;\n        &lt;/div&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;section&gt;\n            &lt;blockquote&gt;Le bureau d\u2019architecture &lt;span&gt;CrearchiteX&lt;/span&gt; allie cr\u00e9ation et\n                techniques.&lt;br&gt; Construction, r\u00e9novation et design int\u00e9rieur.&lt;/blockquote&gt;\n            &lt;img src=\"img/presentation.jpg\" alt=\"Pr\u00e9sentation bureau\"&gt;\n\n            &lt;h1&gt;Nos forces&lt;/h1&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;span&gt;Construction&lt;/span&gt;Proin iaculis purus consequat sem cursus digni\n                    ssim. Donec porttitor entume suscipit. Aenean rhoncus posuere odio in tincidunt.&lt;/li&gt;\n                &lt;li&gt;&lt;span&gt;R\u00e9novation&lt;/span&gt;Nam aliquam volutpat leo vel lorem bibendum.\n                    Nuncea\n                    elit purusa, tempus pulvinar rhoncus egesta vel nibh volutpat leo.&lt;/li&gt;\n                &lt;li&gt;&lt;span&gt;Int\u00e9rieur&lt;/span&gt;Fusce porttitor turpis quis urna molestie cons\n                    equat.\n                    Nam felis purus, tincidunt sed dapibus ugravida fusce et magna libero.&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/section&gt;\n        &lt;section&gt;\n            &lt;h2&gt;Travaux r\u00e9cents&lt;/h2&gt;\n            &lt;article&gt;\n                &lt;img src=\"img/travRecent01.jpg\" alt=\"Travaux r\u00e9cents 01 Maison unifamiliale \"&gt;\n                &lt;h3&gt;Maison unifamiliale&lt;/h3&gt;\n                &lt;p&gt;R\u00e9novation compl\u00e8te des fa\u00e7ades principales, extensions magnifiques.&lt;/p&gt;\n            &lt;/article&gt;\n            &lt;article&gt;\n                &lt;img src=\"img/travRecent02.jpg\" alt=\"Travaux r\u00e9cents 02 Fermette \"&gt;\n                &lt;h3&gt;Fermette&lt;/h3&gt;\n                &lt;p&gt;Restauration d'une fermette \u00e0 colombages du 16e s. en deux habitations.&lt;/p&gt;\n            &lt;/article&gt;\n            &lt;article&gt;\n                &lt;img src=\"img/travRecent03.jpg\" alt=\"Travaux r\u00e9cents 03 Multi-logements\"&gt;\n                &lt;h3&gt;Multi-logements&lt;/h3&gt;\n                &lt;p&gt;Transformation d'un immeuble en deux logements.&lt;/p&gt;\n            &lt;/article&gt;\n            &lt;article&gt;\n                &lt;img src=\"img/travRecent01.jpg\" alt=\"Travaux r\u00e9cents 01 \"&gt;\n                &lt;h3&gt;Maison unifamiliale&lt;/h3&gt;\n                &lt;p&gt;R\u00e9novation compl\u00e8te des fa\u00e7ades principales, extensions magnifiques.&lt;/p&gt;\n            &lt;/article&gt;\n            &lt;article&gt;\n                &lt;img src=\"img/travRecent02.jpg\" alt=\"Travaux r\u00e9cents 02 \"&gt;\n                &lt;h3&gt;Fermette&lt;/h3&gt;\n                &lt;p&gt;Restauration d'une fermette \u00e0 colombages du 16e s. en deux habitations.&lt;/p&gt;\n            &lt;/article&gt;\n            &lt;article&gt;\n                &lt;img src=\"img/travRecent03.jpg\" alt=\"Travaux r\u00e9cents 03 \"&gt;\n                &lt;h3&gt;Multi-logements&lt;/h3&gt;\n                &lt;p&gt;Transformation d'un immeuble en deux logements.&lt;/p&gt;\n            &lt;/article&gt;\n            &lt;article&gt;\n                &lt;img src=\"img/travRecent03.jpg\" alt=\"Travaux r\u00e9cents 03 \"&gt;\n                &lt;h3&gt;Multi-logements&lt;/h3&gt;\n                &lt;p&gt;Transformation d'un immeuble en deux logements.&lt;/p&gt;\n            &lt;/article&gt;\n            &lt;article&gt;\n                &lt;img src=\"img/travRecent03.jpg\" alt=\"Travaux r\u00e9cents 03 \"&gt;\n                &lt;h3&gt;Multi-logements&lt;/h3&gt;\n                &lt;p&gt;Transformation d'un immeuble en deux logements.&lt;/p&gt;\n            &lt;/article&gt;\n        &lt;/section&gt;\n\n\n    &lt;/main&gt;\n    &lt;footer&gt;\n        &lt;div&gt;\n            &lt;div&gt;\n                &lt;h3&gt;Contact&lt;/h3&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;Rue de l'espoir, 666 &lt;br&gt;4000 Li\u00e8ge&lt;/li&gt;\n                    &lt;li&gt;04 123 45 69&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div&gt;\n                &lt;h3&gt;Jobs&lt;/h3&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Collaborateurs&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Administratifs&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Informatique&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n            &lt;div&gt;\n                &lt;h3&gt;Liens rapides&lt;/h3&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Projets&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Collaborateurs&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Nous contacter&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <ul> <li>cr\u00e9ez un nouveau dossier nomm\u00e9 <code>css</code></li> <li>dans ce dossier css, cr\u00e9ez un nouveau fichier nomm\u00e9 <code>flexCrearchitex.css</code></li> <li> <p>t\u00e9l\u00e9chargez les images image crearchitex</p> </li> <li> <p>Reproduisez l'interface en tenant compte des consign\u00e9es donn\u00e9es ci-dessous &gt;&gt; Voir l'interface</p> </li> </ul>"},{"location":"08_cssFlex/exercice/#contraintes_1","title":"Contraintes","text":"<ul> <li>Vous ne pouvez pas utiliser de techniques comme le float, position absolue, position relative.</li> <li>Le code Html ne peut \u00eatre modifi\u00e9, seuls des class ou id peuvent \u00eatre ajout\u00e9s</li> <li>Le code Html doit \u00eatre valide W3C</li> <li>Le code Css doit \u00eatre valide W3C</li> </ul>"},{"location":"08_cssFlex/exercice/#par-ou-commencer_1","title":"Par o\u00f9 commencer ?","text":"<ul> <li>Analysez le code html fourni.</li> <li>La feuille de style doit \u00eatre externe et li\u00e9e \u00e0 la page html. Elle sera situ\u00e9e dans le dossier <code>css</code>. (Liaison)</li> <li>Travaillez \u00e9tape par \u00e9tape. Inspirez-vous de l'exercice pr\u00e9c\u00e9dent.</li> </ul>"},{"location":"08_cssFlex/flexAstuces/","title":"Astuces","text":""},{"location":"08_cssFlex/flexAstuces/#centrage","title":"Centrage","text":"<p>Centrer un \u00e9l\u00e9ment horizontalement et verticalement</p> <p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p>"},{"location":"08_cssFlex/flexAstuces/#pied-de-page-toujours-en-bas-du-viewport","title":"Pied de page toujours en bas du viewport","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p>"},{"location":"08_cssFlex/flexAstuces/#aligner-a-gauche-et-a-droite-sur-une-meme-ligne","title":"Aligner \u00e0 gauche et \u00e0 droite sur une m\u00eame ligne","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p>"},{"location":"08_cssFlex/flexAstuces/#formulaire-sans-surplus-delements-inutiles-comme-div-ou-p","title":"Formulaire sans surplus d'\u00e9l\u00e9ments inutiles comme <code>div</code> ou <code>p</code>","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p>"},{"location":"08_cssFlex/flexAstuces/#tableau-a-laide-de-listes","title":"Tableau \u00e0 l'aide de listes","text":"<p> Sur codePen </p> <p>CSS  Le code complet \u00e0 tester se trouve sur CodePen  </p>"},{"location":"08_cssFlex/jeSuisPerdu/","title":"Help ! Je suis perdu","text":"<p>Flexbox n'est pas compliqu\u00e9 !  </p> <p>D\u00e8s que vous souhaitez positionner des \u00e9l\u00e9ments c\u00f4te \u00e0 c\u00f4te, posez-vous ces diff\u00e9rentes questions :</p> <ul> <li> <p>Qui est le parent direct des \u00e9l\u00e9ments qui doivent \u00eatre positionn\u00e9s c\u00f4te \u00e0 c\u00f4te ? </p> <ul> <li>Analysez le code HTML et identifiez le parent direct. Celui-ci deviendra le conteneur flex.</li> <li>Pour le rendre flex, appliquez la propri\u00e9t\u00e9 <code>display: flex;</code> au parent.</li> </ul> </li> <li> <p>Les \u00e9l\u00e9ments positionn\u00e9s c\u00f4te \u00e0 c\u00f4te doivent-ils autoriser le retour \u00e0 la ligne ?</p> <ul> <li>En g\u00e9n\u00e9ral, oui, cela permet aux \u00e9l\u00e9ments de s'organiser sur plusieurs lignes si l'espace est insuffisant. Cela rend le layout plus flexible et adapt\u00e9 aux diff\u00e9rentes tailles d'\u00e9cran (utile pour le responsive design).</li> <li>Pour autoriser ce retour \u00e0 la ligne, utilisez flex-wrap: wrap; sur le conteneur. </li> </ul> </li> <li> <p>Les enfants du conteneur doivent-il poss\u00e9der une largeur d\u00e9finie ?</p> <ul> <li>Si vous souhaitez qu'un \u00e9l\u00e9ment occupe un espace fixe ou proportionnel, vous pouvez lui attribuer une largeur.</li> <li>Utilisez la propri\u00e9t\u00e9 <code>flex-basis</code>.  Attention, il s'agit d'une propri\u00e9t\u00e9 \u00e0 attribuer aux enfants et non au conteneur flex.</li> </ul> </li> <li> <p>Comment les enfants du conteneur occupent-ils l'espace ?</p> <ul> <li>La propri\u00e9t\u00e9 justify-content permet de contr\u00f4ler l'espacement des \u00e9l\u00e9ments enfants le long de l'axe principal (par d\u00e9faut l'axe horizontal dans un conteneur flex). Elle d\u00e9finit comment l'espace est distribu\u00e9 entre les \u00e9l\u00e9ments et autour d'eux.  </li> </ul> </li> </ul>"},{"location":"08_cssFlex/memo/","title":"Memo","text":"<p>T\u00e9l\u00e9chargez le memo Flexbox</p>"},{"location":"08_cssFlex/principe/","title":"Principes de base","text":"<p>Imaginez une armoire dans laquelle vous allez ranger des boites.  Votre armoire devient le conteneur qui contient des boites.</p> <p>Le principe Flexbox repose sur ce principe tr\u00e8s simple : on a un conteneur qui contient des \u00e9l\u00e9ments.  Ceux-ci peuvent \u00eatre verticaux, horizontaux, ne pas occuper tout l'espace...</p> <p> </p> <p>Si vous observez une interface web, vous pouvez la d\u00e9couper en conteneurs et \u00e9l\u00e9ments enfants du conteneur.</p> <p>Mais un enfant de conteneur flex peut-il \u00eatre lui-m\u00eame conteneur flex ?</p> <p>Vous connaissez le principe des poup\u00e9es russ\u00e9es , (1) et bien flexbox part du m\u00eame principe : un enfant d'un conteneur flex peut lui-m\u00eame \u00eatre un conteneur flex qui comprend de \u00e9l\u00e9ments enfants qui eux-m\u00eame sont des conteneurs qui...</p> <ol> <li>Poup\u00e9es russes ??? kesako ? Explications poup\u00e9es russes</li> </ol> <p>Exemple :</p>"},{"location":"09_jsBase/","title":"Les bases du JavaScript","text":"<p>JavaScript est un langage de programmation principalement utilis\u00e9 pour le d\u00e9veloppement web. Il permet de rendre les pages web interactives en manipulant le contenu HTML et CSS, en r\u00e9agissant aux actions des utilisateurs et en communiquant avec des serveurs via des requ\u00eates r\u00e9seau. Initialement con\u00e7u pour s'ex\u00e9cuter dans les navigateurs, il est aujourd'hui utilis\u00e9 c\u00f4t\u00e9 serveur gr\u00e2ce \u00e0 des environnements comme Node.js. Polyvalent et largement adopt\u00e9, JavaScript est un \u00e9l\u00e9ment cl\u00e9 du d\u00e9veloppement web moderne, permettant de cr\u00e9er des applications dynamiques, des jeux en ligne et m\u00eame des solutions bas\u00e9es sur l'intelligence artificielle.</p>"},{"location":"09_jsBase/#historique","title":"Historique","text":"<p>Les \u00e9tapes cl\u00e9s du d\u00e9veloppement du JavaScript :</p> <ul> <li> <p>1995: Brendan Eich, employ\u00e9 de Netscape, con\u00e7oit un nouveau langage de script c\u00f4t\u00e9 serveur, LiveScript, en s'inspirant, tout en simplifiant, la syntaxe de Java. Netscape, en partenariat avec Sun Microsystems, adapte le langage pour une version c\u00f4t\u00e9 client et le publie sous le nom de JavaScript pour profiter de la popularit\u00e9 croissante aupr\u00e8s des d\u00e9veloppeurs du nom \"Java\".</p> </li> <li> <p>1996: Microsoft, grand concurrent, lance Jscript</p> </li> <li> <p>1997: A la demande de Netscape, l'ECMA standardise la premi\u00e8re version du langage sous l'appellation ECMAScript (ES) \u2026</p> </li> <li> <p>2009: ECMAScript 5 apporte entre autres, le support de JSON, le mode strict, les accesseurs et des fonctions suppl\u00e9mentaires de manipulation de tableaux</p> </li> <li> <p>2015: ECMAScript 6 apporte des fonctionnalit\u00e9s devenues incontournables comme les modules, les classes, les promesses, ...</p> </li> <li> <p>2016: A partir de 2015, l'ECMA pr\u00e9voit de publier une nouvelle version presque chaque ann\u00e9e. ECMAScript 7 apporte seulement une m\u00e9thode \"include\" aux tableaux pour v\u00e9rifier si une valeur existe et l'op\u00e9rateur math\u00e9matique exposant : \"**\"</p> </li> <li> <p>2017: ECMAScript 8 apporte quelques simplifications syntaxiques dont notamment \"async/await\" pour la conception de fonctions asynchrones</p> </li> </ul>"},{"location":"09_jsBase/#java-vs-javascript","title":"Java vs JavaScript","text":"<p>Java et JavaScript sont deux langages de programmation aux usages et aux concepts bien distincts, malgr\u00e9 la similarit\u00e9 de leur nom. Java est un langage compil\u00e9, orient\u00e9 objet et utilis\u00e9 pour des applications lourdes, des logiciels d'entreprise et du d\u00e9veloppement mobile (notamment avec Android). En revanche, JavaScript est un langage interpr\u00e9t\u00e9, principalement utilis\u00e9 pour le d\u00e9veloppement web afin de rendre les pages interactives. La similarit\u00e9 de leur nom est uniquement du marketing.</p> <p>Comme tout langage de script, JavaScript est un langage qui doit \u00eatre interpr\u00e9t\u00e9 par un environnement h\u00f4te et qui d\u00e9pend de celui-ci. Voici une liste non exhaustive des environnements h\u00f4tes permettant d'interpr\u00e9ter JavaScript :</p> <ul> <li> <p>navigateurs web (Firefox, Chrome, Explorer, Safari, Opera, ...)</p> </li> <li> <p>Adobe Photoshop</p> </li> <li> <p>Brackets</p> </li> <li> <p>Node.js (ex\u00e9cution de scripts c\u00f4t\u00e9 serveur web)</p> </li> <li> <p>MongoDb (base de donn\u00e9es no SQL)</p> </li> <li> <p>GNOME (environnement de bureau sur Linux)</p> </li> <li> <p>...</p> </li> </ul> <p>JavaScript n'offre pas d'op\u00e9rations I/O qui sont fournies par l'environnement h\u00f4te. Ainsi, un script JavaScript au sein d'un navigateur ne peut acc\u00e9der au syst\u00e8me de fichiers, alors qu'il le pourra dans l'environnement GNOME.</p> Crit\u00e8re Java JavaScript Type Langage compil\u00e9 (JVM) Langage interpr\u00e9t\u00e9 Usage Applications desktop, mobile (Android), backend D\u00e9veloppement web, frontend et backend (Node.js) Paradigme Orient\u00e9 objet, fortement typ\u00e9 Orient\u00e9 objet, faiblement typ\u00e9 Ex\u00e9cution JVM (Java Virtual Machine) Navigateur ou serveur (Node.js) Syntaxe Plus stricte, n\u00e9cessite une compilation Plus souple, ex\u00e9cut\u00e9 directement"},{"location":"09_jsBase/#environnement-de-developpement","title":"Environnement de d\u00e9veloppement","text":""},{"location":"09_jsBase/#jsdo","title":"js.do","text":"<p>L'\u00e9diteur en ligne http://js.do vous permet facilement de tester un bout de code JS associ\u00e9 \u00e0 du code HTML et CSS dans l'environnement d'un navigateur, donc vous b\u00e9n\u00e9ficiez notamment des fonctionnalit\u00e9s de stockage local, d'appels AJAX, de canvas,...</p> <p>Cet \u00e9diteur vous permet \u00e9galement d'int\u00e9grer quelques librairies comme jQuery, Bootstrap,...</p> <p>Par contre, cet \u00e9diteur ne propose pas de m\u00e9caniques de d\u00e9bogage; bien qu'il soit toujours possible d'utiliser les outils de d\u00e9veloppement inclus dans le navigateur lui-m\u00eame.</p>"},{"location":"09_jsBase/#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code est \u00e9galement un \u00e9diteur pratique et adapter au d\u00e9veloppement de JavaScript. Si vous optez pour cette solution, il faudra lancer un navigateur web pour exc\u00e9cuter vos scriptes. Il s'agit probagblement de la version la plus simple pour commencer.</p>"},{"location":"09_jsBase/#phpstorm","title":"PHPStorm","text":"<p>Une autre solution est d'utiliser PHPStorm de la suite JetBrains, pour utiliser cet \u00e9diteur, vous devez vous connecter avec votre compte HELMo et demander une licence : Educational Licenses. </p> <p>Il vous faudra \u00e9galement install\u00e9 Node.js pour pouvoir utiliser PHPStorm. Pour cela, rendez-vous sur le site de node.js, t\u00e9l\u00e9chargez la version courante (Current version with lastest features) et installez-la sur votre ordinateur avant d'ouvrir PHPStorm (si PHPStorm \u00e9tait d\u00e9j\u00e0 ouvert, veuillez le fermer et le relancer pour qu'il prenne en compte les variables d'environnements).</p> <p>Par d\u00e9faut, un script JS ex\u00e9cut\u00e9 directement dans cet \u00e9diteur b\u00e9n\u00e9ficie d'un environnement node.js; et donc ne peut utiliser les fonctionnalit\u00e9s li\u00e9es au navigateur (stockage local, canvas, ...).</p> <p>Bien entendu, vous pouvez, \u00e0 partir de l'\u00e9diteur, ex\u00e9cuter vos scripts dans un des navigateurs disponibles (Chrome, Firefox, Safari, Opera, Internet Explorer, Edge).</p> <p>Dans un cas comme dans l'autre, vous pouvez utiliser les m\u00e9caniques de d\u00e9bogage (point d'arr\u00eat, ...).</p> <p>Dans PHPStorm, cr\u00e9ez un projet \"PHP Empty Project\" qui contiendra vos r\u00e9solutions d'exercices de ce cours. Cr\u00e9ez un sous-r\u00e9pertoire par chapitre du cours.</p>"},{"location":"09_jsBase/#vos-premiers-codes-en-javascript","title":"Vos premiers codes en JavaScript","text":"<p>Nous allons commencer par inclure du code JavaScript dans du fichier HTML. Cr\u00e9ez un nouveau fichier HTML et copier le code suivant :</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Console Log Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;C'est bien vide ici !&lt;/h1&gt;\n    &lt;script&gt;\n        console.log(\"Hello World !\");\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> La balsie <code>script</code> vous permet d'inclure directement du code JS dans vos fichiers HTML. Ouvrez, maintenant, cette page web dans votre naviguateur favoris, inspect\u00e9 la page et rendez-vous dans la console.  C'est l\u00e0 que vous pouvez visualiser le r\u00e9sultat de votre script. Celui-ci affiche simplement \"Hello World !\". Le code : </p> <pre><code>console.log(\"Hello World !\");\n</code></pre> <p>Est l'\u00e9quivalent du code python :  <pre><code>print(\"Hello World !\")\n</code></pre></p> <p>Une bonne habitude \u00e0 prendre est de ne pas mettre vos scriptes JS dans le m\u00eame fichier  HTML. Comme on s\u00e9pare le code CSS du HTML, on fait la m\u00eame chose pour le code JS. Cr\u00e9e un fichier nomm\u00e9 script.js. Supprimer les balises <code>script</code> et sont contenu dans votre fichier HTML, et ajouter cette ligne dans le fichier script.js : </p> <pre><code>console.log(\"Hello World !\");\n</code></pre> <p>Il reste \u00e0 li\u00e9 les deux fichier. Dans le <code>head</code> ajouter cette ligne :  <pre><code>&lt;script src=\"script.js\" defer&gt;&lt;/script&gt;\n</code></pre> Recharger la page sur le naviguateur et assurez vous qu'il est toujours bien \u00e9crit \"Hello World !\" dans la console.</p> <p>L'attribut <code>src</code> permet donc de donner au code HTML un fichier contenant du code JS. L'attribut <code>defer</code> dans une balise <code>&lt;script&gt;</code> permet de diff\u00e9rer l'ex\u00e9cution du script jusqu'\u00e0 ce que le HTML soit compl\u00e8tement charg\u00e9. Contrairement \u00e0 un script classique qui bloque le rendu de la page en se chargeant imm\u00e9diatement, un script avec defer est t\u00e9l\u00e9charg\u00e9 en parall\u00e8le mais ex\u00e9cut\u00e9 seulement apr\u00e8s l'analyse compl\u00e8te du DOM. Cela am\u00e9liore les performances et emp\u00eache les erreurs li\u00e9es \u00e0 des \u00e9l\u00e9ments HTML encore non charg\u00e9s lorsque le script s'ex\u00e9cute.</p>"},{"location":"09_jsBase/branchement/","title":"Les branchements","text":""},{"location":"09_jsBase/branchement/#les-alternatives","title":"Les alternatives","text":""},{"location":"09_jsBase/branchement/#le-if","title":"Le if","text":"<p>En JavaScript, <code>if</code> et <code>switch</code> sont utilis\u00e9s pour ex\u00e9cuter du code en fonction de conditions. La structure <code>if</code> permet d'ex\u00e9cuter un bloc de code si une condition est vraie et peut \u00eatre suivie d'un <code>else</code> ou de plusieurs <code>else if</code> pour tester diff\u00e9rentes conditions.  <pre><code>let age = 18;\nif (age &lt; 18) {\n    console.log(\"Mineur\");\n} else {\n    console.log(\"Majeur\");\n}\n</code></pre></p>"},{"location":"09_jsBase/branchement/#le-switch","title":"Le switch","text":"<p>Le <code>switch</code> est utilis\u00e9 lorsqu'on doit comparer une variable \u00e0 plusieurs valeurs possibles. Il est souvent plus lisible que plusieurs <code>if else</code>.  <pre><code>let fruit = \"pomme\";\nswitch (fruit) {\n    case \"pomme\":\n        console.log(\"C'est une pomme !\");\n        break;\n    case \"banane\":\n        console.log(\"C'est une banane !\");\n        break;\n    default:\n        console.log(\"Fruit inconnu\");\n}\n</code></pre></p> <p>Ce code est \u00e9quivalent \u00e0 celui-ci : <pre><code>let fruit = \"pomme\";\nlet fruit = \"pomme\";\n\nif (fruit === \"pomme\") {\n    console.log(\"C'est une pomme !\");\n} else if (fruit === \"banane\") {\n    console.log(\"C'est une banane !\");\n} else {\n    console.log(\"Fruit inconnu\");\n}\n</code></pre></p>"},{"location":"09_jsBase/branchement/#les-boucles","title":"Les boucles","text":""},{"location":"09_jsBase/branchement/#les-boucles-for","title":"Les boucles for","text":"<p>La boucle for est utilis\u00e9e lorsque l'on conna\u00eet \u00e0 l'avance le nombre d'it\u00e9rations. Elle se compose de trois parties : initialisation, condition et incr\u00e9mentation.  <pre><code>for (let i = 1; i &lt;= 5; i++) {\n    console.log(i);\n}\n</code></pre></p> <p>Cette boucle commence avec <code>i = 1</code>, s'ex\u00e9cute tant que <code>i &lt;= 5</code>, et augmente i \u00e0 chaque it\u00e9ration.</p> <p> Ces boucles ne fonctionnent pas exactement de la m\u00eame mani\u00e8re que en python. Nous verrons une forme de <code>for</code> plus proche du python quand nous verrons les tableaux.</p>"},{"location":"09_jsBase/branchement/#la-boucle-while","title":"La boucle while","text":"<p>La boucle <code>while</code> s'ex\u00e9cute tant qu'une condition donn\u00e9e est vraie. Elle est utile lorsqu'on ne conna\u00eet pas le nombre exact d'it\u00e9rations \u00e0 l'avance.  <pre><code>let i = 1;\nwhile (i &lt;= 5) {\n    console.log(i);\n    i++;\n}\n</code></pre></p>"},{"location":"09_jsBase/branchement/#la-boucle-dowhile","title":"La boucle do...while","text":"<p>La boucle <code>do...while</code> est similaire \u00e0 <code>while</code>, mais elle garantit qu'au moins une it\u00e9ration aura lieu, car la condition est v\u00e9rifi\u00e9e apr\u00e8s l'ex\u00e9cution du bloc.  <pre><code>let i = 1;\ndo {\n    console.log(i);\n    i++;\n} while (i &lt;= 5);\n</code></pre></p>"},{"location":"09_jsBase/exercice/","title":"Exercices","text":""},{"location":"09_jsBase/exercice/#exercice-1","title":"Exercice 1","text":"<p>Placez des valeurs flottantes dans deux variables et testez si leur diff\u00e9rence est \u00e9gale \u00e0 0,1. (i.e: 0.3 et 0.2). Imprimez dans la console. </p>"},{"location":"09_jsBase/exercice/#exercice-2","title":"Exercice 2","text":"<p>Affiche les chiffres pair de 0 \u00e0 100 en utilisant une boucle.</p>"},{"location":"09_jsBase/exercice/#exercice-3","title":"Exercice 3","text":"<p>Affichez des nombres al\u00e9atoires compris entre 0 et 100 jusqu'\u00e0 obtenir un multiple de 9. Affichez ce nombre dans la console.</p>"},{"location":"09_jsBase/exercice/#exercice-4","title":"Exercice 4","text":"<p>Un coffre-fort poss\u00e8de un code de s\u00e9curit\u00e9 \u00e0 3 chiffres. Chaque chiffre peut prendre une valeur entre 1 et 5. Ecrivez un code qui affiche dans la console toutes les combinaisons possible :</p> <p>Code : 1-1-1 </p> <p>Code : 1-1-2  </p> <p>Code : 1-1-3 </p> <p>Code : 1-1-4  </p> <p>Code : 1-1-5</p> <p>...</p> <p>Code : 5-5-4  </p> <p>Code : 5-5-5  </p>"},{"location":"09_jsBase/exercice/#exercice-5","title":"Exercice 5","text":"<p>Faites un code qui affiche toutes les ann\u00e9es bissextile depuis l'an 1800.</p> <p>Pour rappelle une ann\u00e9e est bissextile si elle est divisible par 4, sauf si elle est divisible par 100 mais pas par 400.</p>"},{"location":"09_jsBase/variables/","title":"Les variables","text":""},{"location":"09_jsBase/variables/#types-et-differentes-variables","title":"Types et diff\u00e9rentes variables","text":"<p>En JavaScript, il existe deux types que peuvent prendre les variables, il s'agit du type primitif ou du type objet. Les types primitifs (comme <code>string</code>, <code>number</code>, <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>bigint</code> et <code>symbol</code>) sont immuables et stock\u00e9s directement en m\u00e9moire. Ils sont copi\u00e9s par valeur lorsqu'on les assigne \u00e0 une autre variable. En revanche, les types objets (comme les objets, tableaux et fonctions) sont des structures plus complexes stock\u00e9es par r\u00e9f\u00e9rence. Cela signifie que lorsqu'une variable contenant un objet est assign\u00e9e \u00e0 une autre, elles partagent la m\u00eame r\u00e9f\u00e9rence en m\u00e9moire, et toute modification affecte l\u2019original.</p> <p>Ces types peuvent \u00eatre d\u00e9clarer dans diff\u00e9rentes sortes de variables.  Une variable peut \u00eatre d\u00e9clar\u00e9e avec <code>var</code>, <code>let</code> ou <code>const</code>. Les variables mutables sont celles dont la valeur peut \u00eatre modifi\u00e9e apr\u00e8s leur d\u00e9claration, comme celles d\u00e9finies avec <code>let</code> et <code>var</code>. En revanche, une variable non mutable (ou immuable) est une variable dont la r\u00e9f\u00e9rence ne peut pas \u00eatre chang\u00e9e, comme celles d\u00e9clar\u00e9es avec <code>const</code>. Toutefois, si <code>const</code> est utilis\u00e9 pour un objet ou un tableau, son contenu reste modifiable, mais la r\u00e9f\u00e9rence elle-m\u00eame ne peut pas \u00eatre r\u00e9assign\u00e9e.</p> <p>En JavaScript, <code>let</code> et <code>var</code> permettent de d\u00e9clarer des variables, mais avec des diff\u00e9rences importantes. <code>var</code> a une port\u00e9e fonctionnelle et peut \u00eatre redeclar\u00e9 dans le m\u00eame bloc, ce qui peut entra\u00eener des comportements impr\u00e9vus. En revanche, <code>let</code> a une port\u00e9e de bloc ({}), ce qui le rend plus s\u00fbr en \u00e9vitant les red\u00e9clarations involontaires. De plus, <code>var</code> est sujet au hoisting, ce qui signifie qu'il est d\u00e9clar\u00e9 en haut de la fonction mais initialis\u00e9 \u00e0 undefined, tandis que let est aussi hoist\u00e9 mais non initialis\u00e9, g\u00e9n\u00e9rant une erreur si utilis\u00e9 avant sa d\u00e9claration. Dans la pratique, il est vivement recommand\u00e9 de toujours utiliser des <code>let</code>et de ne plus utiliser des <code>var</code>.</p>"},{"location":"09_jsBase/variables/#les-nombres","title":"Les nombres","text":"<p>En JavaScript, tous les nombres sont repr\u00e9sent\u00e9s par le type <code>Number</code>, qu'ils soient entiers (int) ou \u00e0 virgule flottante (float). Contrairement \u00e0 d'autres langages, JavaScript ne distingue pas explicitement ces deux types : un nombre comme 10 et 10.5 appartiennent tous les deux au type Number. JavaScript utilise un format IEEE 754 en double pr\u00e9cision (64 bits), ce qui peut entra\u00eener des impr\u00e9cisions dans les calculs en virgule flottante, comme 0.1 + 0.2 !== 0.3.</p> <p>Pour les grands nombres, le caract\u00e8re \"_\" peut \u00eatre utilis\u00e9 comme s\u00e9parateur des milliers pour faciliter la lecture: <pre><code>let  population = 10_953_235\nconsole.log(population)\n</code></pre></p>"},{"location":"09_jsBase/variables/#les-chaines","title":"Les chaines","text":"<p>Les caract\u00e8res d'une chaine sont encod\u00e9s en UTF-16. En JavaScript les chaines sont d\u00e9clar\u00e9e avec des guillements (double ou simple, il n'y a pas de diff\u00e9rence). L'op\u00e9rateur de concat\u00e9nation est le signe \"+\". De nombreuses m\u00e9thodes existent pour manipuler des chaines comme: <code>length</code>, <code>charAt</code>, <code>indexOf</code>, <code>slice</code>, <code>substring</code>, <code>split</code>, <code>replace</code>, <code>toUpperCase</code>, \u2026</p> <pre><code>let maChaine = \"Hello\"\nlet maChaine2 = \"World\"\nlet maConcat = maChaine + \" \" + maChaine2  + \" !\"\n\nconsole.log(maConcat)\n</code></pre>"},{"location":"09_jsBase/variables/#length","title":"<code>length</code>","text":"<p>Retourne la longueur d'une cha\u00eene de caract\u00e8res.  </p> <pre><code>let text = \"JavaScript\";\nconsole.log(text.length); // 10\n</code></pre>"},{"location":"09_jsBase/variables/#charat","title":"charAt","text":"<p>Retourne le caract\u00e8re \u00e0 une position donn\u00e9e.</p> <pre><code>let text = \"JavaScript\";\nconsole.log(text.charAt(4)); // 'S'\n</code></pre>"},{"location":"09_jsBase/variables/#indexof","title":"indexOf","text":"<p>Retourne l'index de la premi\u00e8re occurrence d'un caract\u00e8re ou d'une sous-cha\u00eene, ou -1 si non trouv\u00e9. <pre><code>let text = \"JavaScript\";\nconsole.log(text.indexOf(\"S\")); // 4\nconsole.log(text.indexOf(\"a\")); // 1 (premi\u00e8re occurrence)\n</code></pre></p>"},{"location":"09_jsBase/variables/#slice","title":"slice","text":"<p>Extrait une portion de la cha\u00eene entre deux indices (le second non inclus). <pre><code>let text = \"JavaScript\";\nconsole.log(text.slice(0, 4)); // 'Java'\nconsole.log(text.slice(-6));  // 'Script'\n</code></pre></p>"},{"location":"09_jsBase/variables/#substring","title":"substring","text":"<p>Similaire \u00e0 <code>slice</code>, mais ne supporte pas les indices n\u00e9gatifs. <pre><code>let text = \"JavaScript\";\nconsole.log(text.substring(0, 4)); // 'Java'\n</code></pre></p>"},{"location":"09_jsBase/variables/#split","title":"split","text":"<p>Divise une cha\u00eene en un tableau selon un s\u00e9parateur. <pre><code>let text = \"apple,banana,cherry\";\nconsole.log(text.split(\",\")); // ['apple', 'banana', 'cherry']\n</code></pre> replace Remplace une occurrence d'une sous-cha\u00eene par une autre. <pre><code>let text = \"Hello World\";\nconsole.log(text.replace(\"World\", \"JavaScript\")); // 'Hello JavaScript'\n</code></pre></p>"},{"location":"09_jsBase/variables/#touppercase","title":"toUpperCase","text":"<p>Convertit toute la cha\u00eene en majuscules. <pre><code>let text = \"JavaScript\";\nconsole.log(text.toUpperCase()); // 'JAVASCRIPT'\n</code></pre></p>"},{"location":"09_jsBase/variables/#les-booleens","title":"Les bool\u00e9ens","text":"<p>Les valeurs bool\u00e9ennes sont: true et false.</p> <p><code>undefined</code>, <code>null</code>, <code>0</code>, <code>-0</code>, <code>NaN</code>, \"\", '' sont associ\u00e9 \u00e0 false, tout le reste \u00e0 true.</p> <p>Les op\u00e9rateurs bool\u00e9ens:</p> <ul> <li> <p>ou: ||,</p> </li> <li> <p>et: &amp;&amp;,</p> </li> <li> <p>non: !</p> </li> </ul> <p>L'op\u00e9rateur \"||\" retourne la valeur de la premi\u00e8re expression \u00e9quivalente \u00e0 true !</p> <p> L'op\u00e9rateur \"||\" retourne la valeur de la premi\u00e8re expression \u00e9quivalente \u00e0 true !</p> <pre><code>console.log(0 || 'A' || 'B'); //Affiche 'A' en console et non true\n</code></pre> <p>Ce comportement est fr\u00e9quemment utilis\u00e9 dans l'affectation conditionnelle de valeur \u00e0 une variable: <pre><code>let data = []; \nlet a = data[0] || -1; //si data est vide, la valeur -1 est retourn\u00e9e\nconsole.log(a);\n</code></pre></p> <p> L'op\u00e9rateur \"??\" retourne la valeur de la premi\u00e8re expression ni \"null\" ni \"undefined\" !</p> <p>La diff\u00e9rence entre <code>||</code> et <code>??</code> (appel\u00e9 \"nullish coalescing operator\"), c'est que le second consid\u00e8re les valeurs 0 et chaine vide comme des valeurs \u00e0 retourner; alors que l'op\u00e9rateur <code>||</code> ne les retourne pas puisqu'elles sont \u00e9quivalentes \u00e0 false.</p> <pre><code>let personne = {nom: \"Leblanc\", prenom:\"Juste\", nbr:0, ville: \"\"};\nconsole.log(`nbr: '${personne.nbr || \"nbr non d\u00e9fini\"}', ville: '${personne.ville || \"ville non d\u00e9finie\"}'`);   \n//nbr: 'nbr non d\u00e9fini', ville: 'ville non d\u00e9finie'\n\nconsole.log(`nbr: '${personne.nbr ?? \"nbr non d\u00e9fini\"}', ville: '${personne.ville ?? \"ville non d\u00e9finie\"}'`);\n//nbr: '0', ville: ''\n\nconsole.log(`sexe: '${personne.sexe || \"inconnu\"}'`);\nconsole.log(`sexe: '${personne.sexe ?? \"inconnu\"}'`);\n//les deux lignes ci-dessus affichent la m\u00eame chose: sexe: 'inconnu'\n</code></pre>"},{"location":"09_jsBase/variables/#les-booleens_1","title":"Les bool\u00e9ens","text":"<p><code>undefined</code> correspond \u00e0 une variable non initialis\u00e9e, une fonction non d\u00e9finie ou un bug du script.</p> <p><code>null</code> doit correspondre \u00e0 une absence de valeur ou \u00e0 un comportement attendu du script.</p> <p>Puisque les valeurs de null et undefined sont consid\u00e9r\u00e9es comme false :</p> <pre><code>(null == undefined) == true\n</code></pre> <p>mais </p> <pre><code>(null === undefined) == false\n</code></pre> <p>En JavaScript, <code>==</code> (\u00e9galit\u00e9 faible) compare deux valeurs en effectuant une conversion de type si n\u00e9cessaire, tandis que <code>===</code> (\u00e9galit\u00e9 stricte) compare \u00e0 la fois la valeur et le type sans conversion. Par exemple, <code>5 == \"5\"</code> retourne true car JavaScript convertit la cha\u00eene <code>\"5\"</code> en nombre avant la comparaison, alors que <code>5 === \"5\"</code> retourne false car les types sont diff\u00e9rents (number vs string). Il est recommand\u00e9 d'utiliser <code>===</code> pour \u00e9viter des r\u00e9sultats inattendus dus aux conversions implicites.</p>"},{"location":"09_jsBase/variables/#conversion-de-variables","title":"Conversion de variables","text":"<p>Par d\u00e9faut, l'interpr\u00e9teur JavaScript r\u00e9alise les conversions de types implicites si n\u00e9cessaire.</p> <p>Castings implicites</p> <p>Consid\u00e9rez le code suivant, sans utiliser d'interpr\u00e9teur, qu'est ce que la console va afficher ? <pre><code>console.log(\"1\"+2);\nconsole.log(1+\"08\");\nconsole.log(\"08\" - 1);\nconsole.log(\"gains \" + 10);\nconsole.log(\"perte \" + (- 10));\nconsole.log(\"perte\" - 10);\n</code></pre></p> R\u00e9ponses <p>\"12\", \"108\" : car le signe \"+\" est une concat\u00e9nation de chaine par d\u00e9faut avant d'\u00eatre l'op\u00e9rateur arithm\u00e9tique d'addition. 7 : car le signe \"-\" correspont sans ambiguit\u00e9 \u00e0 la soustraction. \"gains 10\",\"perte -10\" : car \"+\" concat\u00e9nation de chaines. NaN: car il est impossible de convertir \"perte\" en un nombre pour l'op\u00e9ration de soustraction.</p> <p>Le casting explicite en JavaScript peut \u00eatre effectu\u00e9 par la cr\u00e9ation d'objets ou gr\u00e2ce \u00e0 certaines fonctions.</p> <pre><code>Number(\"3\");\nString(false);\nBoolean([]);\nObject(3);\n</code></pre> <p>Quelques fonctions de conversion</p> <ul> <li> <p><code>parseInt(valeur, base)</code>: conversion d'une chaine en entier dans une base donn\u00e9e,</p> </li> <li> <p><code>parseFloat(valeur)</code>: conversion d'une chaine en flottant,</p> </li> <li> <p><code>valeur.toString()</code>: conversion d'une valeur en chaine,</p> </li> <li> <p><code>valeur_numerique.toString(base)</code>: conversion d'une valeur d\u00e9cimale en une chaine dans la base donn\u00e9e.</p> </li> </ul> <p>Conversion explicite</p> <p>Comment corriger le code ci-dessous pour afficher le code RGB dans le format '#' suivi des composantes R, G et B en hexad\u00e9cimal en console ? <pre><code>rouge = \"255\";\nvert = 128;\nbleu = 24;\nconsole.log(\"code rgb: #\" + rouge + vert + bleu);\n</code></pre></p> R\u00e9ponses <pre><code>rouge = parseInt(\"255\");\nvert = 128;\nbleu = 24;\nconsole.log(\"code rgb: #\" + rouge.toString(16) + vert.toString(16) + bleu.toString(16));\n</code></pre>"},{"location":"09_jsBase/variables/#connaitre-le-type-dune-variable","title":"Connaitre le type d'une variable","text":"<p>La fonction <code>typeOf</code> retourne le nom du type d'une variable.</p> <pre><code>result = typeof(\"chaine\");\n</code></pre>"},{"location":"10_jsFonction/","title":"Les fonctions","text":"<p>Tout comme en Python, JavaScript permet de d\u00e9finir et d'utiliser des fonctions, qui sont des blocs de code r\u00e9utilisables. Une fonction en JavaScript peut \u00eatre d\u00e9clar\u00e9e avec le mot-cl\u00e9 function, prendre des param\u00e8tres et retourner une valeur avec return. Elles permettent de structurer le code, d'\u00e9viter les r\u00e9p\u00e9titions et de rendre le programme plus modulaire. </p>"},{"location":"10_jsFonction/#declarer-une-fonction","title":"D\u00e9clarer une fonction","text":"<p>La d\u00e9claration d'une fonction peut \u00eatre plac\u00e9e apr\u00e8s son utilisation dans le code gr\u00e2ce au m\u00e9canisme de \"hissage\".</p> <p>Par contre, il n'est pas possible de d\u00e9clarer une fonction dans une structure conditionnelle puisque la d\u00e9claration de la fonction est interpr\u00e9t\u00e9e durant la phase de \"compilation\" du code.</p> <pre><code>function nomFonction(parametre1, parametre2){   \n\u2026\n}\n</code></pre> <p>En JavaScript, une fonction est un objet. Il est donc possible de cr\u00e9er une fonction anonyme et l'affecter \u00e0 une variable.</p> <pre><code>let nomFonction = function(parametre1, parametre2){ \u2026 }\n</code></pre> <p>La d\u00e9claration d'une fonction par expression doit absolument \u00eatre plac\u00e9e avant son utilisation mais peut \u00eatre plac\u00e9e dans une structure conditionnelle. La raison est simple: la fonction n'est d\u00e9tect\u00e9e qu'au moment de l'ex\u00e9cution du code lors de la r\u00e9alisation de l'op\u00e9ration d'affectation.</p>"},{"location":"10_jsFonction/#les-fonctions-flechees","title":"Les fonctions fl\u00e9ch\u00e9es","text":"<p>Une fonction fl\u00e9ch\u00e9e en JavaScript est une syntaxe plus concise pour d\u00e9clarer une fonction, introduite avec ES6. Elle utilise l'op\u00e9rateur =&gt; au lieu du mot-cl\u00e9 function. Voici comment l'on d\u00e9clare une fonction fl\u00e9ch\u00e9e :</p> <pre><code>let circleArea = (pi, r) =&gt; {   \n    let area = pi * r * r;\n    return area;\n};\n\nlet result = circleArea(3.14, 3);\nconsole.log(Math.round(result * 100) / 100);  //=&gt; \"28.26\"\n</code></pre> <p>ou plus court encore : <pre><code>let circleArea = (pi, r) =&gt; pi * r * r;\nlet result = circleArea(3.14, 3);\nconsole.log(Math.round(result * 100) / 100);  //=&gt; \"28.26\"\n</code></pre></p> <p>Ces expressions sont \u00e9quivalentes \u00e0 :</p> <pre><code>let circleArea = function(pi, r) {\n    let area = pi * r * r;\n    return area;\n\n};\n\nlet result = circleArea(3.14, 3);\nconsole.log(Math.round(result * 100) / 100);  //=&gt; \"28.26\"\n</code></pre> <p>Il existe \u00e9galement certaines conventions sur JavaScript qui nous permette de r\u00e9diger des codes encore plus concis. L'utilisation d'accolades dans les fonctions fl\u00e9ch\u00e9es n'implique plus de valeur de retour. <pre><code>let circleArea = (pi, r) =&gt; pi * r * r;\n</code></pre> ... est \u00e9gal \u00e0 ...  <pre><code>let circleArea = (pi, r) =&gt; { return pi * r * r; };\n</code></pre></p> <p>... par contre ... <pre><code>let circleArea = (pi, r) =&gt; { pi * r * r; };\n</code></pre></p> <p>... ne retourne rien.</p> <p>Exercice</p> <p>Cr\u00e9ez une fonction fl\u00e9ch\u00e9e qui re\u00e7oit un montant HTVA et un taux de TVA et qui retourne le montant TVAC arrondi \u00e0 2 chiffres apr\u00e8s la virgule. Affichez en console le r\u00e9sultat de l'appel \u00e0 la fonction avec les valeurs 1026,6\u20ac et 15%. (Exemple: \"Montant TVAC: 1180.59\u20ac\")</p> R\u00e9ponses <pre><code>let calculTVAC = (montantHTVA, taux) =&gt; Math.round(100 * montantHTVA * (1 + taux)) / 100;\nconsole.log(`Montant TVAC: ${calculTVAC(1026.6, 0.15)}\u20ac`);\n</code></pre> <p>Exercice</p> <p>Modifiez votre fonction pour qu'elle retourne un objet contenant le montant HTVA, le taux de TVA et le montant TVAC. Conservez le m\u00eame r\u00e9sultat d'affichage en console. (Exemple: \"Montant TVAC: 1180.59\u20ac\")</p> R\u00e9ponses <pre><code>let calculTVAC = (montantHTVA, taux) =&gt; {return {montantHTVA: montantHTVA, tauxTVA: taux, montantTVAC: Math.round(100 * montantHTVA * (1 + taux)) / 100}};\nconsole.log(`Montant TVAC: ${calculTVAC(1026.6, 0.15).montantTVAC}\u20ac`);\n</code></pre>"},{"location":"10_jsFonction/#les-valeurs-par-default","title":"Les valeurs par d\u00e9fault","text":"<p>La valeur par d\u00e9faut d'un argument est sp\u00e9cifi\u00e9e selon une syntaxe classique. <pre><code>function myFunction(x = 1, y = 2, z = 3){\n    console.log(x, y, z);   \n}\nmyFunction(6,7); //=&gt; \"6 7 3\"\n</code></pre></p> <p>Question</p> <p><pre><code>function test (x = 1, y, z = 2){\n    return (y === undefined) ? x : z;\n}\nconsole.log(test(9));\nconsole.log(test(9,10));\nconsole.log(test(9,10,11));  \nconsole.log(test(9,10,11,12));\n</code></pre> Qu'est-ce qui sera affich\u00e9 en console ?</p> R\u00e9ponse <p>Les lignes : \"9\", \"2\", \"11\", \"11\". En JavaScript, une fonction peut \u00eatre appel\u00e9e avec trop peu d'arguments (ceux-ci sont \"undefined\" s'il n'y a pas de valeur par d\u00e9faut) ou avec trop d'arguments.</p>"},{"location":"10_jsFonction/#fonctions-imbriquees","title":"Fonctions imbriqu\u00e9es","text":"<p>Une fonction imbriqu\u00e9e est une fonction d\u00e9clar\u00e9e \u00e0 l'int\u00e9rieur du corps d'une autre fonction.</p> <p>L'enchainement de port\u00e9e (scope chain) de la fonction imbriqu\u00e9e inclut celle de la fonction qui la contient; en d'autres termes, la port\u00e9e des variables locales de la fonction contenante recouvre l'enti\u00e8ret\u00e9 de la fonction imbriqu\u00e9e.</p> <p>Exercice</p> <p>Quelle valeur est affich\u00e9e dans la console par le code ci-dessous ? <pre><code>function calcule(a, b){\n    let bonus = 10;\n    function incremente(x){\n        return x+bonus+a;\n    }\n    return incremente(a) + incremente(b);\n}\nconsole.log(calcule(2,3)); \n</code></pre></p> R\u00e9ponses <p>29.. car calcule(2,3) retourne incremente(2) + incremente(3). Or incremente(x) retourne x + 12 puisque bonus vaut 10 et a vaut 2. Nous avons donc (2 + 12) + (3 + 12) = 29.</p>"},{"location":"10_jsFonction/#passage-dune-fonction-en-argument","title":"Passage d'une fonction en argument","text":"<p>En JavaScript, les fonctions sont des objets, ce qui signifie qu'elles peuvent \u00eatre pass\u00e9es en param\u00e8tre \u00e0 d'autres fonctions. </p> <pre><code>let add = function(x,y){ return x+y;}\nlet mult = function(x,y){ return x*y; }\nfunction calc(x,y,f){\n    return f(x,y);\n}\nconsole.log(calc(3,2,mult)); // affiche 6\nconsole.log(calc(3,2,add)); // affiche 5\n</code></pre> <p>La fonction <code>calc</code> prend trois param\u00e8tres : deux nombres <code>(x et y)</code> et une fonction <code>(f)</code>. Elle ex\u00e9cute <code>f(x, y)</code>, ce qui permet d'appliquer une op\u00e9ration diff\u00e9rente selon la fonction fournie en argument.</p> <p>Lorsque <code>calc(3, 2, mult)</code> est appel\u00e9, <code>mult(3, 2)</code> est ex\u00e9cut\u00e9 et retourne <code>6</code>.</p> <p>Lorsque <code>calc(3, 2, add)</code> est appel\u00e9, <code>add(3, 2)</code> est ex\u00e9cut\u00e9 et retourne <code>5</code>.</p> <p>Ce principe est utilis\u00e9 en programmation fonctionnelle, permettant d\u2019\u00e9crire du code plus modulaire et r\u00e9utilisable.</p>"},{"location":"10_jsFonction/#une-fonction-comme-resultat-dune-fonction","title":"Une fonction comme r\u00e9sultat d'une fonction","text":"<p>Suivant le m\u00eame principe, comme une fonction est un objet, une fonction peut donc tr\u00e8s bien retourner une autre fonction.</p> <p><pre><code>function generateurSalaire(role){\n    let result = null;\n    switch(role){\n        case \"manager\":\n            result = function(salireFixe, anciennete) { return salaireFixe + 0.3 * anciennete; }\n            break;\n        default:\n            result = function(salireFixe, anciennete) { return salaireFixe + 0.1 * anciennete; }\n    }\n    return result;\n}\n\nlet prenom =  \"Jean\";\nlet role = \"vendeur\";\nlet salaireFixe = 3000;\nlet anciennete = 10;\n\nlet getSalaire = generateurSalaire(role);\nconsole.log(\" Salaire de \" + prenom + \": \" +  getSalaire(salaireFixe, anciennete) + \"\u20ac\"); // Salire de Jean : 3001\u20ac\n</code></pre> Dans le code ci-dessus, La fonction <code>generateurSalaire(role)</code> retourne une fonction sp\u00e9cifique en fonction du r\u00f4le de l\u2019employ\u00e9. Cette fonction est stock\u00e9e dans la variable <code>getSalaire</code>. Dans cette exemple comme le r\u00f4le est celui d'un vendeur, c'est la seconde fonction qui sera utilis\u00e9e et le salaire vaudra donc <code>3000 + 10*0.1 = 3001</code>.</p>"},{"location":"10_jsFonction/#fonction-generatrice","title":"Fonction g\u00e9n\u00e9ratrice","text":"<p>Une fonction g\u00e9n\u00e9ratrice est une fonction d\u00e9clar\u00e9e avec function* dont l'ex\u00e9cution peut \u00eatre interrompue puis reprise. Le contexte de la fonction g\u00e9n\u00e9ratrice, ses variables, est conserv\u00e9 entre les diff\u00e9rentes ex\u00e9cutions.</p> <p>Un appel \u00e0 une fonction g\u00e9n\u00e9ratrice n'ex\u00e9cute pas directement le corps de la fonction, il retourne un it\u00e9rateur dont la m\u00e9thode <code>next()</code> permet d'ex\u00e9cuter le corps de la fonction jusqu'\u00e0 l'interruption suivante provoqu\u00e9e par <code>yield</code></p> <pre><code>function* listePairs(n) {\n     let p = n;\n     do {\n         p+=2;\n         yield p;\n     } while(p &lt; 100);\n}\nlet pairs = listePairs(94);\nconsole.log(pairs.next().value); //96\nconsole.log(pairs.next().value); //98\nconsole.log(pairs.next().value); //100\nconsole.log(pairs.next().value); //undefined\n</code></pre> <p>Chaque appel \u00e0 la m\u00e9thode <code>next()</code> retourne un objet <code>{\"value\": valeur,\"done\":false}</code>. \"Value\" est la valeur retourn\u00e9e par \"yield\" et \"done\" indique si l'it\u00e9rateur est arriv\u00e9 \u00e0 la fin (plus aucun \"yield\").</p> <p>Une fonction g\u00e9n\u00e9ratrice peut contenir le motclef \"return\"; dans ce cas, l'it\u00e9rateur se termine lorsque l'instruction \"return\" est atteinte. <pre><code>function* listePairs(n) {\n     let p = n;\n     do {\n         p+=2;\n         yield p;\n     } while(p &lt; 100);\n     return 0;\n     yield n; //yield inatteignable;\n}\n\nlet pairs = listePairs(94);\nconsole.log(pairs.next().value); //96\nconsole.log(pairs.next().value); //98\nconsole.log(pairs.next().value); //100\nconsole.log(pairs.next().value); //0\nconsole.log(pairs.next().value); //undefined\n</code></pre></p> <p>Utilisation d'une fonction g\u00e9n\u00e9ratrice</p> <p><code>javascript function* intervalle(deb, fin){     for(var v=deb; v &lt; fin; v++){         yield v;     } } // Ex d'utilisations d'une fonction g\u00e9n\u00e9ratrice autres que boucle     let values = Array.from(intervalle(1,10));    console.log(values);     console.log(...intervalle(1,10));</code> Qu'est-ce que le code ci-dessus affiche en console ? Essayez de le deviner sans ex\u00e9cuter le code...</p> R\u00e9ponse <p>Tout d'abord, l'affichage d'un tableau contenant les valeurs de 1 \u00e0 9; puis l'affichage des valeurs 1 \u00e0 9 s\u00e9par\u00e9es par un espace.</p>"},{"location":"10_jsFonction/#une-fonction-generatrice-appelee-dans-une-autre","title":"Une fonction g\u00e9n\u00e9ratrice appel\u00e9e dans une autre","text":"<p>L'appel d'une fonction g\u00e9n\u00e9ratrice dans une autre fonction g\u00e9n\u00e9ratrice est r\u00e9alis\u00e9 via <code>yield*</code>. L'instruction <code>yield*</code> it\u00e9rable peut \u00eatre interpr\u00e9t\u00e9e comme des <code>yield</code> sur chaque valeur de l'it\u00e9rable. Consultez la page yield* (MDN moz://a) pour plus d'exemples. <pre><code>function* intervalle(deb, fin){\n    for(var v=deb; v &lt; fin; v++){\n        yield v;\n    }\n}\n\nfunction* listeValeurs(){\n    yield 0;\n    yield* intervalle(3,6);\n    yield* intervalle(9,12);\n    yield 20;\n}\n\nfunction afficheValeurs(){\n   let valeurs = listeValeurs();\n   let valeur = valeurs.next();\n   while (!valeur.done) {\n       console.log(valeur.value);\n       valeur = valeurs.next();\n   }\n}\nafficheValeurs();\n</code></pre></p> <p>Le code ci-dessus va afficher la s\u00e9quence : \"0 3 4 5 9 10 11 20\" dans la console avant de s'arr\u00eater.</p> <p>L'utilisation de fonctions g\u00e9n\u00e9ratrices permet d'\u00e9crire des boucles imbriqu\u00e9es de mani\u00e8re plus concise et de faire du lazy loading en g\u00e9n\u00e9rant la valeur suivante au fur et \u00e0 mesure du traitement plut\u00f4t que de charger l'ensemble des donn\u00e9es d'un tableau ou d'une liste de tr\u00e8s grande taille.</p>"},{"location":"10_jsFonction/exceptions/","title":"Les exceptions","text":""},{"location":"10_jsFonction/exceptions/#lancer-et-attraper-des-exceptions","title":"Lancer et attraper des exceptions","text":"<p>En JavaScript, une exception est une erreur qui se produit pendant l'ex\u00e9cution d'un programme, emp\u00eachant son ex\u00e9cution normale. Lorsqu'une erreur se produit, JavaScript interrompt imm\u00e9diatement l'ex\u00e9cution du script et affiche un message d'erreur dans la console. Pour \u00e9viter que l'ex\u00e9cution d'un programme ne s'arr\u00eate brutalement en cas d'erreur, on peut lancer et attraper des exceptions.</p> <p>Lancer une exception signifie interrompre volontairement l'ex\u00e9cution normale du programme en g\u00e9n\u00e9rant une erreur \u00e0 l'aide de l'instruction <code>throw</code>. Cette exception peut \u00eatre un objet Error ou tout autre type de valeur (une cha\u00eene de caract\u00e8res, un nombre, un objet personnalis\u00e9, etc.). Par exemple :</p> <pre><code>throw new Error(\"Une erreur est survenue !\");\n</code></pre> <p>Une fois une exception lanc\u00e9e, elle peut \u00eatre attrap\u00e9e gr\u00e2ce au bloc <code>try...catch</code>. Le bloc <code>try</code> contient le code qui peut potentiellement g\u00e9n\u00e9rer une exception, et le bloc <code>catch</code> capture cette exception pour \u00e9viter que le programme ne plante.</p> <pre><code>try {\n    let age = -5;\n    if (age &lt; 0) {\n        throw new Error(\"L'\u00e2ge ne peut pas \u00eatre n\u00e9gatif !\");\n    }\n    console.log(\"L'\u00e2ge est valide.\");\n} catch (error) {\n    console.log(\"Erreur d\u00e9tect\u00e9e : \" + error.message);\n}\n</code></pre> <p>Dans cet exemple, si l'\u00e2ge est n\u00e9gatif, une exception est lev\u00e9e avec <code>throw</code>. Le bloc <code>catch</code> capture cette erreur et affiche un message dans la console, emp\u00eachant le programme de crasher.</p>"},{"location":"10_jsFonction/exceptions/#le-block-finally","title":"Le block finally","text":"<p>On peut \u00e9galement utiliser le bloc finally, qui s\u2019ex\u00e9cute toujours, que l'exception ait \u00e9t\u00e9 lev\u00e9e ou non. Il est utile pour effectuer du nettoyage (fermer des fichiers, lib\u00e9rer des ressources, etc.) :</p> <pre><code>try {\n    console.log(\"D\u00e9but du programme.\");\n    throw new Error(\"Probl\u00e8me d\u00e9tect\u00e9 !\");\n} catch (error) {\n    console.log(\"Erreur captur\u00e9e :\", error.message);\n} finally {\n    console.log(\"Ce message s'affichera toujours.\");\n}\n</code></pre> <p>L'utilisation des exceptions permet donc d'am\u00e9liorer la robustesse du code en g\u00e9rant proprement les erreurs et en \u00e9vitant des plantages brutaux.</p>"},{"location":"10_jsFonction/exceptions/#creer-ces-propres-exceptions","title":"Cr\u00e9er ces propres exceptions","text":"<p>Notez qu'il est \u00e9galement possible de cr\u00e9er ces propres exceptions. N\u00e9anmoins, nous ne verrons pas ceci pour le moment. En effet, il nous faut introduire la notion de classe avant de pouvoir g\u00e9n\u00e9rer ces propres exceptions.</p>"},{"location":"10_jsFonction/exercice/","title":"Exercices","text":""},{"location":"10_jsFonction/exercice/#exercice-1-fibonacci","title":"Exercice 1 :  Fibonacci","text":"<p>\u00c9crivez un programme en JavaScript qui, utilise une fonction et affiche les <code>n</code> premiers termes de la suite de Fibonacci, en utilisant uniquement des variables et des boucles (sans tableau ni fonction).</p> <p>Rappel : La suite de Fibonacci est d\u00e9finie ainsi :</p> <ul> <li> <p>F(0) = 1 </p> </li> <li> <p>F(1) = 1 </p> </li> <li> <p>F(2) = 2</p> </li> <li> <p>F(2) = 3</p> </li> <li> <p>F(3) = 5</p> </li> <li> <p>F(4) = 8</p> </li> <li> <p>F(n) = F(n-1) + F(n-2)</p> </li> </ul>"},{"location":"10_jsFonction/exercice/#exercices-2-palindrome","title":"Exercices 2 : Palindrome","text":"<p>Cr\u00e9ez une fonction qui recherche les palindromes dans une phrase donn\u00e9e. (ex: \"Aujourd'hui, nous allons faire du kayak sur la Lesse avec Anna.\" =&gt; \"kayak et Anna\").</p> <p>Contraintes :</p> <ul> <li> <p>N'utiliser pas de tableau</p> </li> <li> <p>R\u00e9aliser une fonction qui v\u00e9rifie si un mot donn\u00e9 en param\u00e8tre est un palindrome. Cette fonction retournera un bool\u00e9en.</p> </li> <li> <p>R\u00e9aliser une fonction qui extrait les mots d'une phrase, v\u00e9rifie si ils sont des palindromes et dans ce cas, les affiche.</p> </li> <li> <p>Documenter vos fonctions</p> </li> </ul> <p>Astuce </p> <p>Utiliser les fonctions qui traitent les chaines (comme par exemple, replace, indexOf et substring).</p>"},{"location":"10_jsFonction/exercice/#exercice-3-fuzzbuzz","title":"Exercice 3 : FuzzBuzz","text":"<p>FizzBuzz2 : \u00c0 l'aide d'une fonction g\u00e9n\u00e9ratrice, affichez les entiers de 0 \u00e0 50. Si l'entier est un multiple de 3 affichez fizz, s'il est un multiple de 5 affichez buzz et s'il est un multiple des deux, affichez fizzbuzz. </p>"},{"location":"10_jsFonction/exercice/#exercice-4-plus-de-fonctions-generatrices","title":"Exercice 4 :  Plus de fonctions g\u00e9n\u00e9ratrices","text":"<p>Cr\u00e9ez les fonctions g\u00e9n\u00e9ratrices suivantes:</p> <ul> <li> <p>naturalNumbers: g\u00e9n\u00e9re la suite des nombres naturels \u00e0 partir de 1. (1, 2, 3, 4, ...),</p> </li> <li> <p>firstN: g\u00e9n\u00e8re les n premiers nombres de la suite des nombres naturels (Exemple 3 =&gt; 1, 2, 3),</p> </li> <li> <p>repeat: g\u00e9n\u00e8re la r\u00e9p\u00e9tition infinie des n premiers nombres de la suite des nombres naturels. (Exemple: 1, 2, 3, 1, 2, 3, 1, 2, 3,...)</p> </li> </ul> <p>Enfin cr\u00e9ez une fonction qui utilise \"repeat\" pour afficher les \"nbr\" premiers \u00e9l\u00e9ments de la r\u00e9p\u00e9tition des \"x\" premiers naturels. (1, 2, 3, 4, 1, 2, 3, 4, 1, 2).</p>"},{"location":"10_jsFonction/exercice/#exercice-5-fibonacci-fonction-generatrice","title":"Exercice 5 : Fibonacci (fonction g\u00e9n\u00e9ratrice)","text":"<p>M\u00eame question que la question 1 mes cette fois utilsier une fonction g\u00e9n\u00e9ratrice.</p> <p>Astuce </p> <p>La fonction va calculer le terme suivant sur base des deux pr\u00e9c\u00e9dents.</p>"},{"location":"10_jsFonction/strict/","title":"Le mode strict","text":"<p>Comme nous avons pu le constater, certaines libert\u00e9s autoris\u00e9es dans le langage peuvent \u00eatre sources d'erreurs. Certaines bonnes pratiques peuvent \u00eatre impos\u00e9es en passant en mode strict.</p> <p>Le passage en mode strict s'effectue au sein de chaque fonction ou pour l'ensemble du script en ajoutant ceci comme premi\u00e8re ligne:</p> <pre><code>\"use strict\"; //mode strict pour l'ensemble du script\n\nfunction doSomething() {\n    \"use strict\"; //mode strict pour cette fonction uniquement\n    ... \n}\n</code></pre> <p> Toute classe ou module JavaScript est par d\u00e9faut en mode strict !</p> <p>Pour rappel, en JS une fonction n'est pas obligatoirement inclue dans une classe ou un module.</p> <p>Les contraintes impos\u00e9es par le mode strict sont les suivantes: </p>"},{"location":"10_jsFonction/strict/#obligation-de-declarer-les-variables","title":"Obligation de d\u00e9clarer les variables","text":"<p>Toute variable doit \u00eatre d\u00e9clar\u00e9e par \"let\" ou \"var\" avant de pouvoir \u00eatre utilis\u00e9e.</p>"},{"location":"10_jsFonction/strict/#noms-de-parametres-dune-fonction-distincts","title":"Noms de param\u00e8tres d'une fonction distincts","text":"<p>Les noms de param\u00e8tres d'une fonction doivent \u00eatre tous diff\u00e9rents.</p> <p>Question</p> <p><pre><code>function f(x,x){\n    return x+x;\n}\nconsole.log(f(3,4));\n</code></pre> Qu'affiche le code ci-dessus dans la console ?</p> R\u00e9ponse <p>\"8\" puisque x prend la valeur du second param\u00e8tre qui \u00e9crase le premier.</p>"},{"location":"10_jsFonction/strict/#certains-noms-sont-reserves-aux-mots-clefs-du-langage","title":"Certains noms sont r\u00e9serv\u00e9s aux mots-clefs du langage","text":"<p>Contrairement \u00e0 bien des langages de programmation, JavaScript bloque sans avertir les affectations sur certains mots-clefs comme \"undefined\", \"arguments\", \"let\", ...</p> <p>Question</p> <p><pre><code>arguments = [10, 5];\nfunction diff(a, b){\n    if (a === arguments[0]){\n        return a;   \n    } else {\n        return \"diff\";\n    } \n}\n\nconsole.log(diff(3, 4));\n</code></pre> Quel est le r\u00e9sultat affich\u00e9 en console ?</p> R\u00e9ponse <p>\"3\" et non \"diff\" puisque la modification d'\"arguments\" est ignor\u00e9e et reste \u00e9quivalent au tableau des arguments re\u00e7us.</p> <p>Testez \u00e0 pr\u00e9sent ce code en ajoutant \"use strict\"; en premi\u00e8re ligne en dehors de la fonction.</p>"},{"location":"10_jsFonction/strict/#litteral-octal-interdit","title":"Litt\u00e9ral octal interdit","text":"<p>La pr\u00e9sence d'un \"0\" devant un nombre pour indiquer que le litt\u00e9ral est un octal peut provoquer des erreurs. <pre><code>let x = 0644;\n</code></pre></p> <p>doit \u00eatre remplac\u00e9 par : <pre><code>let x = parseInt(\"0644\", 8);\n</code></pre></p>"},{"location":"11_jsTableau/","title":"Les tableaux","text":""},{"location":"11_jsTableau/#fonctionnement-de-base","title":"Fonctionnement de base","text":""},{"location":"11_jsTableau/#initialisation","title":"Initialisation","text":"<p>En JavaScript, un tableau est une structure de donn\u00e9es qui permet de stocker plusieurs valeurs sous un m\u00eame nom. Contrairement aux variables classiques qui ne contiennent qu\u2019une seule valeur, un tableau peut regrouper une liste d\u2019\u00e9l\u00e9ments, accessibles individuellement via leur position. Ces \u00e9l\u00e9ments peuvent \u00eatre de n\u2019importe quel type (nombres, cha\u00eenes de caract\u00e8res, objets, etc.). </p> <p>Les tableaux en JavaScript sont similaires aux listes en Python : ils permettent de stocker plusieurs valeurs et de les manipuler via leur index. Cependant, en JavaScript, un tableau est un objet et peut contenir des \u00e9l\u00e9ments de types vari\u00e9s, tandis qu'en Python, les listes offrent plus de m\u00e9thodes int\u00e9gr\u00e9es pour la manipulation des donn\u00e9es.</p> <p>Tout comme en les listes en python, les tableaux en JavaScript peuvent contenir des donn\u00e9es de types diff\u00e9rents. Par exemple:</p> <pre><code>let tab = [\"a\", 2, 3.2, function(x){ return ++x;}];\n</code></pre> <p>Dans l'exemple ci-dessus, notez la pr\u00e9sence d'une fonction dans le tableau. En effet, en JavaScript une fonction est un objet, elle peut donc \u00eatre plac\u00e9e dans un tableau comme n'importe quel autre objet.</p>"},{"location":"11_jsTableau/#un-element","title":"Un \u00e9l\u00e9ment","text":"<p>L'acc\u00e8s \u00e0 l'\u00e9l\u00e9ment d'indice 'i' s'effectue selon la syntaxe classique: <pre><code>console.log(tab[0]); //\"a\"\nconsole.log(tab[3](5));//6\n</code></pre></p> <p>La m\u00e9thode at() permet l'acc\u00e8s \u00e0 un \u00e9l\u00e9ment selon sa position relative \u00e0 la fin du tableau:</p> <pre><code>let tab = ['a','b','c','d','e','f','g','h'];\nconsole.log(`${tab.at(2)}${tab.at(-1)}${tab.at(4)}${tab.at(-3)}`); //chef\n</code></pre>"},{"location":"11_jsTableau/#la-longueur","title":"La longueur","text":"<p>La longueur d'un tableau est obtenue par la propri\u00e9t\u00e9 \"length\". <pre><code>console.log(tab.length); //4\n</code></pre></p>"},{"location":"11_jsTableau/#lajout-dun-element","title":"L'ajout d'un \u00e9l\u00e9ment","text":"<p>L'ajout d'un \u00e9l\u00e9ment est possible soit en affectant une valeur \u00e0 l'indice \u00e9gale \u00e0 la longueur actuelle du tableau ou en utilisant la m\u00e9thode \"push(elem, elem, ...)\".</p> <pre><code>let tab = [];\ntab[tab.length] = 3; ou tab.push(3);\n</code></pre>"},{"location":"11_jsTableau/#supprimer-un-element","title":"Supprimer un \u00e9l\u00e9ment","text":"<p>L'op\u00e9rateur delete supprime la valeur contenue dans le tableau et la remplace par \"undefined\". La case du tableau existe donc toujours (Cette technique est peu recommand\u00e9e, il vaut mieux utiliser \"splice\" ou \"pop\").</p> <p>La m\u00e9thode pop() retourne le dernier \u00e9l\u00e9ment du tableau apr\u00e8s avoir supprim\u00e9 la derni\u00e8re case du tableau.</p> <p>Pour retirer un ou plusieurs \u00e9l\u00e9ments \u00e0 partir de n'importe quelle position d'un tableau, il faut utiliser la m\u00e9thode splice</p> <p>question</p> <p><pre><code>let tab = [1,2,3,4];\ntab[tab.length] = 5;\ndelete tab[1];\nconsole.log(tab.length);\nconsole.log(tab[1]);\nlet a = tab.pop();\nconsole.log(tab.length);\ntab.splice(1,2);\nconsole.log(tab.length);\nconsole.log(tab.toString());\n</code></pre> Sans ex\u00e9cuter le code ci-dessous, qu'est-ce qui sera affich\u00e9 en console ?</p> R\u00e9ponse <p>5 undefined 4 2 \"1,4\" car tab[1] vaut undefined suite \u00e0 l'appel \u00e0 delete; la derni\u00e8re valeur ajout\u00e9e (5) est supprim\u00e9e par l'appel \u00e0 \"pop\" et l'appel \u00e0 \"splice\" retire 2 \u00e9l\u00e9ments \u00e0 partir de l'indice 1 compris.</p>"},{"location":"11_jsTableau/#loperateur-spread","title":"l'op\u00e9rateur \"spread\" (...)","text":"<p>L'op\u00e9rateur <code>spread</code> (symbole compos\u00e9 de trois points) \"...\" permet de scinder un objet it\u00e9rable, donc aussi les tableaux, en ses valeurs individuelles.</p> <pre><code>let array1 = [2,3,4];\nlet array2 = [1, ...array1, 5, 6, 7];\nconsole.log(array2.toString()); //=&gt; \"1, 2, 3, 4, 5, 6, 7\"\n\nlet array3 = [2,3,4];\nlet array4 = [1];\narray4.push(...array3);\nconsole.log(array4.toString()); //=&gt; \"1, 2, 3, 4\" \nfunction myFunction(a, b) {\n    return a + b    \n}\nlet data = [1, 4];\nlet result = myFunction(...data);\nconsole.log(result); //=&gt; \"5\"\n</code></pre>"},{"location":"11_jsTableau/#dautres-fonctions-utiles-sur-les-tableaux","title":"D'autres fonctions utiles sur les tableaux","text":"<p>Comme tout langage de programmation, JavaScript dispose de bien d'autres fonctions et m\u00e9thodes de manipulation de tableaux, comme : join(), reverse(), sort(), concat(), slice(), splice(), unshift(), shift(),\u2026.</p> <p>Consultez la documentation pour d\u00e9couvrir les propri\u00e9t\u00e9s et m\u00e9thodes des tableaux.</p>"},{"location":"11_jsTableau/#le-parcours-de-tableau","title":"Le parcours de tableau","text":""},{"location":"11_jsTableau/#foreach","title":"forEach","text":"<p>Comme son nom l'indique, <code>forEach(function(valeur, index, tab){})</code> permet de parcourir un tableau et d'appliquer une fonction sur chaque \u00e9l\u00e9ment.</p> <p>Cette fonction peut prendre de 1 \u00e0 trois param\u00e8tres; dans l'ordre: la valeur et l'indice de l'\u00e9l\u00e9ment courant et la r\u00e9f\u00e9rence du tableau.</p> <p>Veuillez noter qu'il est possible de modifier directement le tableau en utilisant la r\u00e9f\u00e9rence du tableau !</p> <pre><code>let data = [1,2,3,4,5]; \nlet sum = 0;\ndata.forEach(function(value) { sum += value; });\nconsole.log(sum); // =&gt; 15\ndata.forEach(function(v, i, a) { a[i] = v + 1; });\nconsole.log(data.toString()); // =&gt; \"2,3,4,5,6\"\n</code></pre>"},{"location":"11_jsTableau/#map","title":"map","text":"<p>La m\u00e9thode <code>map(function(valeur, index, tab){})</code> est presque identique \u00e0 la m\u00e9thode <code>forEach</code> \u00e0 une diff\u00e9rence fondamentale pr\u00e8s: la m\u00e9thode retourne un nouveau tableau avec le r\u00e9sultat retourn\u00e9 par chaque appel de la fonction fournie en argument.</p> <pre><code>let data = [1,2,3,4,5]; \nlet sum = 0;\ndata.map(function(value) { sum += value; });\nconsole.log(sum); // =&gt; 15\ndata.map(function(v, i, a) { a[i] = v + 1; });\nconsole.log(data.toString()); // =&gt; \"2,3,4,5,6\"\nlet dataCopy = data.map(v =&gt; v * 2);\nconsole.log(data.toString()); // =&gt; \"2,3,4,5,6\"\nconsole.log(dataCopy.toString()); // =&gt; \"4,6,8,10,12\"\n</code></pre>"},{"location":"11_jsTableau/#filter","title":"filter","text":"<p>La m\u00e9thode <code>filter(function(valeur, index, tab){})</code> appliqu\u00e9e \u00e0 un tableau retourne un nouveau tableau, apr\u00e8s filtrage des \u00e9l\u00e9ments pour lesquels la fonction pass\u00e9e en argument renvoie true.</p> <pre><code>a = [5, 4, 3, 2, 1];\nsmallvalues = a.filter(x =&gt;  x &lt; 3); // [2, 1]\neveryother = a.filter((x,i) =&gt; i%2==0); // [5, 3, 1]\n</code></pre>"},{"location":"11_jsTableau/#find","title":"find","text":"<p>La m\u00e9thode <code>find(function(valeur, index, tab){})</code> retourne la premi\u00e8re valeur du tableau pour laquelle la fonction pass\u00e9e en argument renvoie true.</p> <p>Si aucun \u00e9l\u00e9ment n'est trouv\u00e9, la m\u00e9thode retourne \"undefined\".</p> <pre><code>let a = [1,2,3,4,5];\nlet four = a.find(x =&gt; x &gt; 3); // 4\nlet seven = a.find(x =&gt; x &gt; 6); //undefined\n</code></pre>"},{"location":"11_jsTableau/#findindex","title":"findIndex","text":"<p>La m\u00e9thode <code>findIndex(function(valeur, index, tab){})</code> retourne le premier indice de l'\u00e9l\u00e9ment du tableau pour lequel la fonction pass\u00e9e en argument renvoie true.</p> <p>Si aucun \u00e9l\u00e9ment n'est trouv\u00e9, la m\u00e9thode retourne \"-1\".</p> <pre><code>let a = [1,2,3,4,5];\nlet posFour = a.findIndex(x =&gt; x &gt; 3); // 3\nlet posSeven = a.findIndex(x =&gt; x &gt; 6); // -1\n</code></pre>"},{"location":"11_jsTableau/#every","title":"every","text":"<p>La m\u00e9thode <code>every(function(valeur, index, tab){})</code> retourne true si la fonction pass\u00e9e en argument retourne true pour tous les \u00e9l\u00e9ments du tableau.</p> <pre><code>a = [1,2,3,4,5];\na.every(function(x) { return x &lt; 10; }); // =&gt; true\na.every(function(x) { return x % 2 === 0; });  // =&gt; false\n</code></pre>"},{"location":"11_jsTableau/#some","title":"some","text":"<p>La m\u00e9thode <code>some(function(valeur, index, tab){})</code> retourne true si la fonction pass\u00e9e en argument retourne true pour au moins un \u00e9l\u00e9ment du tableau.</p> <pre><code>a = [1,2,3,4,5];\na.some(function(x) { return x%2===0; }); // =&gt; true\na.some(isNaN);// =&gt; false\n</code></pre>"},{"location":"11_jsTableau/#reduce","title":"reduce","text":"<p>La m\u00e9thode <code>reduce(function(accumulateur, valeur, index, tab){}, valeur_initiale)</code> applique une fonction qui accumule le r\u00e9sultat obtenu sur chaque \u00e9l\u00e9ment pour r\u00e9duire le tableau \u00e0 une seule valeur.</p> <p>La fonction prend au minimum en arguments la variable accumulateur qui contient la valeur cumul\u00e9e et la variable repr\u00e9sentant la valeur de l'\u00e9l\u00e9ment courant.</p> <p>La m\u00e9thode <code>reduce</code> peut prendre en second param\u00e8tre la valeur initiale de l'accumulateur. Si celle-ci n'est pas sp\u00e9cifi\u00e9e, l'accumulateur prend la valeur du premier \u00e9l\u00e9ment et commence l'it\u00e9ration \u00e0 partir du second \u00e9l\u00e9ment.</p> <pre><code>let a = [1,2,3,4,5];\nlet sum = a.reduce((x,y) =&gt; x+y, 5); //5 +1 +2 +3 +4 +5 = 20\nlet product = a.reduce((x,y) =&gt; x*y, 1); //1 *2 *3 *4 *5 = 120\nlet max = a.reduce((x,y) =&gt; (x&gt;y) ? x : y); //1 &gt;2? &gt;3? &gt;4? &gt;5? =  5\nlet sub1 = a.reduce((x,y) =&gt; x-y); //1 -2 -3 -4 -5 = -13\nlet sub2 = a.reduce((x,y) =&gt; x-y, 0); //0 -1 -2 -3 -4 -5 = -15\nlet sum2 = a.reduce((acc, v, i, t) =&gt; acc+t[i], 10); //10 +1 +2 +3 +4 +5 = 25\n</code></pre>"},{"location":"11_jsTableau/#reduceright","title":"reduceRight","text":"<p>la m\u00e9thode <code>reduceRight(function(accumulateur, valeur, index, tab){}, valeur_initiale)</code> est identique \u00e0 <code>reduce</code> sauf qu'elle parcourt le tableau du dernier \u00e9l\u00e9ment jusqu'au premier.</p> <pre><code>let a = [1,2,3,4,5];\nlet sumbis = a.reduceRight((x,y) =&gt; x+y); //5 +4 +3 +2 +1 = 15\n</code></pre>"},{"location":"11_jsTableau/#tri-de-tableaux","title":"Tri de tableaux","text":"<p>La m\u00e9thode \"sort(function(a,b){})\" d'un tableau trie les \u00e9l\u00e9ments du tableau par ordre croissant.</p> <pre><code>let valeurs= [5,9,68,23,2,1,68];\nvaleurs.sort();\nconsole.log(valeurs.join(', ')); //1, 2, 23, 5, 68, 68, 9\n</code></pre> <p>Cette m\u00e9thode peut recevoir une fonction en argument qui permet de comparer deux \u00e9l\u00e9ments a et b du tableau. La valeur retourn\u00e9e est positive si a &lt; b, n\u00e9gative si a &gt; b et nulle si a == b.</p> <pre><code>let valeurs = [5, 9, 68, 23, 2, 1, 68];\nvaleurs.sort((a, b) =&gt; b - a);\nconsole.log(valeurs.join(', ')); //68, 68, 23, 9, 5, 2, 1\n</code></pre> <p>Question</p> <p><code>javascript let eleves = [     {nom: 'DUPONT', prenom: 'Jeanne', classe: 'A'},     {nom: 'ALTAIR', prenom: 'Luc', classe: 'A'},     {nom: 'DUPONT', prenom: 'Pierre', classe: 'B'},     {nom: 'DUPONT', prenom: 'Arthur', classe: 'A'},     {nom: 'PIONG', prenom: 'Chang', classe: 'B'},     {nom: 'POPOULOS', prenom: 'Dimitrius', classe: 'B'},     {nom: 'ATAC', prenom: 'Djamila', classe: 'A'}  ];</code>Comment trier le tableau des \u00e9l\u00e8ves par classe, nom et pr\u00e9nom ? (Astuce: String.localeCompare()) permet de comparer 2 cha\u00eenes. R\u00e9alisez l'affichage en console de chaque \u00e9l\u00e9ve (classe nom prenom), 1 \u00e9l\u00e8ve par ligne. Sans ex\u00e9cuter le code ci-dessous, qu'est-ce qui sera affich\u00e9 en console ?</p> R\u00e9ponse <p><code>javascript eleves.sort((eleveA, eleveB) =&gt; eleveA.classe.localeCompare(eleveB.classe) || eleveA.nom.localeCompare(eleveB.nom) || eleveA.prenom.localeCompare(eleveB.prenom)); console.log(eleves.map(e =&gt; `${e.classe} ${e.nom} ${e.prenom}`).join('\\n'));</code></p>"},{"location":"11_jsTableau/collection/","title":"Les collections","text":""},{"location":"11_jsTableau/collection/#les-iterateurs-et-les-iterables","title":"Les it\u00e9rateurs et les it\u00e9rables","text":""},{"location":"11_jsTableau/collection/#objets-iterables","title":"Objets it\u00e9rables","text":"<p>Sans rentrer dans les d\u00e9tails, un objet est <code>it\u00e9rable</code> s'il d\u00e9finit un comportement lors d'une it\u00e9ration (\"parcours des valeurs\").</p> <p>En JavaScript, les objets suivants sont, par d\u00e9faut, it\u00e9rables:</p> <ul> <li> <p>les tableaux (<code>Array</code>),</p> </li> <li> <p>les chaines de caract\u00e8res (<code>String</code>),</p> </li> <li> <p>les ensembles (<code>Set</code>),</p> </li> <li> <p>les dictionnaires (<code>Map</code>)</p> </li> </ul>"},{"location":"11_jsTableau/collection/#objets-iterateurs","title":"Objets it\u00e9rateurs","text":"<p>Un objet <code>it\u00e9rateur</code> est un objet qui impl\u00e9mente la m\u00e9thode <code>next()</code> qui permet de parcourir les \u00e9l\u00e9ments d'un objet <code>it\u00e9rable</code>; cet objet peut \u00eatre lui-m\u00eame. Un <code>it\u00e9rateur</code> peut \u00eatre <code>it\u00e9rable</code>.</p> <p>La m\u00e9thode <code>next()</code> doit retourner un objet {<code>done: bool\u00e9en</code>, <code>value: objet/primitif</code>}:</p> <ul> <li> <p><code>done</code>: <code>True</code> si plus aucun \u00e9l\u00e9ment restant \u00e0 parcourir dans l'it\u00e9rable,</p> </li> <li> <p><code>value</code>: n'importe quelle valeur retourn\u00e9e par l'it\u00e9rateur, facultative si <code>done === True</code></p> </li> </ul> <p>Les fonctions g\u00e9n\u00e9ratrices sont des exemples d'objets it\u00e9rateurs:</p> <pre><code>function* voyelles(){\n    yield* ['a','e','i','o','u','y'];\n}\n\nlet voyelle = voyelles();\nconsole.log(voyelle.next()); //{value: 'a', done: false}\nconsole.log(voyelle.next()); //{value: 'e', done: false}\nconsole.log(voyelle.next()); //{value: 'i', done: false}    \nconsole.log(voyelle.next()); //{value: 'o', done: false}\nconsole.log(voyelle.next()); //{value: 'u', done: false}    \nconsole.log(voyelle.next()); //{value: 'y', done: false}    \nconsole.log(voyelle.next()); //{value: undefined, done: true}\n</code></pre>"},{"location":"11_jsTableau/collection/#convertir-un-iterable-en-tableau","title":"Convertir un it\u00e9rable en tableau","text":"<p>La m\u00e9thode Array.from(it\u00e9rable) cr\u00e9e un nouveau tableau contenant les valeurs de l'it\u00e9rable.</p> <pre><code>console.log(Array.from('aeiouy')); //Array [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n</code></pre>"},{"location":"11_jsTableau/collection/#les-dictionnaire","title":"Les dictionnaire","text":"<p>Les dictionnaires (objets <code>Map</code>) conservent des couples \"cl\u00e9\"-\"valeur\". Chaque \"cl\u00e9\" est unique pour un m\u00eame dictionnaire et peut \u00eatre de n'importe quel type. Cette structure ressemble aux objets, mais \u00e0 quelques caract\u00e9ristiques diff\u00e9rentes, comme la possibilit\u00e9 d'utiliser n'importe quel type de cl\u00e9. Contrairement aux objets, une Map conserve l'ordre d'insertion et accepte des cl\u00e9s de tout type (nombre, bool\u00e9en, objet, etc.), ce qui la rend plus flexible.</p>"},{"location":"11_jsTableau/collection/#proprietes-et-methodes-principales-dun-dictionnaire","title":"Propri\u00e9t\u00e9s et m\u00e9thodes principales d'un dictionnaire","text":"<ul> <li> <p><code>size</code>: nombre de couples cl\u00e9/valeur pr\u00e9sents dans le dictionnaire,</p> </li> <li> <p><code>clear()</code>: suppression de tous les couples cl\u00e9/valeur,</p> </li> <li> <p><code>get(cl\u00e9)</code>: retourne la valeur associ\u00e9e \u00e0 la cl\u00e9, undefined si cl\u00e9 non trouv\u00e9e,</p> </li> <li> <p><code>has(cl\u00e9)</code>: true si cl\u00e9 pr\u00e9sente, false sinon,</p> </li> <li> <p><code>set(cl\u00e9, valeur)</code>: ins\u00e8re un couple cl\u00e9/valeur,</p> </li> <li> <p><code>delete(cl\u00e9)</code>: supprime un couple cl\u00e9/valeur,</p> </li> <li> <p><code>keys()</code>: retourne un objet it\u00e9rateur et it\u00e9rable qui contient les cl\u00e9s,</p> </li> <li> <p><code>values()</code>: retourne un objet it\u00e9rateur et it\u00e9rable qui contient les valeurs</p> </li> <li> <p><code>entries()</code>: retourne un objet it\u00e9rateur et it\u00e9rable qui contient des tableaux [cl\u00e9, valeur]</p> </li> </ul> <pre><code>let map = new Map();\nmap.set(\"pomme\", \"Un fruit rouge ou vert, sucr\u00e9 et croquant.\");\nmap.set(\"chat\", \"Un animal domestique \u00e0 quatre pattes qui miaule.\");\nmap.set(42, \"Un nombre myst\u00e9rieux.\");\nmap.set(true, \"Une valeur bool\u00e9enne.\");\n\nconsole.log(map.get(\"chat\")); // \"Un animal domestique \u00e0 quatre pattes qui miaule.\"\nconsole.log(map.has(42)); // true\nmap.delete(true);\n\nmap.forEach((valeur, cle) =&gt; {\n    console.log(`${cle} : ${valeur}`);\n});\n</code></pre> <p>Questions</p> <p><pre><code>let eleves = new Map();\neleves.set('s203468', {nom: 'DUPONT', prenom: 'Jeanne'});\neleves.set('s206987', {nom: 'ALTAIR', prenom: 'Luc'});\neleves.set('s204385', {nom: 'PIONG', prenom: 'Chang'});\nconsole.log(`Matricules: ${Array.from(eleves.keys()).join(', ')}`);\n\nif (eleves.has('s206987')){\n    console.log(`El\u00e8ve ${eleves.get('s206987').nom} trouv\u00e9, puis supprim\u00e9`);\n    eleves.delete('s206987');\n}\neleves.set('s203468', {nom: 'POPOULOS', prenom: 'Dimitrius'});\neleves.forEach(e =&gt; console.log(`${e.prenom[0]}. ${e.nom}\\n`));\n\neleves.clear();\nif(eleves.size === 0){\n    console.log('Tous les \u00e9l\u00e8ves sont supprim\u00e9s');\n}\n</code></pre> Sans ex\u00e9cuter le code ci-dessus, qu'est-ce qui sera affich\u00e9 en console ?</p> R\u00e9ponse <pre><code>Matricules: s203468, s206987, s204385\nEl\u00e8ve ALTAIR trouv\u00e9, puis supprim\u00e9\nD. POPOULOS\nC. PIONG\nTous les \u00e9l\u00e8ves sont supprim\u00e9s\n</code></pre>"},{"location":"11_jsTableau/collection/#les-ensembles","title":"Les ensembles","text":"<p>Les ensembles (objets <code>Set</code>) conservent des valeurs. Chaque valeur est unique pour un m\u00eame ensemble et peut \u00eatre de n'importe quel type. Un <code>Set</code> est utile pour stocker des \u00e9l\u00e9ments uniques et v\u00e9rifier rapidement l'existence d'une valeur. Contrairement aux tableaux, il ne permet pas d'acc\u00e9der directement \u00e0 un \u00e9l\u00e9ment par son index.</p>"},{"location":"11_jsTableau/collection/#proprietes-et-methodes-principales-dun-ensemble","title":"Propri\u00e9t\u00e9s et m\u00e9thodes principales d'un ensemble","text":"<ul> <li> <p><code>`size</code>: nombre de valeurs pr\u00e9sentes dans l'ensemble,</p> </li> <li> <p><code>clear()</code>: suppression de toutes les valeurs,</p> </li> <li> <p><code>has(valeur)</code>: true si valeur pr\u00e9sente, false sinon,</p> </li> <li> <p><code>add(valeur)</code>: ajoute une valeur,</p> </li> <li> <p><code>delete(valeur)</code>: supprime une valeur,</p> </li> <li> <p><code>values()</code>: retourne un objet it\u00e9rateur et it\u00e9rable qui contient les valeurs,</p> </li> <li> <p><code>keys()</code>: alias de values(),</p> </li> <li> <p><code>entries()</code>: retourne un objet it\u00e9rateur et it\u00e9rable qui contient des tableaux [valeur, valeur]</p> </li> </ul> <pre><code>let fruits = new Set();\n\nfruits.add(\"pomme\");\nfruits.add(\"banane\");\nfruits.add(\"orange\");\nfruits.add(\"pomme\"); // Ignor\u00e9 car d\u00e9j\u00e0 pr\u00e9sent\n\nconsole.log(fruits.has(\"banane\")); // true\nconsole.log(fruits.has(\"cerise\")); // false\n\nfruits.delete(\"orange\");\n\nfruits.forEach(fruit =&gt; {\n    console.log(fruit);\n});\n\nconsole.log(fruits.size); \n</code></pre> <p>Question</p> <p><pre><code>let eleves = new Set();\neleves.add({matricule: 's203468', nom: 'DUPONT', prenom: 'Jeanne'});\neleves.add({matricule: 's206987', nom: 'ALTAIR', prenom: 'Luc'});\neleves.add({matricule: 's204385', nom: 'PIONG', prenom: 'Chang'});\nconsole.log(`Matricules: ${Array.from(eleves.values()).map(e =&gt; e.matricule).join(', ')}`);\n\nif (eleves.has({matricule: 's206987', nom: 'ALTAIR', prenom: 'Luc'})){\n    console.log(`El\u00e8ve ALTAIR trouv\u00e9, puis supprim\u00e9`);\n    eleves.delete({matricule: 's206987', nom: 'ALTAIR', prenom: 'Luc'});\n}\neleves.add({matricule: 's203468', nom: 'POPOULOS', prenom: 'Dimitrius'});\neleves.add({matricule: 's203468', nom: 'POPOULOS', prenom: 'Dimitrius'});\neleves.forEach(e =&gt; console.log(`(${e.matricule}) ${e.prenom[0]}. ${e.nom}\\n`));\n\neleves.clear();\nif(eleves.size === 0){\n    console.log('Tous les \u00e9l\u00e8ves sont supprim\u00e9s');\n}\n</code></pre> Sans ex\u00e9cuter le code ci-dessus, qu'est-ce qui sera affich\u00e9 en console ?</p> R\u00e9ponse <p><pre><code>Matricules: s203468, s206987, s204385\n(s203468) J. DUPONT\n(s206987) L. ALTAIR\n(s204385) C. PIONG\n(s203468) D. POPOULOS\n(s203468) D. POPOULOS\nTous les \u00e9l\u00e8ves sont supprim\u00e9s\n</code></pre> Attention, tout comme d'en d'autres langages, il ne faut pas confondre r\u00e9f\u00e9rence d'un objet et les donn\u00e9es qu'il contient lui-m\u00eame. Testez et comparez \u00e0 pr\u00e9sent avec le code ci-dessous: <pre><code>let eleves = new Set();\nlet altair = {matricule: 's206987', nom: 'ALTAIR', prenom: 'Luc'};\neleves.add({matricule: 's203468', nom: 'DUPONT', prenom: 'Jeanne'});\neleves.add(altair);\neleves.add({matricule: 's204385', nom: 'PIONG', prenom: 'Chang'});\nconsole.log(`Matricules: ${Array.from(eleves.values()).map(e =&gt; e.matricule).join(', ')}`);\n\nif (eleves.has(altair)){\n    console.log(`El\u00e8ve ALTAIR trouv\u00e9, puis supprim\u00e9`);\n    eleves.delete(altair);\n}\nlet popoulos = {matricule: 's203468', nom: 'POPOULOS', prenom: 'Dimitrius'};\neleves.add(popoulos);\neleves.add(popoulos);\neleves.forEach(e =&gt; console.log(`(${e.matricule}) ${e.prenom[0]}. ${e.nom}\\n`));\n\neleves.clear();\nif(eleves.size === 0){\n    console.log('Tous les \u00e9l\u00e8ves sont supprim\u00e9s');\n}\n</code></pre></p>"},{"location":"11_jsTableau/exercice/","title":"Exercice","text":""},{"location":"11_jsTableau/exercice/#exercice-jsarr1","title":"Exercice js.arr1","text":"<p>Cr\u00e9ez la fonction multiplesOccurences() qui re\u00e7oit un tableau d'entiers et retourne un tableau qui contient les valeurs pr\u00e9sentes plus d'une fois.</p> <p>S'il n'y en a pas, la fonction retourne un tableau vide.</p> <pre><code>let tab = [5,2,36,9,45,5,7,6,12,9,26];\nmultiplesOccurences(tab); // [5,9]\nlet tab2 = [5,2];\nmultiplesOccurences(tab2); // []\n</code></pre>"},{"location":"11_jsTableau/exercice/#exercice-jsarr2","title":"Exercice js.arr2","text":"<p>Cr\u00e9ez la fonction differencesTables() qui re\u00e7oit deux tableaux de caract\u00e8res et retourne un tableau avec les caract\u00e8res qui ne sont pas pr\u00e9sents en m\u00eame temps dans les deux tableaux.</p> <pre><code>let a = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"];\nlet b = [\"a\",\"b\",\"j\",\"j\"];\nlet c = [\"b\",\"a\"];\nlet d = [];\nconsole.log(differencesTables(a,b)); //[ 'c', 'd', 'e', 'f', 'j', 'j' ]\nconsole.log(differencesTables(a,c)); //[ 'c', 'd', 'e', 'f' ]\nconsole.log(differencesTables(a,d)); //[ 'a', 'b', 'c', 'd', 'e', 'f' ]\nconsole.log(differencesTables(a,a)); //[]\n</code></pre>"},{"location":"11_jsTableau/exercice/#exercice-jsarr3","title":"Exercice js.arr3","text":"<p>Lors d'une manifestation de scouts d'une m\u00eame troupe, vous recevez les participations des enfants aux activit\u00e9s d'orientation et du jeu de pistes sous forme de tableaux d'objets :</p> <pre><code>let course = [\n        {totem: \"Raton\", nom: \"PAHAYT\", prenom: \"Luc\"},\n        {totem: \"Epagneul\", nom: \"MARTIJN\", prenom: \"Sven\"},\n        {totem: \"Colibri\", nom: \"LING\", prenom: \"Riu\"},\n        {totem: \"Ours\", nom: \"NGOMBE\", prenom: \"Dieumerci\"},\n        {totem: \"Faucon\", nom: \"MALTESE\", prenom: \"Kurt\"},\n        {totem: \"Tarentule\", nom: \"ARNEM\", prenom: \"Marthe\"}\n    ];\n\n    let pistes = [\n        {totem: \"Impala\", nom: \"KALHDOUN\", prenom: \"Mohammed\"},\n        {totem: \"Raton\", nom: \"PAHAYT\", prenom: \"Luc\"},\n        {totem: \"Bison\", nom: \"VANDENHOUT\", prenom: \"Lauren\"},\n        {totem: \"Epagneul\", nom: \"MARTIJN\", prenom: \"Sven\"},\n        {totem: \"Kiwi\", nom: \"BENASSOUR\", prenom: \"Sarah\"},\n        {totem: \"Faucon\", nom: \"MALTESE\", prenom: \"Kurt\"},\n\n    ];\n</code></pre> <p>En vous inspirant de l'exercice pr\u00e9c\u00e9dent, obtenez le listing des scouts qui n'ont pas particip\u00e9 aux deux activit\u00e9s. Triez ce listing selon les totems (Vous pouvez consid\u00e9rer que le totem identifie l'enfant).</p> <pre><code>console.log(differencesTablesActivites(course, pistes));\n/* r\u00e9sultat affich\u00e9 en console:\n[\n  { totem: 'Bison', nom: 'VANDENHOUT', prenom: 'Lauren' },\n  { totem: 'Colibri', nom: 'LING', prenom: 'Riu' },\n  { totem: 'Impala', nom: 'KALHDOUN', prenom: 'Mohammed' },\n  { totem: 'Kiwi', nom: 'BENASSOUR', prenom: 'Sarah' },\n  { totem: 'Ours', nom: 'NGOMBE', prenom: 'Dieumerci' },\n  { totem: 'Tarentule', nom: 'ARNEM', prenom: 'Marthe' }\n]\n*/\n</code></pre>"},{"location":"11_jsTableau/exercice/#exercice-jsarr4","title":"Exercice js.arr4","text":"<p>Un enseignant doit d\u00e9terminer les cotes de fin d'ann\u00e9e de ses \u00e9tudiants:</p> Nom Pr\u00e9nom Interro /20 QCM /10 Projet /20 Examen /50 Bakaire Jos\u00e9phina 15 8 13.9 38.2 Dhour Youssunn 16 4.6 14.7 31.9 Dupont Marcel 8.5 7 12.6 26.8 Mei Linn 6 7.5 13 22.6 Potte Henri PP 2.6 8.2 16.6 <p>Stockez les donn\u00e9es dans un tableau d'objets et cr\u00e9ez les fonctions n\u00e9cessaires pour d\u00e9terminer les cotes globales de chaque \u00e9tudiant, la moyenne de la classe ainsi que la cote la plus haute et la plus basse parmi les \u00e9tudiants qui ont pass\u00e9 toutes les \u00e9preuves.</p> <p>La moyenne consid\u00e8re que les \u00e9tudiants qui n'ont pas tout pass\u00e9, ont une cote nulle.</p> <pre><code>let resultats = [\n    {nom: \"Bakaire\", prenom: \"Jos\u00e9phina\", interro: 15, qcm: 8, projet: 13.9, examen: 38.2},\n    {nom: \"Dhour\", prenom: \"Youssunn\", interro: 16, qcm: 4.6, projet: 14.7, examen: 31.9},\n    {nom: \"Dupont\", prenom: \"Marcel\", interro: 8.5, qcm: 7, projet: 12.6, examen: 26.8},\n    {nom: \"Mei\", prenom: \"Linn\", interro: 6, qcm: 7.5, projet: 13, examen: 22.6},\n    {nom: \"Potte\", prenom: \"Henri\", interro: \"PP\", qcm: 2.6, projet: 8.2, examen: 16.6}\n];\n</code></pre> <p></p>"},{"location":"11_jsTableau/exercice/#exercice-jsarr5","title":"Exercice js.arr5","text":"<p>Calculer la moyenne des notes arrondies qui sont &gt;= \u00e0 10. (c-\u00e0-d arrondir, garder sup\u00e9rieur ou \u00e9gal \u00e0 10, calculer la moyenne)</p> <p>Exemple: pour [10.7, 9.4, 8.7, 12.3, 9.8, 6.5, 13.7] vous devez obtenir le r\u00e9sultat de 11,75.</p>"},{"location":"11_jsTableau/exercice/#exercice-jsarr6","title":"Exercice js.arr6","text":"<p>En fin d'une soir\u00e9e \"team building\" bien arros\u00e9e, suite \u00e0 un pari perdu, vous vous \u00eates engag\u00e9 \u00e0 rembourser vos coll\u00e8gues du montant de l'entr\u00e9e du concert, soit 25\u20ac. Vous avez utilis\u00e9 une application sur votre smartphone pour que vos coll\u00e8gues vous communiquent leur num\u00e9ro de compte bancaire. Voici ce que vous avez obtenu:</p> <p><pre><code>[\n    {titulaire: 'Lucie LIU', compte: '972-487-086'},\n    {titulaire: 'Marc KROSS', compte: '12-34567812-3456 70'},\n    {titulaire: 'D\u00e9sir\u00e9 NGOMBE', compte: '4084-9027-8919-7157'},\n    {titulaire: 'Lucie LIU', compte: '972-487-068'},\n    {titulaire: 'Marc KROSS', compte: '12-34567812-3456 70'},\n    {titulaire: 'Djamila HASSAN', compte: '4084-9027-8919-7175'},\n    {titulaire: 'John FLY', compte: '499 273-987 16'},\n    {titulaire: 'Leif HARALDSON', compte: '499 273-987 17'},\n    {titulaire: 'D\u00e9sir\u00e9 NGOMBE', compte: '4084-9027-8919-7157'},\n    {titulaire: 'Natalia PETROCHKAIA', compte: '12-34567812-3456 78'},\n    {titulaire: 'Marc KROSS', compte: '12-34567812-3456 70'}\n]\n</code></pre> Avant d'effectuer vos versements, vous souhaitez pouvoir filtrer cette liste pour retirer les doublons ainsi que les num\u00e9ros de compte incorrects (La v\u00e9rification des num\u00e9ros de compte utilise l'algorithme de Luhn. Essayez de programmer cet algorithme par vous-m\u00eame au lieu de copier une des solutions pr\u00e9sentes sur http://rosettacode.org.).</p> <p>Voici ce que vous devriez obtenir:</p> <pre><code>Le num\u00e9ro de compte 972-487-086 de Lucie LIU est valide\nLe num\u00e9ro de compte 12-34567812-3456 70 de Marc KROSS est valide\nLe num\u00e9ro de compte 4084-9027-8919-7157 de D\u00e9sir\u00e9 NGOMBE est valide\nLe num\u00e9ro de compte 499 273-987 16 de John FLY est valide\n</code></pre>"},{"location":"11_jsTableau/objet/","title":"Les objets","text":"<p>En JavaScript, un objet est une structure permettant de regrouper des donn\u00e9es sous forme de paires cl\u00e9-valeur (un peu semblable au dictionnaire en Pyhton). Il sert \u00e0 mod\u00e9liser des entit\u00e9s du monde r\u00e9el en regroupant leurs propri\u00e9t\u00e9s et comportements. Contrairement aux tableaux, qui utilisent des indices num\u00e9riques, les objets utilisent des cl\u00e9s (souvent des cha\u00eenes de caract\u00e8res) pour acc\u00e9der aux valeurs. Ils sont tr\u00e8s utilis\u00e9s en programmation pour organiser les informations et structurer les donn\u00e9es de mani\u00e8re claire et r\u00e9utilisable.</p> <pre><code>let obj = {\n    propriete1: false,\n    propriete2: 42,\n    propriete3: {x: 3, y: 4},\n    propriete4: function(x){ return ++x; }\n}\n</code></pre> <p>La valeur d'une propri\u00e9t\u00e9 peut \u00eatre de n'importe quel type. Elle peut \u00eatre elle-m\u00eame un objet (propriete3) ou encore une fonction anonyme (propriete4); ce qui permet de d\u00e9clarer des m\u00e9thodes \u00e0 un objet.</p>"},{"location":"11_jsTableau/objet/#appel-des-proprietesmethodes","title":"Appel des propri\u00e9t\u00e9s/m\u00e9thodes","text":"<p>Il y existe deux fa\u00e7ons de faire. La premi\u00e8re est dite \"explicite\" : </p> <pre><code>console.log(obj.propriete2); //42\nconsole.log(obj.propriete4(5)); //6\n</code></pre> <p>L'autre est dite \"dynamique\".</p> <p><pre><code>console.log(obj[\"propriete2\"]); //42\nconsole.log(obj[\"propriete4\"](5)); //6\n</code></pre> L'objet peut \u00eatre vu comme un \"tableau associatif\" dont les cl\u00e9s sont les noms des propri\u00e9t\u00e9s.</p>"},{"location":"11_jsTableau/objet/#proprietes-non-definies","title":"Propri\u00e9t\u00e9s non-d\u00e9finies","text":"<p>Les objets JS sont dynamiques et peuvent avoir des propri\u00e9t\u00e9s qui sont ajout\u00e9es ou retir\u00e9es en cours d'ex\u00e9cution. L'acc\u00e8s \u00e0 une propri\u00e9t\u00e9 non d\u00e9finie d'un objet retourne <code>undefined</code>. Mais l'acc\u00e8s \u00e0 une propri\u00e9t\u00e9 d'une propri\u00e9t\u00e9 non d\u00e9finie d'un objet provoque une erreur et l'interruption du code ex\u00e9cut\u00e9. L'op\u00e9rateur <code>?</code>. retourne la valeur de la propri\u00e9t\u00e9 d'un objet si elle est d\u00e9finie, \"undefined\" sinon. \u00c9videmment, il ne faut pas utiliser syst\u00e9matiquement cet op\u00e9rateur lorsque ce n'est pas n\u00e9cessaire afin de ne pas alourdir le code.</p> <pre><code>let eleveA = { matricule: \"e123456\", bulletin: {math: 15, francais: 16}};\nlet eleveB = { matricule: \"e125789\" };\n\nconsole.log(`(${eleveA.matricule}) cote: ${eleveA.bulletin.math}`);\n//(e123456) cote: 15\n\n//console.log(`(${eleveB.matricule}) cote: ${eleveB.bulletin.math}`); \n//console.log(`(${eleveB.matricule}) cote: ${eleveB?.bulletin.math}`);\n//Les lignes de code ci-dessus provoquent une erreur et une interruption du code si d\u00e9comment\u00e9es...\n\nconsole.log(`(${eleveB.matricule}) cote: '${eleveB.bulletin?.math}'`);\n//(e125789) cote: undefined\n\nconsole.log(`(${eleveB.matricule}) cote: '${eleveB.bulletin?.math ?? \"manquante\"}'`);\n//(e125789) cote: 'manquante'\n</code></pre>"},{"location":"11_jsTableau/objet/#suppression-dune-propriete","title":"Suppression d'une propri\u00e9t\u00e9","text":"<p>La fonction \"delete\" supprime une propri\u00e9t\u00e9 d'un objet.</p> <pre><code>let student = {\n    lastName: \"John\",\n    firstName: \"Doe\",\n    birthDate: \"05/06/1978\" \n}\ndelete(student.birthDate);\nconsole.log(student.birthDate); // undefined\n</code></pre>"},{"location":"11_jsTableau/objet/#verification-si-un-objet-possede-une-propriete","title":"V\u00e9rification si un objet poss\u00e8de une propri\u00e9t\u00e9","text":"<p>En JavaScript, les objets peuvent voir leurs propri\u00e9t\u00e9s ajout\u00e9es ou supprim\u00e9es dynamiquement. Il est donc parfois utile de v\u00e9rifier si une propri\u00e9t\u00e9 existe avec <code>hasOwnProperty</code>.</p> <pre><code>if (student.hasOwnProperty('birthDate')) {\n    console.log(student.birthDate);\n};\n</code></pre>"},{"location":"11_jsTableau/objet/#parcours-des-proprietes-dun-objet","title":"Parcours des propri\u00e9t\u00e9s d'un objet","text":"<pre><code>for(prop in obj){\n   console.log(prop + \" : \" + obj[prop]);\n}\n</code></pre> <p>Il est cependant pr\u00e9f\u00e9rable d'utiliser \"Object.keys\" qui ne prend en compte que les propri\u00e9t\u00e9s de l'objet sans tenir compte des propri\u00e9t\u00e9s h\u00e9rit\u00e9es par la chaine de prototypes (En JS, un objet est construit \u00e0 partir d'un autre et poss\u00e8de ses propri\u00e9t\u00e9s en plus des siennes.); ce qui en g\u00e9n\u00e9ral est pr\u00e9f\u00e9rable pour une bonne d\u00e9coupe (responsabilit\u00e9) du code.</p> <pre><code>Object.keys(obj).forEach(function (prop) { \n    console.log(prop + \" : \" + obj[prop]);\n});\n</code></pre>"},{"location":"11_jsTableau/objet/#serialisation","title":"S\u00e9rialisation","text":"<p>La s\u00e9rialisation consiste \u00e0 obtenir une repr\u00e9sentation textuelle d'un objet; la d\u00e9s\u00e9rialisation \u00e9tant l'op\u00e9ration inverse.</p> <p>La syntaxe de d\u00e9claration d'objets JavaScript a \u00e9t\u00e9 d\u00e9riv\u00e9e pour d\u00e9finir la s\u00e9rialisation d'objets au format JSON (JavaScript Object Notation).</p> <p>Les fonctions sont :</p> <ul> <li> <p><code>JSON.stringify(obj)</code>: s\u00e9rialisation d'un objet obj,</p> </li> <li> <p><code>JSON.parse(txt)</code>: d\u00e9s\u00e9rialisation d'une cha\u00eene textuelle txt</p> </li> </ul> <pre><code>let elem = {\n    num:1,\n    obj: { tab: [false,null,\"\"] },\n    fct: function(i) { return ++i },\n    und: undefined,\n    nan: NaN,\n    dat: new Date('2019-02-20T10:02:00')\n}; \n\nconsole.log(elem.dat); //Wed Feb 20 2019 10:02:00 GMT+0100 (heure normale d\u2019Europe centrale)\nconsole.log(elem.dat.toDateString()); //Wed Feb 20 2019\nlet elemStr = JSON.stringify(elem);\nconsole.log(elemStr); //{\"num\":1,\"obj\":{\"tab\":[false,null,\"\"]},\"nan\":null,\"dat\":\"2019-02-20T09:02:00.000Z\"}\n\nlet elemCopy = JSON.parse(elemStr);\nconsole.log(elemCopy.dat); //2019-02-20T09:02:00.000Z\nconsole.log(elemCopy.dat.toDateString()); //TypeError: elemCopy.dat.toDateString is not a function\n</code></pre> <p>Comme vous pouvez le constater ci-dessus, les m\u00e9thodes et certaines propri\u00e9t\u00e9s, en fonction de leur valeur, ne sont pas conserv\u00e9e lors de la s\u00e9rialisation:</p> <ul> <li> <p>S\u00e9rialis\u00e9s: objets, tableaux, chaines de caract\u00e8res, nombres, bool\u00e9ens et null,</p> </li> <li> <p>Remplac\u00e9s: NaN, Infinity, -Infinity =&gt; null; Date =&gt; format ISO,</p> </li> <li> <p>Supprim\u00e9s : fonctions, RegExp, Error, undefined</p> </li> </ul> <p>Pour restaurer toutes les propri\u00e9t\u00e9s et m\u00e9thodes d'un objet s\u00e9rialis\u00e9, il est parfois n\u00e9cessaire de cr\u00e9er une fonction sp\u00e9cifique :</p> <pre><code>let elemClone = JSONreviver(elemCopy);\nconsole.log(elemClone.dat);\nconsole.log(elemClone.dat.toDateString());\n\nfunction JSONreviver(obj){\n    let e = obj;\n    e.fct = function(i) { return ++i };\n    if(!obj.hasOwnProperty(\"und\")){\n            e.und = undefined;\n    }\n    if(!obj.hasOwnProperty(\"nan\")){\n            e.nan= NaN;\n    }\n    e.dat = new Date(obj.dat);\n    return e;\n    }\n</code></pre> <p>Pour v\u00e9rifier vos cha\u00eenes JSON, utilisez un validateur online</p>"},{"location":"11_jsTableau/objet/#affectation-par-decomposition","title":"Affectation par d\u00e9composition","text":"<p>L'affectation des diff\u00e9rentes valeurs d'un tableau ou des propri\u00e9t\u00e9s d'un objet \u00e0 des nouvelles variables se r\u00e9alise gr\u00e2ce \u00e0 la syntaxe suivante :</p> <pre><code>let {prenom, nom} = { nom: \"Gendry\", prenom: \"Lucie\",  age: 22};\nconsole.log(prenom); //\"Lucie\";\n\nlet dossards = [\"#5687\", \"#4857\", \"#3879\", \"#2198\", \"#7832\"];\nlet [premier, second, ...peloton] = dossards;\nconsole.log(\"Gagnants: \" + premier + \" et \" + second); // Gagnants: #5687 et #4857\nconsole.log(\"et \" + peloton.length + \" finishers\");    // et 3 finishers\n</code></pre>"},{"location":"12_jsDOM/","title":"Introduction","text":"<p>Le DOM (Document Object Model) est une repr\u00e9sentation hi\u00e9rarchique d'une page web sous forme d'arbre. Chaque \u00e9l\u00e9ment HTML (balises, attributs, texte) est transform\u00e9 en un objet accessible via JavaScript. Cela permet aux scripts de naviguer dans la structure du document, d'ajouter, modifier ou supprimer des \u00e9l\u00e9ments dynamiquement.</p> <p>JavaScript permet d'interagir avec le DOM en temps r\u00e9el. Il peut modifier le contenu (changer du texte ou des images), ajouter ou supprimer des \u00e9l\u00e9ments, modifier les styles CSS, ou encore r\u00e9agir aux \u00e9v\u00e9nements comme un clic ou une saisie clavier. Cette capacit\u00e9 fait de JavaScript un langage essentiel pour rendre les pages web interactives et dynamiques.</p> <p>Historiquement, le langage Javascript a d'abord \u00e9t\u00e9 con\u00e7u pour \u00eatre ex\u00e9cut\u00e9 au sein des navigateurs.</p> <p>Les utilisations de JS sont multiples :</p> <ul> <li>Modification du DOM<ul> <li>Renforcement exp\u00e9rience utilisateur</li> <li>Formulaires adaptables</li> </ul> </li> <li>Validation de formulaire<ul> <li>Avantage: \u00e9vite des requ\u00eates inutiles vers le serveur,</li> <li>MAIS: l'utilisateur peut d\u00e9sactiver ou contourner cette validation =&gt;</li> <li>Toujours valider les donn\u00e9es aussi c\u00f4t\u00e9 serveur!</li> </ul> </li> </ul>"},{"location":"12_jsDOM/#rappel-js-et-web","title":"Rappel : JS et web","text":"<p>Il y existe au moins 3 fa\u00e7ons diff\u00e9rentes d'inclure du JS dans une page web.</p>"},{"location":"12_jsDOM/#directement-dans-la-page","title":"Directement dans la page","text":"<pre><code>&lt;script&gt;&lt;![CDATA[\n// votre code Javascript\n]]&gt;&lt;/script&gt;\n</code></pre> <p>La d\u00e9limitation <code>&lt;![CDATA[ ... ]]&gt;</code> permet de ne pas provoquer d'erreur d'interpr\u00e9tation par le navigateur si Javascript est d\u00e9sactiv\u00e9.</p>"},{"location":"12_jsDOM/#dans-un-fichier-js-externe","title":"Dans un fichier *.js externe","text":"<pre><code>&lt;script src=\"../../scripts/util.js\"&gt;&lt;/script&gt;\n</code></pre> <p>C'est g\u00e9n\u00e9ralement la technique \u00e0 privil\u00e9gier par d\u00e9faut. </p>"},{"location":"12_jsDOM/#dans-un-attribut-gestionnaire-devenement-html","title":"Dans un attribut gestionnaire d'\u00e9v\u00e8nement HTML","text":"<p><pre><code>&lt;button onclick=\"send_data();\"&gt;\n</code></pre> Cette m\u00e9thode permet d'appeller une fonction <code>send_data()</code> lors du click d'un bouton. Si le code appel\u00e9 est assez simple, cette technique est suffisante. Sinon, il vaut mieux isoler le code JS du code HTML en sp\u00e9cifiant les \u00e9v\u00e9nements \u00e0 capturer; ce qui sera pr\u00e9sent\u00e9 dans la suite du tutoriel.</p> <p>Notez qu'il existe une quatri\u00e8me m\u00e9thode que nous ne discuterons pas ici.</p>"},{"location":"12_jsDOM/#synchronisation","title":"Synchronisation","text":"<p>Lorsqu'un navigateur rencontre la balise <code>&lt;script&gt;</code>, il interrompt par d\u00e9faut l'interpr\u00e9tation du code HTML pour charger et ex\u00e9cuter directement le script JS avant de poursuivre l'interpr\u00e9tation de la suite du code HTML.</p> <p>Cela implique d'ins\u00e9rer les balises <code>&lt;script&gt;</code> dans un ordre qui respecte leurs d\u00e9pendances \u00e9ventuelles... mais \u00e9galement de tenir compte que l'enti\u00e8ret\u00e9 de la page n'a pas encore \u00e9t\u00e9 compl\u00e8tement charg\u00e9e par le navigateur.</p> <p>Pour s'assurer que la page soit enti\u00e8rement charg\u00e9e avant d'ex\u00e9cuter les scripts JS, un premi\u00e8re technique est d'ins\u00e9rer ses scripts comme derniers \u00e9l\u00e9ments de la balise <code>&lt;body&gt;</code>.</p> <p>Inclusion de script</p> <p>Cr\u00e9ez un fichier \"texte.js\" avec le code suivant: <pre><code>    function changeTexte(){\n        document.getElementById('texte').innerHTML = 'Ce texte remplace le texte initial';\n    }\n</code></pre> Cr\u00e9ez un fichier \"chargement.html\" avec le code suivant: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Test de chargement de script JS&lt;/title&gt;\n    &lt;script src=\"./texte.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        changeTexte();\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Chargement&lt;/h1&gt;\n    &lt;p id=\"texte\"&gt;Le texte n'a pas \u00e9t\u00e9 chang\u00e9...&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Testez la page \"chargement.html\" en l'ouvrant dans un navigateur avec les outils de d\u00e9veloppement. Que constatez-vous ?</p> R\u00e9ponse <p>Le texte initial n'a pu \u00eatre chang\u00e9 car le script \"changeTexte()\" a \u00e9t\u00e9 ex\u00e9cut\u00e9 avant que le paragraphe \"#texte\" ne soit interpr\u00e9t\u00e9 par le navigateur =&gt; en console, une exception JS appara\u00eet.</p> <p>\u00c0 pr\u00e9sent, d\u00e9placez la balise <code>&lt;script&gt;</code> contenant l'appel \u00e0 \"changeTexte()\" juste avant la fermeture du  et rechargez la page. Vous pouvez constater que le texte a bien \u00e9t\u00e9 chang\u00e9."},{"location":"12_jsDOM/#defer","title":"Defer","text":"<p>Comme signaler plus t\u00f4t, l'utilisation de defer comme attribut d'une balise <code>&lt;script&gt;</code> qui charge un script depuis une autre source (attribut src !) va forcer le navigateur \u00e0 poursuivre l'interpr\u00e9tation du code HTML tout en chargeant le script en parall\u00e8le et d'attendre l'interpr\u00e9tation compl\u00e8te du code HTML avant d'ex\u00e9cuter le script. L'ordre d'ex\u00e9cution des scripts respecte n\u00e9anmoins leur ordre d'apparition dans le code HTML.</p> <p>Mais ce n'est pas la seule fa\u00e7on de faire, il existe d'autres attributs.</p>"},{"location":"12_jsDOM/#async","title":"async","text":"<p>L'utilisation de async comme attribut d'une balise <code>&lt;script&gt;</code> qui charge un script depuis une autre source (attribut <code>src</code> !) va \u00e9galement forcer le navigateur \u00e0 poursuivre l'interpr\u00e9tation du code HTML tout en chargeant le script en parall\u00e8le. Par contre, d\u00e8s que le script est charg\u00e9, il est ex\u00e9cut\u00e9 et l'interpr\u00e9tation du code HTML est suspendue durant l'ex\u00e9cution du script. L'ordre d'ex\u00e9cution des scripts charg\u00e9s de mani\u00e8re asynchrone peut \u00e9videmment varier.</p>"},{"location":"12_jsDOM/#dom","title":"DOM","text":""},{"location":"12_jsDOM/#objet-global-window","title":"Objet global: Window","text":"<p>En JS, l'objet global d\u00e9pend de l'environnement. Dans un navigateur, l'environnement global correspond \u00e0 l'onglet (fen\u00eatre) courant; c'est l'objet <code>Window</code> (voir la liste de ses propri\u00e9t\u00e9s et m\u00e9thodes).</p> <p>Propri\u00e9t\u00e9s particuli\u00e8res:</p> <ul> <li> <p>location: URL courante sous forme d'un objet Location (href, protocol, host, hostname, port, \u2026), ancre comprise.</p> </li> <li> <p>document: Objet Document (DOM), </p> </li> </ul> <pre><code>// Afficher l'URL actuelle dans la console\nconsole.log(window.location.href);\n\n// Rediriger l'utilisateur vers une autre page apr\u00e8s 3 secondes\nsetTimeout(() =&gt; {\n    window.location.href = \"https://www.example.com\";\n}, 3000);\n\n// Modifier dynamiquement le titre de la page\nwindow.document.title = \"Nouveau Titre de la Page\";\n</code></pre>"},{"location":"12_jsDOM/#objet-document","title":"Objet Document","text":"<p>L'objet Document repr\u00e9sente les m\u00e9ta-donn\u00e9es et le contenu d'une page web charg\u00e9e par le navigateur.</p> <p>Quelques unes de ses propri\u00e9t\u00e9s et m\u00e9thodes:</p> <ul> <li> <p><code>forms</code>: tableau des formulaires</p> </li> <li> <p><code>images</code>: tableau des images</p> </li> <li> <p><code>links</code>: tableau des hyperliens (<code>&lt;area&gt;</code>, <code>&lt;a&gt;</code>)</p> </li> <li> <p><code>lastModified</code>: date de derni\u00e8re mise \u00e0 jour</p> </li> <li> <p><code>location</code>: url du document</p> </li> <li> <p><code>referrer</code>: url de l'historique -1</p> </li> <li> <p><code>write(arg)</code>: \u00e9crire dans le document</p> </li> </ul> <pre><code>document.write(\"L'URL courante est : \"+document.location+\"&lt;br&gt; et vous venez de : \"+document.referrer+\"\");\n</code></pre>"},{"location":"12_jsDOM/#document-object-model","title":"Document Object Model","text":"<p>\u00c0 la r\u00e9ception d'une page HTML, le navigateur lit le document et construit une repr\u00e9sentation en arbre des balises HTML : le Document Object Model.</p> <p>Cette repr\u00e9sentation facilite le rendu de la page et la manipulation ult\u00e9rieure de la page par des scripts clients.</p>"},{"location":"12_jsDOM/#vue-du-code-html","title":"Vue du code HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My home page&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;My home page&lt;/h1&gt;\n        &lt;p&gt;Hello, I am Marijn and this is my home page.&lt;/p&gt;\n        &lt;p&gt;I also wrote a book! Read it &lt;a href=\"http://eloquentjavascript.net\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"12_jsDOM/#vue-de-la-representation-en-arbre","title":"Vue de la repr\u00e9sentation en arbre","text":""},{"location":"12_jsDOM/#un-peu-de-terminologie","title":"Un peu de terminologie...","text":"<ul> <li> <p>document: ensemble de l'arborescence,</p> </li> <li> <p>element: un \u00e9l\u00e9ment de l'arborescence HTML; c'est-\u00e0-dire une balise HTML avec son contenu;</p> </li> <li> <p>node: n\u0153ud de l'arborescence DOM, par exemple <code>&lt;p&gt;bonjour&lt;/p&gt;</code> est \u00e0 la fois un \u00e9l\u00e9ment et un n\u0153ud.. Par contre, <code>bonjour</code> est un n\u0153ud mais pas un \u00e9l\u00e9ment.</p> </li> </ul> <p></p> <p>Bien connaitre ces termes est n\u00e9cessaire pour comprendre les m\u00e9thodes de parcours et manipulation du DOM.</p>"},{"location":"12_jsDOM/evenement/","title":"Les \u00c9v\u00e8nements","text":"<p>Un \u00e9v\u00e9nement en JavaScript est une interaction qui se produit sur une page web, comme un clic sur un bouton, le survol d'un \u00e9l\u00e9ment ou la pression d'une touche. Les \u00e9v\u00e9nements permettent de rendre une page interactive en ex\u00e9cutant du code lorsqu'une action sp\u00e9cifique est d\u00e9tect\u00e9e. Par exemple, un clic sur un bouton peut d\u00e9clencher une fonction qui applique un style CSS ou affiche un message.</p>"},{"location":"12_jsDOM/evenement/#linterface-event","title":"L'interface Event","text":"<p>Lorsque l'utilisateur interagit avec la page web (clic, scroll,...), un \u00e9v\u00e9nement est g\u00e9n\u00e9r\u00e9 au sein du DOM. D'autres \u00e9v\u00e9nements peuvent \u00e9galement \u00eatre g\u00e9n\u00e9r\u00e9s par des API (chargement complet de la page, lecture suspendue de vid\u00e9o, ...).</p> <p>Un \u00e9v\u00e9nement ne doit pas \u00eatre confondu avec une exception.</p> <p>Pour r\u00e9agir \u00e0 un \u00e9v\u00e9nement, il faut d\u00e9finir un gestionnaire d'\u00e9v\u00e9nement (<code>event handler</code>).</p> <p>Certaines balises HTML comme <code>&lt;a&gt;</code>, <code>&lt;button&gt;</code> poss\u00e8dent un gestionnaire d'\u00e9v\u00e9nement par d\u00e9faut.</p> <p>Ces gestionnaires sont d\u00e9finis soit :</p> <ul> <li> <p>Par un attribut (voir GlobalEventHandlers):  <pre><code>O\u00f9 est &lt;span onclick=\"alert('trouv\u00e9!');\"&gt;Charly&lt;/span&gt; ?\n</code></pre></p> </li> <li> <p>Par script (m\u00e9thode <code>addEventListener</code>):  <pre><code>O\u00f9 est &lt;span id=\"charly\"&gt;Charly&lt;/span&gt; ?\n\u2026\n&lt;script&gt;\n    document.getElementById(\"charly\").addEventListener(\"click\",function(event){  alert(\"trouv\u00e9!\"); });\n&lt;/script&gt;\n</code></pre></p> </li> </ul> <p>Le gestionnaire d'\u00e9v\u00e9nement re\u00e7oit un objet Event, qui peut \u00eatre sp\u00e9cialis\u00e9 en fonction du type d'\u00e9v\u00e9nement g\u00e9n\u00e9r\u00e9.</p> <p>Gestionnaires d'\u00e9v\u00e9nements</p> <p>Visualisez la propagation d'\u00e9v\u00e9nements en survolant avec la souris les \u00e9l\u00e9ments de la liste dans l'exemple ci-dessous: https://js.do/marvi/js-dom-events Testez ensuite les diff\u00e9rentes possibilit\u00e9s pour interrompre la propagation d'\u00e9v\u00e9nements en s\u00e9lectionnant une des possibilit\u00e9s dans la liste d\u00e9roulante puis en cliquant sur le lien \"Clique sur span\".</p> <p>Veuillez lire attentivement cette excellente introduction aux \u00e9v\u00e9nements</p>"},{"location":"12_jsDOM/evenement/#suppression-de-gestionnaire-devenement","title":"Suppression de gestionnaire d'\u00e9v\u00e9nement","text":"<p>La suppression d'un gestionnaire d'\u00e9v\u00e9nement n'est possible qu'en passant la r\u00e9f\u00e9rence de la fonction activ\u00e9e lors de la capture de l'\u00e9v\u00e9nement.</p> <p>Suppression d'un gestionnaire d'\u00e9v\u00e9nement</p> <p>Consid\u00e9rez le code ci-dessous: <pre><code>&lt;button id=\"button1\"&gt;Clic clic clic!!&lt;/button&gt;\n&lt;script&gt;\n(() =&gt; {\n    document.getElementById(\"button1\").addEventListener(\"click\", () =&gt; { \n        console.log('ce gestionnaire ne peut \u00eatre retir\u00e9');\n    });\n    function consoleLog(){\n        console.log('ce gestionnaire peut \u00eatre retir\u00e9');\n        document.getElementById(\"button1\").removeEventListener(\"click\", consoleLog);\n    }\n    document.getElementById(\"button1\").addEventListener(\"click\", consoleLog);\n})();\n&lt;/script&gt;\n</code></pre> Qu'est ce qui sera affich\u00e9 en console apr\u00e8s un premier clic sur le bouton, puis apr\u00e8s un seconde clic, et pourquoi ?</p> R\u00e9ponse <p>Au premier clic, les deux gestionnaires sont appel\u00e9s; donc les deux phrases apparaissent. Cependant, l'appel \u00e0 la fonction consoleLog() retire le deuxi\u00e8me gestionnaire d'\u00e9v\u00e9nement. En cons\u00e9quence, le second clic sur le bouton ne fait appara\u00eetre que la premi\u00e8re phrase.</p>"},{"location":"12_jsDOM/evenement/#impact-dune-fonction-flechee-dans-le-gestionnaire-devenement","title":"Impact d'une fonction fl\u00e9ch\u00e9e dans le gestionnaire d'\u00e9v\u00e9nement","text":"<p>Si la fonction appel\u00e9e par le gestionnaire est d\u00e9finie par le motclef <code>function</code>, l'\u00e9l\u00e9ment \u00e0 l'origine de l'\u00e9v\u00e9nement est accessible par <code>this</code>.</p> <p>Comparaison function vs ()=&gt;</p> <p>Cr\u00e9ez le fichier events.html avec le code ci-dessous, ouvrez la page et cliquez sur un des fruits. Comparez l'effet des deux gestionnaires d'\u00e9v\u00e9nement: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Exemple d'\u00e9v\u00e8nements&lt;/title&gt;\n    &lt;script type=\"module\"&gt;\n        let fruits = ['Abricot','Banane','Fraise','Kiwi','Pomme','Poire'];\n        document.querySelector('ul').innerHTML = fruits\n            .map((fruit,i) =&gt; `&lt;li id=\"fruit${i+1}\"&gt;${fruit}&lt;/li&gt;`)\n            .join(\"\");\n        document.querySelectorAll('li').forEach(item =&gt; {\n            item.addEventListener('click', function(event) {\n                document.getElementById(\"fruit-fct\").innerHTML = this.innerHTML;\n                document.getElementById(\"id-fruit-fct\").innerHTML =`identifiant du fruit (fct): ${event.target.id}`;\n            });\n            item.addEventListener('click', (event) =&gt; {\n                document.getElementById(\"fruit-flc\").innerHTML = event.target.innerHTML;\n                document.getElementById(\"id-fruit-flc\").innerHTML = `identifiant du fruit (flc): ${this?.id}`;\n            });\n        });\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Exemples de captures d'\u00e9v\u00e8nements&lt;/h1&gt;\n    &lt;p&gt;Cliquez sur le fruit: &lt;/p&gt;\n    &lt;ul&gt;\n    &lt;/ul&gt;\n    &lt;p&gt;Fruit s\u00e9lectionn\u00e9 (fct): &lt;span id=\"fruit-fct\"&gt;&lt;/span&gt;(&lt;span id=\"id-fruit-fct\"&gt;&lt;/span&gt;)&lt;/p&gt;\n    &lt;p&gt;Fruit s\u00e9lectionn\u00e9 (=&gt; ): &lt;span id=\"fruit-flc\"&gt;&lt;/span&gt;(&lt;span id=\"id-fruit-flc\"&gt;&lt;/span&gt;)&lt;/p&gt;\n    &lt;button type=\"button\" id=\"confirmBtn\"&gt;Commander&lt;/button&gt;\n    &lt;h2&gt;Fruits command\u00e9s&lt;/h2&gt;\n    &lt;p id=\"fruits\"&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"12_jsDOM/evenement/#eviter-laccumulation-de-gestionnaires-devenements","title":"Eviter l'accumulation de gestionnaires d'\u00e9v\u00e9nements","text":"<p>Lorsqu'une application rafraichit des \u00e9l\u00e9ments de l'\u00e9cran, il y a un risque de lier une nouvelle occurrence d'un gestionnaire d'\u00e9v\u00e9nement sur un \u00e9l\u00e9ment qui en poss\u00e9de d\u00e9j\u00e0; ce qui provoque une multitude d'appels qui peut devenir exponentielle.</p> <p>Comparaison function vs ()=&gt;</p> <p>Dans le fichier events.html cr\u00e9\u00e9 pr\u00e9c\u00e9demment, imaginons que nous devons lier un gestionnaire d'\u00e9v\u00e9nement sur le bouton \"confirmBtn\" chaque fois qu'un <li> est affich\u00e9. Nous devons donc placer le code suivant quelque part dans le bloc <code>document.querySelectorAll('li').forEach(item =&gt; { })</code> : <pre><code>    document.querySelectorAll('li').forEach(item =&gt; {\n    item.addEventListener('click', function(event) {\n        document.getElementById(\"fruit-fct\").innerHTML = this.innerHTML;\n        document.getElementById(\"id-fruit-fct\").innerHTML =`identifiant du fruit (fct): ${event.target.id}`;\n    });\n    item.addEventListener('click', (event) =&gt; {\n        document.getElementById(\"fruit-flc\").innerHTML = event.target.innerHTML;\n        document.getElementById(\"id-fruit-flc\").innerHTML = `identifiant du fruit (flc): ${this?.id}`;\n    });\n    document.getElementById('confirmBtn').addEventListener('click', () =&gt; {\n        document.getElementById(\"fruits\").innerHTML += document.getElementById(\"fruit-fct\").innerHTML ;\n    });\n});\n</code></pre> Apr\u00e8s avoir s\u00e9lectionn\u00e9 un fruit, confirmez la commande et constatez l'accumulation d'appels. Que devriez vous faire, toujours en restant quelque part dans ce bloc, pour \u00e9viter cette accumulation ? R\u00e9ponse <p>Utiliser l'option {once: true} qui d\u00e9truit le gestionnaire apr\u00e8s son premier appel et lier le gestionnaire d'\u00e9v\u00e9nement chaque fois qu'un fruit est cliqu\u00e9: <pre><code>item.addEventListener('click', (event) =&gt; {\n    document.getElementById(\"fruit-flc\").innerHTML = event.target.innerHTML;\n    document.getElementById(\"id-fruit-flc\").innerHTML = `identifiant du fruit (flc): ${this?.id}`;\n    document.getElementById('confirmBtn').addEventListener('click', () =&gt; {\n        document.getElementById(\"fruits\").innerHTML += document.getElementById(\"fruit-fct\").innerHTML + \"&lt;br&lt;\";\n    }, {once: true});\n});\n</code></pre></p>"},{"location":"12_jsDOM/exemple/","title":"Mini tutoriel : Manipuler le DOM avec JavaScript","text":"<p>Nous allons illustrer quelques notions de base de la manipulation du DOM en JavaScript \u00e0 travers un petit exemple.</p>"},{"location":"12_jsDOM/exemple/#objectif-du-site","title":"Objectif du site","text":"<p>Nous allons cr\u00e9er une page contenant trois boutons :</p> <ol> <li>Afficher une phrase \u2192 affiche une phrase dans la page.</li> <li>Cacher la phrase \u2192 supprime cette phrase de la page.</li> <li>Changer le fond \u2192 change la couleur de la phrase.</li> </ol> <p>Ce petit exemple permettra de manipuler :</p> <ul> <li> <p><code>document.getElementById(\"id\")</code></p> </li> <li> <p><code>document.createElement(\"tag\")</code></p> </li> <li> <p><code>unNoeudParent.appendChild(autreNoeud)</code></p> </li> <li> <p><code>unNoeudParent.removeChild(noeudEnfant)</code></p> </li> <li> <p><code>unElement.classList.add(\"nomClasse\")</code></p> </li> </ul>"},{"location":"12_jsDOM/exemple/#structure-html","title":"Structure HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Exemple S\u00e9lecteurs JS&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Manipulation DOM simple&lt;/h1&gt;\n\n    &lt;div id=\"button-container\"&gt;\n        &lt;button id=\"btnShow\"&gt;Afficher la phrase&lt;/button&gt;\n        &lt;button id=\"btnHide\"&gt;Cacher la phrase&lt;/button&gt;\n        &lt;button id=\"btnChangeColor\"&gt;Changer la couleur&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"phrase-container\"&gt;&lt;/div&gt;\n\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explication :</p> <ul> <li> <p>Trois boutons sont d\u00e9finis avec des identifiants (id) pour pouvoir les manipuler en JavaScript.</p> </li> <li> <p>Un conteneur vide <code>#phrase-container</code> servira \u00e0 afficher dynamiquement une phrase.</p> </li> </ul>"},{"location":"12_jsDOM/exemple/#style-css","title":"Style CSS","text":"<pre><code>body {\n    font-family: Arial, sans-serif;\n    text-align: center;\n    padding: 40px;\n    background-color: white;\n}\n\n#button-container {\n    margin-bottom: 20px;\n}\n\n.phrase-style {\n    font-size: 1.5em;\n    color: #333;\n    margin-top: 20px;\n}\n</code></pre>"},{"location":"12_jsDOM/exemple/#script-javascript","title":"Script JavaScript","text":"<pre><code>const btnShow = document.getElementById(\"btnShow\");\nconst btnHide = document.getElementById(\"btnHide\");\nconst btnChangeColor = document.getElementById(\"btnChangeColor\");\nconst container = document.getElementById(\"phrase-container\");\n\nfunction afficherPhrase(){\n    if (!document.getElementById(\"phrase\")) {\n        const phrase = document.createElement(\"p\");\n        phrase.id = \"phrase\";\n        phrase.textContent = \"Bonjour, ceci est une phrase magique !\";\n        phrase.classList.add(\"phrase-style\");\n        container.appendChild(phrase);\n    }\n}\n\n// Bouton 1 : Afficher une phrase\nbtnShow.addEventListener(\"click\", afficherPhrase);\n\n// Bouton 2 : Cacher la phrase\nbtnHide.addEventListener(\"click\", () =&gt; {\n    const phrase = document.getElementById(\"phrase\");\n    if (phrase) {\n        container.removeChild(phrase);\n    }\n});\n\n// Bouton 3 : Changer la couleur de la phrase\nbtnChangeColor.addEventListener(\"click\", () =&gt; {\n    const phrase = document.getElementById(\"phrase\");\n    if (phrase) {\n        phrase.style.color = \"#0000FF\";\n    }\n});\n</code></pre> <ul> <li> <p><code>document.getElementById(...)</code> permet de r\u00e9cup\u00e9rer un \u00e9l\u00e9ment HTML.</p> </li> <li> <p><code>document.createElement(\"p\")</code> cr\u00e9e dynamiquement une balise paragraphe.</p> </li> <li> <p><code>appendChild(...)</code> ajoute cette balise dans le DOM.</p> </li> <li> <p><code>removeChild(...)</code> permet de la retirer.</p> </li> <li> <p><code>classList.add(...)</code> applique un style CSS d\u00e9fini.</p> </li> <li> <p>On modifie le style du fond via <code>style.color</code>.</p> </li> </ul>"},{"location":"12_jsDOM/exemple/#quand-on-ouvre-la-page-dans-un-navigateur","title":"Quand on ouvre la page dans un navigateur :","text":"<ul> <li> <p>Le bouton \"Afficher la phrase\" ins\u00e8re une phrase dans la page.</p> </li> <li> <p>Le bouton \"Cacher la phrase\" la supprime.</p> </li> <li> <p>Le bouton \"Changer la couleur\" modifie la couleur de la phrase.</p> </li> </ul>"},{"location":"12_jsDOM/exercice/","title":"Exercices","text":""},{"location":"12_jsDOM/exercice/#exercice-jsdom1","title":"Exercice js.dom1","text":"<p>Le BMR (Basal Metabolic Rate, en fran\u00e7ais Taux M\u00e9tabolique de Base - TMB) repr\u00e9sente la quantit\u00e9 minimale d'\u00e9nergie (exprim\u00e9e en kilocalories par jour) dont le corps a besoin pour fonctionner au repos.</p> <p>Le BMR d\u00e9pend de plusieurs facteurs :</p> <ul> <li>\u00c2ge : Plus on vieillit, plus le m\u00e9tabolisme ralentit.</li> <li>Sexe : En g\u00e9n\u00e9ral, les hommes ont un BMR plus \u00e9lev\u00e9 que les femmes en raison de leur masse musculaire plus importante.</li> <li>Poids et taille : Un corps plus grand et plus lourd n\u00e9cessite plus d'\u00e9nergie pour fonctionner.</li> </ul> <p>Pour le calculer nous utilisons la formule de Mifflin-St Jeor :</p> <ul> <li> <p>Pour les hommes : BMR = 10 * poids(kg) + 6.25 * taille (cm) + 5* \u00e2ges (ann\u00e9es) + 5</p> </li> <li> <p>Pour les femmes : BMR = 10 * poids(kg) + 6.25 * taille (cm) + 5* \u00e2ges (ann\u00e9es) - 161</p> </li> </ul> <p>Sur base du fichier HTML fournies dans l'archive \"BMR.zip\", r\u00e9aliez le calcul du BMR avec les fonctionnalit\u00e9s suivantes :</p> <ul> <li> <p>L'utilisateur encode les valeurs des diff\u00e9rents champs et appuie sur le bouton calculer, le programme affiche en vert \"Votre BMR est de xxxxx kcal/jour.\"</p> </li> <li> <p>Si il manque des informations ou si certaines ne sont pas correctes, le programme affiche en rouge \"Veuillez entrer des valeurs valides.\"</p> </li> </ul> <p></p> <p>Astuce : pour r\u00e9cup\u00e9rer les valeurs d'un champs input.</p>"},{"location":"12_jsDOM/exercice/#exercice-jsdom2","title":"Exercice js.dom2","text":"<p>Sur base du fichier HTML et des images fournies dans l'archive \"fantasy.zip\", r\u00e9alisez la visualisation d'un album photo avec les fonctionnalit\u00e9s suivantes:</p> <ul> <li> <p>Il existe 5 images nomm\u00e9es 'fantasy-1.jpg', ..., 'fantasy-5.jpg',</p> </li> <li> <p>L'album permet de voir une image en grand et d'ajouter une \u00e0 une des vignettes d'aper\u00e7u (images en petit format),</p> </li> <li> <p>Au d\u00e9part, seule la premi\u00e8re vignette est visible. L'image est affich\u00e9e \u00e9galement en grand format,</p> </li> <li> <p>Au clic sur le bouton d'ajout, une vignette suppl\u00e9mentaire est ajout\u00e9e et l'image remplace celle affich\u00e9e en grand format,</p> </li> <li> <p>\u00c0 partir de la sixi\u00e8me vignette, la suite des vignettes recommence \u00e0 1,</p> </li> <li> <p>Lorsque 10 vignettes ont \u00e9t\u00e9 affich\u00e9es, le bouton d'ajout dispara\u00eet,</p> </li> <li> <p>Au clic sur une des vignettes, son image remplace celle affich\u00e9e en grand format.</p> </li> </ul> <p></p>"},{"location":"12_jsDOM/manipuler/","title":"Manipuler le DOM","text":""},{"location":"12_jsDOM/manipuler/#la-selection","title":"La s\u00e9lection","text":"<p>La s\u00e9lection d'un \u00e9l\u00e9ment selon son identifiant (attribut id):</p> <pre><code>document.getElementById(\"id\")\n</code></pre> <p>La s\u00e9lection des \u00e9l\u00e9ments en fonction de leur nom (attribut name): <pre><code>document.getElementsByTagName(\"nom\") //retourne un it\u00e9rable HTMLCollection\n</code></pre></p> <p>La s\u00e9lection des \u00e9l\u00e9ments en fonction de leur classe CSS: <pre><code>document.getElementsByClassName(\"nom\") //retourne un it\u00e9rable HTMLCollection\n</code></pre></p> <p>La lecture d'un attribut d'un n\u0153ud: <pre><code>unNoeud.getAttribute(\"nom\")\n</code></pre></p> <p>La modification d'un attribut d'un n\u0153ud: <pre><code>unNoeud.setAttribute(\"nom\", valeur)\n</code></pre></p> <p>La s\u00e9lection du premier \u00e9l\u00e9ment respectant un s\u00e9lecteur CSS (#id, .classe, &gt;, ~, +, ...):  <pre><code>document.querySelector(\"s\u00e9lecteur CSS\")\n</code></pre></p> <p>La s\u00e9lection de tous les \u00e9l\u00e9ments respectant un s\u00e9lecteur CSS:  <pre><code>document.querySelectorAll(\"s\u00e9lecteur CSS\") //retourne un it\u00e9rable NodeList\n</code></pre></p> <p>Rappel CSS : Entrainements ludiques sur s\u00e9lecteurs et propri\u00e9t\u00e9s CSS</p> <p>https://flukeout.github.io/</p> <p>HTMLCollection</p> <p>Collection HTMLCollection qui doit \u00eatre convertie en un tableau (\"Array.from()\") pour pouvoir \u00eatre parcourue avec \"forEach\".</p> <p>NodeList</p> <p>Collection NodeList qui peut \u00eatre parcourue avec \"forEach\".</p>"},{"location":"12_jsDOM/manipuler/#creation","title":"Cr\u00e9ation","text":"<p>Cr\u00e9ation d'un n\u0153ud de texte: <pre><code>document.createTextNode(\"texte\")\n</code></pre></p> <p>Cr\u00e9ation d'un \u00e9l\u00e9ment HTML: <pre><code>document.createElement(\"tag\", contenu)\n</code></pre></p>"},{"location":"12_jsDOM/manipuler/#insertion","title":"Insertion","text":"<p>Ajout d'un n\u0153ud \u00e0 la fin des n\u0153uds enfants d'un n\u0153ud parent sp\u00e9cifi\u00e9:  <pre><code>unNoeudParent.appendChild(autreNoeud)\n</code></pre></p> <p>Ajout d'un n\u0153ud avant un autre n\u0153ud en tant qu'enfant d'un n\u0153ud parent:  <pre><code>unNoeud.insertBefore(autreNoeud, noeudParent)\n</code></pre></p> <p>Insertion d'un extrait de code HTML: <pre><code>unNoeud.insertAdjacentHTML(position, \"code HTML\")\n</code></pre></p> <p>L'argument \"position\" indique o\u00f9 ins\u00e9rer le contenu HTML:</p> <ul> <li> <p><code>beforebegin</code>: avant le n\u0153ud,</p> </li> <li> <p><code>afterbegin</code>: avant le premier enfant du n\u0153ud,</p> </li> <li> <p><code>beforeend</code>: apr\u00e8s le dernier enfant du n\u0153ud,</p> </li> <li> <p><code>afterend</code>: apr\u00e8s le n\u0153ud.</p> </li> </ul>"},{"location":"12_jsDOM/manipuler/#suppression","title":"Suppression","text":"<p>Remplacement d'un n\u0153ud enfant d'un n\u0153ud parent par un autre:  <pre><code>unNoeudParent.replaceChild(noeudEnfant, nouveauNoeud) \n</code></pre></p> <p>Suppression d'un n\u0153ud enfant d'un n\u0153ud parent:  <pre><code>unNoeudParent.removeChild(noeudEnfant)\n</code></pre></p> <p>Suppression d'un n\u0153ud:  <pre><code>unNoeud.remove()\n</code></pre></p>"},{"location":"12_jsDOM/manipuler/#contenu-html","title":"Contenu HTML","text":"<p>Acc\u00e8s et modification possible du contenu HTML d'un n\u0153ud: </p> <pre><code>unNoeud.innerHTML = `&lt;p&gt;Bonjour &lt;mark&gt;${nom}&lt;/mark&gt;, bienvenue dans ce tutoriel&lt;/p&gt;`\n</code></pre> <p>Modification du DOM</p> <p>Observez la cr\u00e9ation et la suppression de noeuds dans la liste des t\u00e2ches ci-dessous: https://js.do/marvi/js-dom-append-create</p> <p>Que pourriez-vous ajouter pour pouvoir vider compl\u00e8tement la liste des t\u00e2ches ?</p> R\u00e9ponse <p>Ajout d'un nouveau bouton et d'un gestionnaire d'\u00e9v\u00e9nements comme suit: <pre><code>&lt;form action=\"#\"&gt;\n    &lt;input type=\"hidden\" name=\"nbrTask\" value=\"1\"/&gt;\n    &lt;ul id=\"list\"&gt;\n        &lt;li&gt;&lt;input type=\"text\" name=\"task1\" value=\"Go to car-wash\"/&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;button type=\"button\" id=\"add\"&gt;Add&lt;/button&gt;\n    &lt;button type=\"button\" id=\"rem\"&gt;Remove&lt;/button&gt;\n    &lt;button type=\"button\" id=\"clear\"&gt;Clear&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;script&gt;(function setScript(){\n    let nbrTasks = parseInt(document.getElementsByName(\"nbrTask\")[0].value, 10);\n    document.getElementById(\"add\").addEventListener(\"click\",addItem);\n    document.getElementById(\"rem\").addEventListener(\"click\",removeItem);\n    document.getElementById(\"clear\").addEventListener(\"click\",function(){\n        document.getElementById(\"list\").innerHTML = '';\n    });\n\n    function removeItem(){\n    let ul = document.getElementById(\"list\");\n    ul.removeChild(ul.childNodes[ul.childNodes.length-1]);\n    };\n\n    function addItem(){\n    let ul = document.getElementById(\"list\");\n    let input = document.createElement(\"input\");\n    input.type = \"text\";\n    input.placeholder = \"new task...\";\n    input.name = \"task\" + (++nbrTasks);\n    let newLi = document.createElement(\"li\");\n    newLi.appendChild(input);\n    ul.appendChild(newLi);\n    };\n}());&lt;/script&gt;\n</code></pre></p>"},{"location":"12_jsDOM/manipuler/#manipuler-la-css","title":"Manipuler la CSS","text":"<p>Modification de l'attribut style :</p> <pre><code>unElement.style.display = \"none\"; //masquer l'\u00e9l\u00e9ment\n</code></pre> <p>Manipuler les classes CSS associ\u00e9es \u00e0 un \u00e9l\u00e9ment, utilisez la propri\u00e9t\u00e9 classList (classList sur MDN Web Doc)</p> <p><pre><code>unElement.classList.add(\"nomClasse\");\n</code></pre> La r\u00e9alisation d'animations est possible en combinant les m\u00e9thodes setTimeout() ou setInterval() \u00e0 la modification de la CSS:</p> <p>Animation en JS</p> <p>Observez l'utilisation de la fonction setTimout() et de la propri\u00e9t\u00e9 \"style\" pour r\u00e9aliser une animation CSS: https://js.do/marvi/js-dom-css-anim</p>"},{"location":"13_jsAsynchrone/","title":"Introduction","text":""},{"location":"13_jsAsynchrone/#synchrone-et-asynchrone","title":"Synchrone et asynchrone","text":"<p>En programmation, un code synchrone s'ex\u00e9cute de mani\u00e8re s\u00e9quentielle, ligne par ligne. Chaque instruction doit \u00eatre termin\u00e9e avant que la suivante ne commence. Cela signifie que si une op\u00e9ration prend du temps (comme lire un fichier ou attendre une r\u00e9ponse d'un serveur), tout le programme est bloqu\u00e9 en attendant le r\u00e9sultat.</p> <p>\u00c0 l'inverse, un code asynchrone permet d'ex\u00e9cuter plusieurs t\u00e2ches en parall\u00e8le, sans bloquer l'ex\u00e9cution du reste du programme. Pour pouvoir effectuer ces t\u00e2ches en parall\u00e8le, il faut normalement utiliser plusieurs threads diff\u00e9rents, un pour chaque actions en parall\u00e8le.</p> <p>Un thread (ou fil d'ex\u00e9cution) est l'unit\u00e9 de base permettant \u00e0 un programme d'ex\u00e9cuter des instructions. Dans un programme multithread, plusieurs threads peuvent s\u2019ex\u00e9cuter en parall\u00e8le, chacun effectuant une t\u00e2che sp\u00e9cifique. Par exemple, un thread peut g\u00e9rer l'affichage d'une interface utilisateur pendant qu'un autre r\u00e9cup\u00e8re des donn\u00e9es depuis un serveur, \u00e9vitant ainsi que l\u2019application ne se fige en attendant une r\u00e9ponse.</p>"},{"location":"13_jsAsynchrone/#javascript-modele-monothread","title":"Javascript mod\u00e8le monothread","text":"<p>En th\u00e9orie, pour ex\u00e9cuter du code asynchrone, il faudrait plusieurs threads capables de fonctionner simultan\u00e9ment. Cependant, JavaScript fonctionne sur un mod\u00e8le monothread, c'est-\u00e0-dire qu\u2019il n\u2019ex\u00e9cute qu\u2019un seul thread principal. Pour g\u00e9rer l\u2019asynchronisme sans bloquer l'ex\u00e9cution, il repose sur un m\u00e9canisme appel\u00e9 event loop et une file d\u2019attente de t\u00e2ches. Lorsqu\u2019une op\u00e9ration longue (comme un appel r\u00e9seau) est lanc\u00e9e, elle est d\u00e9l\u00e9gu\u00e9e \u00e0 des APIs externes du navigateur ou du moteur JavaScript, qui la traitent s\u00e9par\u00e9ment. Une fois termin\u00e9e, le r\u00e9sultat est ajout\u00e9 \u00e0 la file d\u2019attente et ex\u00e9cut\u00e9 d\u00e8s que le thread principal est disponible. C\u2019est ce qui permet d\u2019avoir une ex\u00e9cution non bloquante, m\u00eame sans v\u00e9ritable multithreading.</p> <p>Pour des cas plus complexes n\u00e9cessitant r\u00e9ellement plusieurs threads en JavaScript (comme des calculs intensifs), il est possible d\u2019utiliser des Web Workers, qui permettent d\u2019ex\u00e9cuter du code en arri\u00e8re-plan, ind\u00e9pendamment du thread principal. Mais, nous n'irons pas jusque l\u00e0 dans ce cours.</p> <p>En JavaScript, certaines op\u00e9rations prennent du temps avant de donner un r\u00e9sultat, comme :</p> <ul> <li> <p>R\u00e9cup\u00e9rer des donn\u00e9es d\u2019une API</p> </li> <li> <p>Lire un fichier</p> </li> <li> <p>Attendre une r\u00e9ponse d\u2019un serveur</p> </li> </ul> <p>Si on ex\u00e9cute ces t\u00e2ches de mani\u00e8re synchronis\u00e9e, JavaScript va bloquer l\u2019ex\u00e9cution du reste du programme en attendant la fin de l\u2019op\u00e9ration. Solution : JavaScript permet d\u2019ex\u00e9cuter ces t\u00e2ches de fa\u00e7on asynchrone, sans bloquer le reste du code.</p>"},{"location":"13_jsAsynchrone/#settimeout","title":"setTimeout","text":"<p>Javascript poss\u00e8de plusieurs fonctions asynchrone, la plus connue d'entre-elles est la fonction <code>setTimeout(fct, ms)</code>. Celle-ci va ex\u00e9cuter une fonction apr\u00e8s un certains d\u00e9lai exprim\u00e9 en millisecondes.</p> <p>Essayez ce code. </p> <p><pre><code>function afficherMessage() {\n    document.getElementById(\"message\").textContent = \"Attendez 3 secondes...\";\n    setTimeout(() =&gt; {\n        document.getElementById(\"message\").textContent = \"Temps \u00e9coul\u00e9 !\";\n    }, 3000);\n}\n</code></pre> Ce code d\u00e9finit une fonction <code>afficherMessage()</code>, quand elle est appell\u00e9e, elle fait appara\u00eetre un premier texte et puis lancer un <code>setTimeout</code>. Ce dernier appelle une autre fonction qui va changer le texte du message, mais cette fonction ne va s'exc\u00e9cuter que 3 secondes (3000 millisecondes) apr\u00e8s l'appui sur le bouton.</p> <p>Essayez ensuite cette version.</p> <pre><code>function afficherMessage(){\n  afficherMessage1();\n  afficherMessage2();\n}\n\nfunction afficherMessage1() {\n            document.getElementById(\"message\").textContent = \"Attendez 3 secondes...\";\n            setTimeout(() =&gt; {\n                document.getElementById(\"message\").textContent = \"Temps \u00e9coul\u00e9 !\";\n            }, 3000);\n        }\n\nfunction afficherMessage2(){\n  document.getElementById(\"message2\").textContent=\"Hellow World !\"\n}\n</code></pre> <p>Dans cette exemple, malgr\u00e9 que la fonction <code>afficherMessage</code> appelle en premier lieux la fonction <code>afficherMessage1</code>, le code n'attends pas qu'elle soit termin\u00e9e (que \"Temps \u00e9coul\u00e9 !\" soit affich\u00e9) pour lancer la seconde fonction <code>afficherMessage2</code>.</p>"},{"location":"13_jsAsynchrone/#gestion-des-erreurs","title":"Gestion des erreurs","text":"<p>Pour g\u00e9rer les erreurs, il est courant d'utiliser des fonctions nomm\u00e9es callbacks. Un callback est une fonction pass\u00e9e en argument \u00e0 une autre fonction pour \u00eatre ex\u00e9cut\u00e9e plus tard, souvent en r\u00e9ponse \u00e0 un \u00e9v\u00e9nement ou apr\u00e8s une op\u00e9ration asynchrone. Les callbacks sont couramment utilis\u00e9s dans les fonctions comme setTimeout. Ils permettent d'ex\u00e9cuter du code une fois qu'une t\u00e2che est termin\u00e9e, mais peuvent rendre le code difficile \u00e0 lire lorsqu'ils sont imbriqu\u00e9s (c'est ce qu'on appelle le callback hell). Aujourd\u2019hui, les promesses et async/await sont pr\u00e9f\u00e9r\u00e9s pour simplifier la gestion du code asynchrone. C'est pourquoi, nous n'allons pas rentrer dans les d\u00e9tails de ces callbacks ici. </p>"},{"location":"13_jsAsynchrone/asynch/","title":"Async/await","text":""},{"location":"13_jsAsynchrone/asynch/#asyncawait-une-syntaxe-simple-et-lisible","title":"async/await : Une syntaxe simple et lisible","text":"<p>Malgr\u00e9 leur efficactit\u00e9, les <code>promises</code> (<code>.then()</code>, <code>.catch()</code>) peuvent rendre le code difficile \u00e0 lire. Avec <code>async</code>/<code>await</code>, on peut \u00e9crire du code asynchrone qui ressemble \u00e0 du code synchrone.</p> <ol> <li> <p>async permet de d\u00e9finir une fonction asynchrone.</p> </li> <li> <p>await met une pause dans la fonction jusqu'\u00e0 ce que la promesse soit r\u00e9solue.</p> </li> </ol>"},{"location":"13_jsAsynchrone/asynch/#exemple","title":"Exemple","text":"<p><pre><code>async function getData() {\n    console.log(\"Chargement des donn\u00e9es...\");\n    let response = await fetch(\"https://jsonplaceholder.typicode.com/posts/1\");\n    let data = await response.json();\n\n    console.log(\"Donn\u00e9es re\u00e7ues :\", data);\n}\n\ngetData(); \nconsole.log(\"Autre code qui continue sans attendre !\");\n</code></pre> Cliquez ici pour essayer le code.</p> <p>Dans cette exemple, <code>fetch()</code> est une fonction asynchrone qui retourne une promesse. <code>await</code> attend que la r\u00e9ponse soit re\u00e7ue avant de continuer le reste de la fonction <code>getData()</code>. Mais le reste du code hors de la fonction <code>getData()</code> continue de s'ex\u00e9cuter normalement. C'est pour cela que la ligne <code>console.log(\"Autre code qui continue sans attendre !\");</code> s'ex\u00e9cute avant que les donn\u00e9es soient receptionn\u00e9es.</p> <p>L'utilsiation de ces <code>async</code>/<code>await</code> permet d'\u00e9crire facilement des codes asynchrones de fa\u00e7on simple et lisible. Ils permettent aussi d'\u00e9viter l'encha\u00eenement compliqu\u00e9 que peut avoir les promesses. Le dernier atout de cette fa\u00e7on de programmer de l'asynchrone est qu'il est facile \u00e0 d\u00e9boguer avec des <code>try...catch</code></p>"},{"location":"13_jsAsynchrone/asynch/#gestion-des-erreurs-avec-trycatch","title":"Gestion des erreurs avec try/catch","text":"<p>Si l'API ne r\u00e9pond pas, elle peut potentiellement faire crasher tout le code JS. Il est donc important de bien g\u00e9rer les erreurs quand on utilise des outils ext\u00e9rieurs. Pour cel\u00e0, on peut les g\u00e9rer assez simplement avec <code>try</code>/<code>catch</code>(voir chapitre Gestion des exceptions).</p>"},{"location":"13_jsAsynchrone/asynch/#exemple_1","title":"Exemple","text":"<pre><code>async function getData() {\n    try {\n        let response = await fetch(\"https://jsonplaceholder.typicode.com/invalid-url\"); // URL invalide\n        if (!response.ok) {\n            throw new Error(\"Erreur lors du chargement des donn\u00e9es !\");\n        }\n        let data = await response.json();\n        console.log(\"Donn\u00e9es re\u00e7ues :\", data);\n    } catch (error) {\n        console.error(\"Probl\u00e8me d\u00e9tect\u00e9 :\", error.message);\n    }\n}\n\ngetData();\nconsole.log(\"Autre code qui continue sans attendre !\");\n</code></pre> <p>Dans ce cas, si un probl\u00e8me intervient lors du <code>fetch</code>, une exception est lanc\u00e9e avec <code>throw</code> et est ensuite attrap\u00e9e dans le <code>catch</code>. Ceci permet de g\u00e9rer prorpement les erreurs. </p>"},{"location":"13_jsAsynchrone/asynch/#exemple-du-lance-de-de","title":"Exemple du lanc\u00e9 de d\u00e9","text":"<p>\u00c0 la section pr\u00e9c\u00e9dente nous avions vu ce code :</p> <pre><code>document.getElementById(\"launch\").addEventListener(\"click\", () =&gt; {\n    let output = document.getElementById(\"output\");\n\n    let resultat = new Promise(function(resolve, reject){\n        setTimeout(() =&gt; {\n            let a = Math.round(Math.random() * 10);\n            a % 2 === 0 ? resolve(a) : reject(a);\n        }, 3000);\n    });\n\n    output.textContent = \"Promesse en attente...\";\n\n    resultat.then(function(value){\n        output.textContent = Promesse r\u00e9solue : nombre pair ${value};\n    }).catch(function(error){\n        output.textContent = Promesse rejet\u00e9e : nombre impair ${error};\n    });\n});\n</code></pre> <p>Voyons comment nous pouvons le transformer pour utiliser <code>async</code>/<code>await</code> :</p> <pre><code>document.getElementById(\"launch\").addEventListener(\"click\", async () =&gt; {\n    let output = document.getElementById(\"output\");\n\n    // Fonction qui simule une promesse avec un d\u00e9lai\n    function lancerDe() {\n        return new Promise((resolve, reject) =&gt; {\n            setTimeout(() =&gt; {\n                let a = Math.round(Math.random() * 10);\n                a % 2 === 0 ? resolve(a) : reject(a);\n            }, 3000);\n        });\n    }\n\n    output.textContent = \"Promesse en attente...\";\n\n    try {\n        // Attente de la r\u00e9solution de la promesse\n        let resultat = await lancerDe();\n        output.textContent = `Promesse r\u00e9solue : nombre pair ${resultat}`;\n    } catch (error) {\n        // Gestion de l'erreur si la promesse est rejet\u00e9e\n        output.textContent = `Promesse rejet\u00e9e : nombre impair ${error}`;\n    }\n});\n</code></pre> <p>Vous pouvez essayer ce code ici. Plut\u00f4t que d\u00e9finir directement un objet qui est une promesse, on cr\u00e9e une fonction qui retourne une promesse, ceci nous permettra d'utiliser le mot-cl\u00e9 <code>await</code>. Il faut \u00e9galement bien pr\u00e9ciser que notre fonction anonyme est une fonction <code>async</code>. Il nous suffit ensuite d'appeler notre fonction <code>lancerDe()</code> dans un <code>try</code>, si une erreur survient, elle sera attrap\u00e9e dans le <code>catch</code>, c'est similaire \u00e0 une fa\u00e7on de faire synchrone.</p>"},{"location":"13_jsAsynchrone/exercice/","title":"Exercice","text":""},{"location":"13_jsAsynchrone/exercice/#exercice-1-creation-dun-compteur-dynamique","title":"Exercice 1 : Cr\u00e9ation d'un compteur dynamique","text":"<p>Commencez par r\u00e9cup\u00e9rer le code HTML et CSS ici.</p> <p>L'objectif est d'\u00e9crire un code permettant de faire incr\u00e9menter le compteur de 1 \u00e0 chaque seconde. Quand l'utilisateur le souhaite, il peut cliquer sur le bouton \"Ajouter 10\" pour que le compteur s'incr\u00e9mente directement de 10. Le bouton \"Red\u00e9marrer\" r\u00e9initialise le compteur \u00e0 0.</p> <p>Question</p> <p>Doit on utiliser le mot cl\u00e9 <code>async</code> ici ? Pourquoi ?</p> Astuce <p>Pour r\u00e9soudre ce probl\u00e8me, vous pouvez utiliser <code>setTimeout</code>. Mais il est aussi possible d'utiliser une autre fonction asynchrone : <code>setInterval</code> voir la documentation.</p>"},{"location":"13_jsAsynchrone/exercice/#exercice-2-fake-download","title":"Exercice 2 : Fake Download","text":"<p>Commencez par r\u00e9cup\u00e9rer le code HTML et CSS ici.</p> <p>Le fichier HTMl contient 5 vignettes. Au d\u00e9part, dans ces vignettes, seul un bouton \"t\u00e9l\u00e9chargement\" est visible. Votre objectif est que quand l'utilisateur clique sur l'un de ces boutons, celui-ci dispara\u00eet et pour le remplacer appara\u00eet une barre de t\u00e9l\u00e9chargement ainsi que le pourcentage 0%. </p> <p></p> <p>\u00c0 chaque seconde, la barre de t\u00e9l\u00e9chargement et le nombre augmentent de 10%. </p> <p></p> <p>Quand la barre de t\u00e9l\u00e9chargement est compl\u00e8te et donc que le nombre est arriv\u00e9 \u00e0 100% ceux-ci disparaissent et laissent place \u00e0 l'image. </p> <p></p> <p>L'id\u00e9e est que ce comportement soit asynchrone de telle sorte que l'utilisateur peut appuyer sur d'autres boutons t\u00e9l\u00e9chargement pendant le t\u00e9l\u00e9chargement d'une image.</p> <p></p> <p>R\u00e9alisez le code JavaScript pour obtenir ce comportement, utiliser <code>async</code> et <code>await</code>.</p> Astuce <p>Pour faire grandir la barre de t\u00e9l\u00e9chargement, vous pouvez faire en sorte que son <code>width</code> augmente de 10% \u00e0 chaque seconde.</p>"},{"location":"13_jsAsynchrone/promesse/","title":"Les promesses","text":"<p>Une promesse est un objet <code>Promise</code> qui permet une simplification de l'\u00e9criture de fonctions asynchrones. Un objet Promise est instanci\u00e9 en lui fournissant en argument la fonction asynchrone \u00e0 ex\u00e9cuter qui prend elle-m\u00eame en arguments la fonction callback \u00e0 ex\u00e9cuter en cas de succ\u00e8s (<code>resolve</code>) et celle \u00e0 ex\u00e9cuter en cas d'erreur (<code>reject</code>).</p> <p>Essayez ce code</p> <pre><code>document.getElementById(\"launch\").addEventListener(\"click\", () =&gt; {\n    let output = document.getElementById(\"output\");\n\n    let resultat = new Promise(function(resolve, reject){\n        setTimeout(() =&gt; {\n            let a = Math.round(Math.random() * 10);\n            a % 2 === 0 ? resolve(a) : reject(a);\n        }, 3000);\n    });\n\n    output.textContent = \"Promesse en attente...\";\n\n    resultat.then(function(value){\n        output.textContent = `Promesse r\u00e9solue : nombre pair ${value}`;\n    }).catch(function(error){\n        output.textContent = `Promesse rejet\u00e9e : nombre impair ${error}`;\n    });\n});\n</code></pre> op\u00e9rateur ternaire '?' <p>Cette ligne : <pre><code>a % 2 === 0 ? resolve(a) : reject(a);\n</code></pre> est totalement \u00e9quivalente \u00e0 ce code  <pre><code>if (a % 2 === 0) {\n    resolve(a);\n} else {\n    reject(a);\n}\n</code></pre> Pour all\u00e9ger l'\u00e9criture, on utilise l'op\u00e9rateur ternaire '?' qui nous permet de r\u00e9sumer ce if/else en une seule ligne.</p> <p>Ce code ajoute un gestionnaire d\u2019\u00e9v\u00e9nements au bouton avec l\u2019ID \"launch\", de sorte que chaque fois qu\u2019on clique dessus, une promesse est cr\u00e9\u00e9e et ex\u00e9cut\u00e9e. Cette promesse simule un tirage al\u00e9atoire d\u2019un nombre entre 0 et 10 apr\u00e8s un d\u00e9lai de 3 secondes (<code>setTimeout</code>). Si le nombre est pair, la promesse est r\u00e9solue (<code>resolve</code>), sinon elle est rejet\u00e9e (<code>reject</code>). Avant l\u2019attente, le texte du paragraphe avec l\u2019ID \"output\" est mis \u00e0 jour pour indiquer que la promesse est en attente. Ensuite, lorsque la promesse se termine, si elle est r\u00e9solue, le message affiche la valeur paire obtenue, et si elle est rejet\u00e9e, il indique que la valeur est impaire.</p> <p>Une promesse est donc un objet qui repr\u00e9sente la r\u00e9ussite ou l\u2019\u00e9chec d\u2019une op\u00e9ration asynchrone. Voici comment elle est construite :</p>"},{"location":"13_jsAsynchrone/promesse/#creation-de-la-promesse","title":"Cr\u00e9ation de la promesse","text":"<p>Une promesse est instanci\u00e9e avec <code>new Promise(function(resolve, reject) {...})</code>. Elle prend en param\u00e8tre une fonction qui a deux arguments :</p> <ul> <li> <p>resolve(value): \u00e0 appeler lorsque l\u2019op\u00e9ration r\u00e9ussit.</p> </li> <li> <p>reject(error): \u00e0 appeler lorsque l\u2019op\u00e9ration \u00e9choue.</p> </li> </ul> <p>Dans l'exemple il s'agit de cette partie :</p> <pre><code>let resultat = new Promise(function(resolve, reject) {\n    setTimeout(() =&gt; {\n        let a = Math.round(Math.random() * 10);\n        a % 2 === 0 ? resolve(a) : reject(a);\n    }, 3000);\n});\n</code></pre> <p>La fonction g\u00e9n\u00e8re un nombre al\u00e9atoire entre 0 et 10 apr\u00e8s un d\u00e9lai de 3 secondes.</p> <ul> <li> <p>Si ce nombre est pair, <code>resolve(a)</code> est appel\u00e9 : la promesse est r\u00e9ussie.</p> </li> <li> <p>Si ce nombre est impair, <code>reject(a)</code> est appel\u00e9 : la promesse est rejet\u00e9e.</p> </li> </ul>"},{"location":"13_jsAsynchrone/promesse/#utilisation-de-la-promesse","title":"Utilisation de la promesse","text":"<p>Une fois cr\u00e9\u00e9e, la promesse est utilis\u00e9e avec .then() et .catch() :</p> <pre><code>resultat.then(function(value){\n    output.textContent = `Promesse r\u00e9solue : nombre pair ${value}`;\n}).catch(function(error){\n    output.textContent = `Promesse rejet\u00e9e : nombre impair ${error}`;\n});\n</code></pre> <ul> <li> <p><code>.then()</code> est ex\u00e9cut\u00e9 si la promesse est r\u00e9solue (succ\u00e8s).</p> </li> <li> <p><code>.catch()</code> est ex\u00e9cut\u00e9 si la promesse est rejet\u00e9e (\u00e9chec).</p> </li> </ul> <p>Cela permet de g\u00e9rer le r\u00e9sultat sans bloquer l\u2019ex\u00e9cution du programme, et d\u2019attendre la fin du traitement asynchrone. C'est donc la m\u00e9thode <code>then()</code> de l'objet Promise qui permet de d\u00e9finir la fonction \"resolve\" et donc, en d'autres termes, d'exploiter le r\u00e9sultat de la fonction asynchrone. Quand au <code>catch()</code> il peremettra d'attraper l'erreur si la promesse \u00e0 \u00e9chou\u00e9.</p> <p>Il existe beaucoup d'autres m\u00e9thodes des promesses qui peuvent permettre des comportement plus complexes. Plus d'informations ici.</p>"},{"location":"14_NodeBase/","title":"Introduction","text":""},{"location":"14_NodeBase/#11-frontend-backend","title":"1.1 Frontend &amp; Backend","text":"<p>Jusqu'\u00e0 pr\u00e9sent, nous avons uniquement travaill\u00e9 sur la partie visible d\u2019un site web, c\u2019est-\u00e0-dire le frontend. Le frontend correspond \u00e0 tout ce que voit et utilise l\u2019utilisateur dans son navigateur : les pages HTML, le style avec CSS, les interactions dynamiques avec JavaScript, etc.</p> <p>Mais un site web moderne ne se limite pas \u00e0 cela. Il interagit tr\u00e8s souvent avec une partie invisible, qui tourne en arri\u00e8re-plan sur une machine distante : c\u2019est ce que l\u2019on appelle le backend.</p> <p>Le backend est responsable de nombreuses t\u00e2ches essentielles :</p> <ul> <li> <p>Stocker et r\u00e9cup\u00e9rer des donn\u00e9es depuis une base de donn\u00e9es</p> </li> <li> <p>Appliquer des r\u00e8gles de gestion (authentification, calculs, logique m\u00e9tier\u2026)</p> </li> <li> <p>R\u00e9pondre aux demandes envoy\u00e9es par le frontend (ex : afficher un profil, envoyer un message\u2026)</p> </li> </ul> <p>Alors que le frontend s\u2019ex\u00e9cute dans le navigateur de l\u2019utilisateur, le backend s\u2019ex\u00e9cute sur un serveur. Le serveur peut \u00eatre un ordinateur dans un datacenter, ou m\u00eame votre propre PC pendant la phase de d\u00e9veloppement.</p> <p>Sur l\u2019image ci-dessous, vous pouvez voir comment un client se connecte \u00e0 un serveur. Il envoie d\u2019abord une requ\u00eate HTTP ou HTTPS pour demander au serveur d\u2019obtenir la page web (frontend). Le serveur traite cette demande via le backend, puis renvoie au client la page web (c\u2019est-\u00e0-dire le frontend : HTML, CSS, JS) par une r\u00e9ponse HTTP ou HTTPS.</p> <p></p> <p>Dans ce cours, nous allons d\u00e9couvrir et cr\u00e9er notre premier backend. Jusqu\u2019\u00e0 pr\u00e9sent, notre site ne communiquait avec aucun serveur. Tout se passait c\u00f4t\u00e9 navigateur. Nous allons maintenant ajouter cette couche serveur, et voir comment elle peut r\u00e9agir aux demandes du frontend, pour produire un site plus dynamique et connect\u00e9.</p> <p>Pour que le client (le navigateur) et le serveur puissent communiquer, ils utilisent un protocole : c\u2019est ce qu\u2019on appelle HTTP (HyperText Transfer Protocol). Ce protocole permet d\u2019envoyer des requ\u00eates (demandes) et de recevoir des r\u00e9ponses, sous forme de textes, de fichiers, de donn\u00e9es JSON, etc.</p> <p>Lorsque vous ouvrez un site web, votre navigateur envoie une requ\u00eate HTTP au serveur (ex. : \"donne-moi la page d\u2019accueil\"), et le serveur r\u00e9pond avec le contenu demand\u00e9.</p> <p>Il existe une version s\u00e9curis\u00e9e de ce protocole, appel\u00e9e HTTPS (HTTP Secure), qui ajoute un chiffrement des donn\u00e9es gr\u00e2ce \u00e0 un certificat SSL. Cela signifie que les informations \u00e9chang\u00e9es entre le client et le serveur sont crypt\u00e9es, donc prot\u00e9g\u00e9es contre les interceptions (ce qui est essentiel pour des donn\u00e9es sensibles comme les mots de passe, les coordonn\u00e9es bancaires, etc.).</p>"},{"location":"14_NodeBase/#12-nodejs-comme-solution-backend","title":"1.2 Node.js comme solution Backend","text":"<p>Maintenant que l\u2019on comprend mieux ce qu\u2019est le backend, la question est : avec quoi peut-on le construire ?</p> <p>Il existe plusieurs technologies permettant de cr\u00e9er un serveur backend (comme PHP, Python avec Django ou Flask, Ruby, Java, etc.), mais dans ce cours, nous allons utiliser une technologie moderne et populaire : Node.js.</p> <p>Node.js est un environnement d\u2019ex\u00e9cution JavaScript c\u00f4t\u00e9 serveur. Autrement dit, il nous permet d\u2019utiliser le m\u00eame langage que dans le navigateur (JavaScript) pour faire fonctionner un serveur. C\u2019est une grande force pour nous, car nous avons d\u00e9j\u00e0 appris \u00e0 \u00e9crire du JavaScript c\u00f4t\u00e9 client : nous allons donc pouvoir r\u00e9utiliser ce que nous connaissons !</p> <p>Avec Node.js, nous allons pouvoir : - Cr\u00e9er un serveur capable de recevoir et de r\u00e9pondre \u00e0 des requ\u00eates HTTP ou HTTPS ; - Traiter ces requ\u00eates (par exemple, comprendre ce que demande un utilisateur, analyser un formulaire, g\u00e9n\u00e9rer une r\u00e9ponse) ; - Et plus tard, connecter notre serveur \u00e0 une base de donn\u00e9es, ou \u00e0 d\u2019autres services.</p> <p>Node.js est aujourd\u2019hui utilis\u00e9 par de nombreuses grandes entreprises pour faire fonctionner des sites web modernes. C\u2019est une solution rapide, l\u00e9g\u00e8re et efficace, particuli\u00e8rement bien adapt\u00e9e pour cr\u00e9er des API (des interfaces permettant \u00e0 des sites web ou des applications de communiquer avec un serveur).</p> <p>Dans les prochaines sections, nous allons installer Node.js sur notre machine, puis commencer \u00e0 \u00e9crire nos premiers programmes c\u00f4t\u00e9 serveur.</p>"},{"location":"14_NodeBase/#13-architecture-web","title":"1.3 Architecture web","text":"<p>Pour bien comprendre comment un site web fonctionne dans son ensemble, il est utile d\u2019avoir une vision d\u2019ensemble de l\u2019architecture web classique. Un site web moderne est souvent constitu\u00e9 de plusieurs parties qui travaillent ensemble :</p> <ol> <li> <p>Le client    C\u2019est ce que l\u2019utilisateur utilise : un navigateur (comme Chrome, Firefox, etc.). Il envoie des requ\u00eates au serveur (par exemple, \"je veux voir la page d\u2019accueil\", ou \"je veux m\u2019inscrire\"), et re\u00e7oit des r\u00e9ponses (du texte, des images, des donn\u00e9es...).</p> </li> <li> <p>Le serveur (backend)    C\u2019est la machine qui re\u00e7oit les requ\u00eates du client, les comprend, ex\u00e9cute la logique n\u00e9cessaire, puis envoie une r\u00e9ponse.    Le serveur peut, par exemple, v\u00e9rifier un mot de passe, enregistrer un message, ou r\u00e9cup\u00e9rer des informations dans une base de donn\u00e9es.</p> </li> <li> <p>La base de donn\u00e9es    C\u2019est l\u2019endroit o\u00f9 l\u2019on stocke les donn\u00e9es du site : comptes utilisateurs, messages, produits, etc.    Le serveur est le seul \u00e0 pouvoir acc\u00e9der \u00e0 la base de donn\u00e9es : le client ne peut pas y acc\u00e9der directement (pour des raisons de s\u00e9curit\u00e9).</p> </li> </ol> <p>L\u2019image ci-dessous montre un client naviguant sur un site web, souhaitant soumettre un formulaire (par exemple, pour cr\u00e9er un compte). Le formulaire est envoy\u00e9 au serveur via une requ\u00eate HTTP ou HTTPS. Le serveur traite cette demande c\u00f4t\u00e9 backend : si le formulaire est correctement rempli, les informations sont enregistr\u00e9es dans une base de donn\u00e9es. Ensuite, le serveur renvoie une r\u00e9ponse au client pour lui indiquer que les donn\u00e9es ont bien \u00e9t\u00e9 sauvegard\u00e9es.</p> <p></p> <p>Cette s\u00e9paration permet de mieux organiser le code et de s\u00e9curiser les donn\u00e9es. Le client s\u2019occupe uniquement de l\u2019affichage et des interactions utilisateur, tandis que le serveur g\u00e8re la logique et l\u2019acc\u00e8s aux donn\u00e9es.</p>"},{"location":"14_NodeBase/exercice/","title":"Exercice","text":""},{"location":"14_NodeBase/exercice/#mini-blog-partie-1","title":"Mini-blog (partie 1)","text":"<p>Nous allons maintenant commencer un petit projet qui va \u00e9voluer au fil des s\u00e9ances : la cr\u00e9ation d\u2019un mini-site de blog.</p> <p>Ce site ne sera pas encore totalement fonctionnel pour l\u2019instant : vous allez poser les bases de l\u2019interface, et configurer le serveur Express pour que le site s\u2019affiche correctement.</p>"},{"location":"14_NodeBase/exercice/#structure-attendue-du-projet","title":"Structure attendue du projet","text":"<pre><code>mini-blog/\n \u251c\u2500\u2500 public/ \n \u2502      \u251c\u2500\u2500 css/ \n \u2502      \u2502 \u2514\u2500\u2500 style.css \n \u2502      \u251c\u2500\u2500 index.html \n \u2502      \u251c\u2500\u2500 article.html \n \u2502      \u2514\u2500\u2500 ajout.html \n \u2514\u2500\u2500 server.js\n</code></pre> <p>Votre seul travail est d\u2019\u00e9crire le fichier <code>server.js</code>.</p> <p>Voici les diff\u00e9rrents fichiers du frontend :</p>"},{"location":"14_NodeBase/exercice/#fichier-indexhtml","title":"Fichier <code>index.html</code>","text":"<pre><code>```html\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Accueil - Blog&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Mon mini blog&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;a href=\"/index.html\"&gt;Accueil&lt;/a&gt; |\n      &lt;a href=\"/ajout.html\"&gt;Ajouter un article&lt;/a&gt;\n    &lt;/nav&gt;\n  &lt;/header&gt;\n\n  &lt;main&gt;\n    &lt;section class=\"articles-container\"&gt;\n      &lt;article&gt;\n        &lt;h2&gt;Titre de l'article 1&lt;/h2&gt;\n        &lt;p&gt;Contenu de l'article 1...&lt;/p&gt;\n        &lt;a href=\"/article.html\"&gt;Lire la suite&lt;/a&gt;\n      &lt;/article&gt;\n      &lt;article&gt;\n        &lt;h2&gt;Titre de l'article 2&lt;/h2&gt;\n        &lt;p&gt;Contenu de l'article 2...&lt;/p&gt;\n        &lt;a href=\"/article.html\"&gt;Lire la suite&lt;/a&gt;\n      &lt;/article&gt;\n    &lt;/section&gt;\n  &lt;/main&gt;\n\n  &lt;footer&gt;\n    &lt;p&gt;&amp;copy; 2025 - Mon mini blog&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"14_NodeBase/exercice/#fichier-articlehtml","title":"Fichier <code>article.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Article&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Mon mini blog&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;a href=\"/index.html\"&gt;Accueil&lt;/a&gt; |\n      &lt;a href=\"/ajout.html\"&gt;Ajouter un article&lt;/a&gt;\n    &lt;/nav&gt;\n  &lt;/header&gt;\n\n  &lt;main&gt;\n    &lt;h2&gt;Titre de l'article&lt;/h2&gt;\n    &lt;p&gt;Voici le contenu d\u00e9taill\u00e9 de l'article.&lt;/p&gt;\n  &lt;/main&gt;\n\n  &lt;footer&gt;\n    &lt;p&gt;&amp;copy; 2025 - Mon mini blog&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"14_NodeBase/exercice/#fichier-ajouthtml","title":"Fichier <code>ajout.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Ajouter un article&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Mon mini blog&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;a href=\"/index.html\"&gt;Accueil&lt;/a&gt; |\n      &lt;a href=\"/ajout.html\"&gt;Ajouter un article&lt;/a&gt;\n    &lt;/nav&gt;\n  &lt;/header&gt;\n\n  &lt;main&gt;\n    &lt;h2&gt;Ajouter un nouvel article&lt;/h2&gt;\n    &lt;form&gt;\n      &lt;label for=\"titre\"&gt;Titre :&lt;/label&gt;\n      &lt;input type=\"text\" id=\"titre\" name=\"titre\"&gt;\n\n      &lt;label for=\"contenu\"&gt;Contenu :&lt;/label&gt;\n      &lt;textarea id=\"contenu\" name=\"contenu\" rows=\"5\"&gt;&lt;/textarea&gt;\n\n      &lt;button type=\"submit\"&gt;Publier&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/main&gt;\n\n  &lt;footer&gt;\n    &lt;p&gt;&amp;copy; 2025 - Mon mini blog&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"14_NodeBase/exercice/#fichier-stylecss-dans-publiccss","title":"Fichier <code>style.css</code> (dans /public/css/)","text":"<pre><code>* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml, body {\n  height: 100%;\n  font-family: Arial, sans-serif;\n  background-color: #f9f9f9;\n  display: flex;\n  flex-direction: column;\n}\n\nheader, footer {\n  background-color: #f5f5f5;\n  text-align: center;\n  padding: 20px;\n  flex-shrink: 0;\n}\n\nnav a {\n  margin: 0 10px;\n  text-decoration: none;\n  color: #333;\n}\n\nmain {\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n}\n\n.articles-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n}\n\narticle {\n  background-color: white;\n  border-radius: 8px;\n  padding: 15px;\n  width: 300px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nform {\n  background-color: white;\n  border-radius: 8px;\n  padding: 20px;\n  max-width: 400px;\n  margin: 0 auto;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n}\n\nform input[type=\"text\"],\nform textarea {\n  width: 100%;\n  padding: 8px;\n  margin-top: 5px;\n  margin-bottom: 15px;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n  font-size: 14px;\n}\n\nform button {\n  padding: 10px 20px;\n  background-color: #336699;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nform button:hover {\n  background-color: #2b5c8a;\n}\n</code></pre> <p>Cr\u00e9ez un fichier <code>server.js</code> contenant un serveur Express qui :</p> <ul> <li> <p>Sert les fichiers du dossier <code>public/</code></p> </li> <li> <p>Permet d\u2019acc\u00e9der aux 3 pages HTML depuis le navigateur</p> </li> </ul> <p>Lorsque vous ouvrez <code>http://localhost:3000</code>, la page d\u2019accueil doit s\u2019afficher correctement avec son style.</p> Astuce <p>La solution est quelque part dans le tutoriel de la page pr\u00e9c\u00e9dente.</p>"},{"location":"14_NodeBase/express/","title":"Express","text":""},{"location":"14_NodeBase/express/#31-express-pour-faciliter","title":"3.1 Express pour faciliter","text":"<p>Dans la partie pr\u00e9c\u00e9dente, nous avons cr\u00e9\u00e9 un serveur Node.js sans outil externe, en utilisant uniquement les fonctionnalit\u00e9s de base fournies par Node.js.</p> <p>C\u2019est une tr\u00e8s bonne fa\u00e7on de comprendre ce qui se passe \"sous le capot\", mais vous avez peut-\u00eatre remarqu\u00e9 que cela demande pas mal d'efforts, m\u00eame pour un petit projet : - Il faut g\u00e9rer manuellement les chemins vers les fichiers ; - D\u00e9terminer le type de contenu \u00e0 envoyer (HTML, CSS, JSON\u2026) ; - Lire les fichiers \u00e0 la main avec <code>fs.readFile</code> ; - Et \u00e9crire beaucoup de code, m\u00eame pour des actions simples.</p> <p>Heureusement, la communaut\u00e9 JavaScript a d\u00e9velopp\u00e9 des outils qui simplifient tout \u00e7a, et l\u2019un des plus populaires s\u2019appelle Express.</p>"},{"location":"14_NodeBase/express/#quest-ce-quexpress","title":"Qu\u2019est-ce qu\u2019Express ?","text":"<p>Express est ce qu\u2019on appelle un framework : c\u2019est un ensemble d\u2019outils et de fonctionnalit\u00e9s qui viennent se greffer \u00e0 Node.js pour faciliter la cr\u00e9ation de serveurs web.</p> <p>Concr\u00e8tement, Express nous permet :</p> <ul> <li> <p>de cr\u00e9er un serveur plus rapidement ;</p> </li> <li> <p>de d\u00e9finir des routes (pages, API\u2026) de mani\u00e8re plus lisible ;</p> </li> <li> <p>d\u2019envoyer facilement des fichiers, des donn\u00e9es JSON ou du HTML ;</p> </li> <li> <p>et de ne pas r\u00e9\u00e9crire toujours le m\u00eame code pour des t\u00e2ches courantes.</p> </li> </ul>"},{"location":"14_NodeBase/express/#pourquoi-utiliser-express-dans-ce-cours","title":"Pourquoi utiliser Express dans ce cours ?","text":"<p>Dans un contexte professionnel, les d\u00e9veloppeurs utilisent tr\u00e8s souvent Express pour gagner du temps et \u00e9viter les erreurs. Et dans notre cas, avec le nombre limit\u00e9 de s\u00e9ances dont nous disposons, Express va nous permettre :</p> <ul> <li> <p>d\u2019aller plus vite ;</p> </li> <li> <p>de nous concentrer sur l\u2019essentiel : comprendre comment fonctionne un serveur ;</p> </li> <li> <p>et de construire des projets concrets sans trop de complexit\u00e9 technique.</p> </li> </ul> <p>Tu peux voir Express comme une bo\u00eete \u00e0 outils qui rend la construction d\u2019un serveur plus simple, plus propre, et plus rapide.</p>"},{"location":"14_NodeBase/express/#32-installation-dexpress","title":"3.2 Installation d\u2019Express","text":"<p>Maintenant que nous savons pourquoi Express est utile, voyons comment l\u2019installer dans notre projet.</p>"},{"location":"14_NodeBase/express/#etape-1-initialiser-un-projet","title":"\u00c9tape 1 : Initialiser un projet","text":"<p>Cr\u00e9ez un nouveau projet Node.js, commencez par cr\u00e9er un dossier et initialiser votre projet avec :</p> <pre><code>npm init -y\n</code></pre> <p>Cela va cr\u00e9er un fichier package.json qui permet \u00e0 Node.js de g\u00e9rer les d\u00e9pendances (comme Express).</p>"},{"location":"14_NodeBase/express/#etape-2-installer-express","title":"\u00c9tape 2 : Installer Express","text":"<p>Dans votre terminal toujours \u00e0 la racine de ton projet, tapez la commande suivante :</p> <pre><code>npm install express\n</code></pre> <p>Cette commande va :</p> <ul> <li> <p>t\u00e9l\u00e9charger le module express ;</p> </li> <li> <p>l\u2019ajouter \u00e0 ton projet dans un dossier appel\u00e9 node_modules ;</p> </li> <li> <p>enregistrer cette d\u00e9pendance dans ton fichier package.json.</p> </li> </ul> <p>Un fichier package-lock.json va \u00e9galement appara\u00eetre. Ce fichier aide \u00e0 g\u00e9rer les versions exactes des modules install\u00e9s.</p>"},{"location":"14_NodeBase/express/#etape-3-verification","title":"\u00c9tape 3 : V\u00e9rification","text":"<p>Une fois l\u2019installation termin\u00e9e, vous pouvez ouvrir votre fichier package.json et v\u00e9rifier que tu vois quelque chose comme ceci :</p> <pre><code>\"dependencies\": {\n  \"express\": \"^4.18.2\"\n}\n</code></pre>"},{"location":"14_NodeBase/express/#33-express-les-bases","title":"3.3 Express : les bases","text":"<p>Maintenant qu\u2019Express est install\u00e9, voyons ensemble les principes de base de son fonctionnement. Express permet de cr\u00e9er un serveur de mani\u00e8re plus simple, plus claire et plus rapide qu\u2019avec Node.js pur.</p> <p>Dans cette section, nous allons d\u00e9couvrir les \u00e9l\u00e9ments les plus importants d\u2019Express, accompagn\u00e9s de petits extraits de code pour bien comprendre.</p>"},{"location":"14_NodeBase/express/#creer-une-application-express","title":"Cr\u00e9er une application Express","text":"<p>Voici la structure de base d\u2019un serveur Express :</p> <pre><code>const express = require(\"express\");\nconst app = express();\n</code></pre> <ul> <li> <p><code>require(\"express\")</code> permet d\u2019importer la biblioth\u00e8que Express.</p> </li> <li> <p><code>express()</code> cr\u00e9e une application Express, c\u2019est-\u00e0-dire votre serveur.</p> </li> </ul>"},{"location":"14_NodeBase/express/#ecouter-les-requetes-lancement-du-serveur","title":"\u00c9couter les requ\u00eates (lancement du serveur)","text":"<p>Pour que le serveur Express r\u00e9ponde aux utilisateurs, il faut lui indiquer sur quel port il doit \u00e9couter :</p> <pre><code>app.listen(3000, () =&gt; {\n  console.log(\"Serveur d\u00e9marr\u00e9 sur le port 3000\");\n});\n</code></pre> <p>Ici, le serveur \u00e9coutera les requ\u00eates envoy\u00e9es \u00e0 l\u2019adresse <code>http://localhost:3000</code>.</p>"},{"location":"14_NodeBase/express/#creer-une-route-simple-get","title":"Cr\u00e9er une route simple (GET)","text":"<p>Une route permet de dire \u00e0 Express quoi faire lorsqu\u2019un utilisateur acc\u00e8de \u00e0 une certaine adresse de votre site.</p> <pre><code>app.get(\"/\", (req, res) =&gt; {\n  res.send(\"Bienvenue sur mon serveur Express !\");\n});\n</code></pre> <ul> <li> <p><code>app.get()</code> indique que l\u2019on g\u00e8re une requ\u00eate HTTP de type GET.</p> </li> <li> <p>Le premier argument <code>\" / \"</code> est le chemin (ici la page d\u2019accueil).</p> </li> <li> <p><code>res.send()</code> permet d\u2019envoyer une r\u00e9ponse au client.</p> </li> </ul> <p>Vous pouvez aussi cr\u00e9er d\u2019autres routes, comme :</p> <pre><code>app.get(\"/contact\", (req, res) =&gt; {\n  res.send(\"Page de contact\");\n});\n</code></pre>"},{"location":"14_NodeBase/express/#et-les-requetes-post","title":"Et les requ\u00eates POST ?","text":"<p>Jusqu'ici, nous avons utilis\u00e9 <code>app.get()</code> pour r\u00e9pondre \u00e0 des requ\u00eates GET (souvent utilis\u00e9es pour afficher des pages ou r\u00e9cup\u00e9rer des informations). Mais il existe aussi un autre type tr\u00e8s courant de requ\u00eate : la requ\u00eate POST.</p> <p>Les requ\u00eates POST sont souvent utilis\u00e9es pour envoyer des donn\u00e9es au serveur, comme lorsqu\u2019un utilisateur remplit un formulaire.</p> <p>Voici un exemple de route POST dans Express :</p> <pre><code>// Middleware pour lire les donn\u00e9es JSON envoy\u00e9es au serveur\napp.use(express.json());\n\napp.post(\"/contact\", (req, res) =&gt; {\n  const nom = req.body.nom;\n  const message = req.body.message;\n\n  console.log(\"Message re\u00e7u :\", nom, message);\n\n  res.send(\"Merci pour votre message !\");\n});\n</code></pre> <p>Dans cet exemple :</p> <ul> <li> <p>Le client envoie un message au serveur via une requ\u00eate POST (par exemple, depuis un formulaire).</p> </li> <li> <p>Le serveur lit les donn\u00e9es envoy\u00e9es (req.body) gr\u00e2ce au middleware express.json().</p> </li> <li> <p>Il peut ensuite traiter ces donn\u00e9es (par exemple les enregistrer), puis envoyer une r\u00e9ponse.</p> </li> </ul>"},{"location":"14_NodeBase/express/#envoyer-des-fichiers-html-ou-des-ressources-statiques","title":"Envoyer des fichiers HTML ou des ressources statiques","text":"<p>Express permet aussi d\u2019envoyer des fichiers comme des pages HTML, des images, ou des fichiers CSS.</p> <p>Pour cela, on utilise :</p> <pre><code>app.use(express.static(\"public\"));\n</code></pre> <p>Cela signifie que tous les fichiers plac\u00e9s dans un dossier <code>public/</code> pourront \u00eatre servis automatiquement.</p> <p>Par exemple :</p> <p>Un fichier <code>public/index.html</code> sera accessible via <code>http://localhost:3000/index.html</code>.</p> <p>Un fichier <code>public/style.css</code> sera \u00e9galement accessible.</p>"},{"location":"14_NodeBase/express/#resume-des-elements-de-base","title":"R\u00e9sum\u00e9 des \u00e9l\u00e9ments de base","text":"<ul> <li> <p><code>express()</code> : cr\u00e9e une application serveur</p> </li> <li> <p><code>app.listen()</code> : d\u00e9marre le serveur sur un port donn\u00e9</p> </li> <li> <p><code>app.get()</code> : cr\u00e9e une route pour r\u00e9pondre \u00e0 une requ\u00eate GET</p> </li> <li> <p><code>app.post()</code> : cr\u00e9e une route pour r\u00e9pondre \u00e0 une requ\u00eate POST</p> </li> <li> <p><code>res.send()</code> : envoie une r\u00e9ponse (texte, HTML, etc.)</p> </li> <li> <p><code>express.static()</code> : sert des fichiers statiques (HTML, CSS, images\u2026)</p> </li> </ul>"},{"location":"14_NodeBase/express/#35-les-middlewares-notion","title":"3.5 Les middlewares (notion)","text":"<p>Un middleware est un \u00e9l\u00e9ment interm\u00e9diaire qu\u2019Express ex\u00e9cute avant d\u2019arriver \u00e0 la r\u00e9ponse finale. Il permet d\u2019ajouter des fonctionnalit\u00e9s au serveur, comme :</p> <ul> <li> <p>lire les donn\u00e9es envoy\u00e9es par un formulaire ;</p> </li> <li> <p>autoriser ou refuser certaines requ\u00eates ;</p> </li> <li> <p>enregistrer des logs ;</p> </li> <li> <p>ou encore servir des fichiers statiques (HTML, CSS\u2026).</p> </li> </ul>"},{"location":"14_NodeBase/express/#des-middlewares-que-vous-utilisez-deja","title":"Des middlewares que vous utilisez d\u00e9j\u00e0","text":"<p>Voici deux exemples de middlewares tr\u00e8s courants, que nous allons utiliser bient\u00f4t :</p> <pre><code>app.use(express.json());\n</code></pre> <p>\u2192 Ce middleware permet \u00e0 Express de comprendre les donn\u00e9es JSON envoy\u00e9es par un formulaire ou une application.</p> <pre><code>app.use(express.static(\"public\"));\n</code></pre> <p>\u2192 Celui-ci permet de servir automatiquement les fichiers HTML, CSS, images\u2026 contenus dans le dossier <code>public/</code>.</p>"},{"location":"14_NodeBase/express/#comment-les-reconnaitre","title":"Comment les reconna\u00eetre ?","text":"<p>Tous les middlewares s\u2019utilisent avec la m\u00e9thode <code>app.use()</code>. Ils s\u2019intercalent entre la requ\u00eate du client et la r\u00e9ponse finale. On peut imaginer que chaque requ\u00eate \"passe par un tunnel\" o\u00f9 diff\u00e9rents traitements sont appliqu\u00e9s avant que la r\u00e9ponse ne soit envoy\u00e9e.</p> <p>Vous n\u2019avez pas besoin de tout comprendre sur les middlewares maintenant. Retenez simplement que ce sont des \"outils interm\u00e9diaires\" tr\u00e8s pratiques pour enrichir les fonctionnalit\u00e9s du serveur.</p> <p>Dans Express, certains \u00e9l\u00e9ments que nous utilisons souvent peuvent ressembler \u00e0 des middlewares, mais ne le sont pas tous vraiment.</p> \u00c9l\u00e9ment Est-ce un middleware ? R\u00f4le principal <code>app.get()</code>, <code>app.post()</code> NON Permet de d\u00e9finir une route (chemin + fonction associ\u00e9e) Fonction dans <code>app.get()</code> OUI (souvent) Fonction ex\u00e9cut\u00e9e \u00e0 chaque requ\u00eate, typique d\u2019un middleware <code>res.send()</code> NON M\u00e9thode utilis\u00e9e pour envoyer une r\u00e9ponse au client <code>express.static(\"public\")</code> OUI Middleware fourni par Express pour envoyer des fichiers <p>Un middleware est une fonction qui agit entre la requ\u00eate et la r\u00e9ponse.</p>"},{"location":"14_NodeBase/installation/","title":"Node.js","text":""},{"location":"14_NodeBase/installation/#21-introduction","title":"2.1 Introduction","text":"<p>Comme nous l\u2019avons vu, Node.js est un environnement qui nous permet d\u2019ex\u00e9cuter du JavaScript c\u00f4t\u00e9 serveur. Gr\u00e2ce \u00e0 Node.js, nous allons pouvoir \u00e9crire des programmes qui : - re\u00e7oivent et r\u00e9pondent \u00e0 des requ\u00eates HTTP ; - g\u00e8rent des formulaires ; - lisent ou \u00e9crivent des fichiers ; - et bien plus encore\u2026</p> <p>Pour l\u2019instant, nous allons surtout l\u2019utiliser pour cr\u00e9er un petit serveur web, capable de communiquer avec un site web.</p>"},{"location":"14_NodeBase/installation/#installation-de-nodejs","title":"Installation de Node.js","text":"<p>Voici les \u00e9tapes pour installer Node.js sur un ordinateur Windows :</p> <ol> <li> <p>Rendez-vous sur le site officiel :  https://nodejs.org</p> </li> <li> <p>Cliquez sur le bouton \"LTS\" (Long Term Support) pour t\u00e9l\u00e9charger la version recommand\u00e9e.  </p> </li> <li> <p>Une fois le fichier <code>.msi</code> t\u00e9l\u00e9charg\u00e9, ouvrez-le et suivez les instructions d\u2019installation par d\u00e9faut.  </p> </li> <li> <p>Une fois l\u2019installation termin\u00e9e, ouvrez le menu D\u00e9marrer, cherchez \"Invite de commandes\" ou \"CMD\", puis tapez :  </p> </li> </ol> <pre><code>node -v\n</code></pre> <p>Cela vous affichera la version install\u00e9e de Node.js (ex. : v20.9.0).</p> <ol> <li>Vous pouvez aussi tester que npm est bien install\u00e9 (npm = Node Package Manager) : <pre><code>npm -v\n</code></pre> Vous verrez \u00e9galement s\u2019afficher un num\u00e9ro de version (ex. : 10.1.0).</li> </ol>"},{"location":"14_NodeBase/installation/#22-creation-dun-premier-projet-nodejs","title":"2.2 Cr\u00e9ation d\u2019un premier projet Node.js","text":"<p>Maintenant que Node.js est install\u00e9, nous allons cr\u00e9er un tout premier projet tr\u00e8s simple. Le but est de comprendre comment fonctionne un serveur, et de voir comment il peut envoyer des fichiers HTML et CSS au navigateur.</p> <p>Cr\u00e9ez un nouveau dossier monPremierNode. Placez vous dans ce dossier.</p>"},{"location":"14_NodeBase/installation/#etape-1-initialiser-le-projet-nodejs","title":"\u00c9tape 1 : Initialiser le projet Node.js","text":"<p>Dans votre terminal (ou dans le terminal int\u00e9gr\u00e9 de VS Code), tapez :</p> <p><pre><code>npm init -y\n</code></pre> Cela va cr\u00e9er un fichier package.json qui contient les informations de base de ton projet.</p>"},{"location":"14_NodeBase/installation/#etape-2-creer-les-fichiers-du-projet","title":"\u00c9tape 2 : Cr\u00e9er les fichiers du projet","text":"<p>Cr\u00e9e 3 fichiers dans votre dossier :</p> <pre><code>monPremierNode/ \n\u2502\n\u251c\u2500\u2500 index.html       \u2192 Le fichier HTML \u00e0 envoyer au client\n\u251c\u2500\u2500 style.css        \u2192 Le fichier CSS pour le style\n\u2514\u2500\u2500 serveur.js       \u2192 Le fichier Node.js (notre serveur)\n</code></pre> <p>Le fichier index.html :</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Mon premier serveur Node.js&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Bienvenue !&lt;/h1&gt;\n  &lt;p&gt;Cette page est servie par un serveur Node.js&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Le fichier style.css :</p> <pre><code>body {\n  background-color: #f0f0f0;\n  font-family: sans-serif;\n  text-align: center;\n  padding: 50px;\n}\n\nh1 {\n  color: #336699;\n}\n</code></pre> <p>Le fichier serveur.js : </p> <pre><code>const http = require(\"http\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nconst server = http.createServer((req, res) =&gt; {\n  console.log(\"Requ\u00eate re\u00e7ue : \" + req.url);\n\n  let filePath = \".\" + req.url;\n  if (filePath === \"./\") {\n    filePath = \"./index.html\";\n  }\n\n  const extname = path.extname(filePath);\n  let contentType = \"text/html\";\n\n  if (extname === \".css\") {\n    contentType = \"text/css\";\n  }\n\n  fs.readFile(filePath, (err, content) =&gt; {\n    if (err) {\n      res.writeHead(404);\n      res.end(\"Fichier non trouv\u00e9\");\n    } else {\n      res.writeHead(200, { \"Content-Type\": contentType });\n      res.end(content);\n    }\n  });\n});\n\nconst PORT = 3000;\nserver.listen(PORT, () =&gt; {\n  console.log(`Serveur d\u00e9marr\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre> <p>Le code est relativement long, n'essayons pas de le comprendre enti\u00e8rement \u00e0 ce stade. Les deux parties importantes sont :</p> <p><pre><code>const server = http.createServer((req, res) =&gt;\n</code></pre> Qui va cr\u00e9er le serveur et :  <pre><code>onst PORT = 3000;\nserver.listen(PORT, () =&gt; {\n  console.log(`Serveur d\u00e9marr\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre> Qui va mettre le serveur en \u00e9coute sur le port 3000.</p>"},{"location":"14_NodeBase/installation/#etape-3-lancer-le-serveur","title":"\u00c9tape 3 : Lancer le serveur","text":"<p>Dans ton terminal, tapez :</p> <pre><code>node serveur.js\n</code></pre> <p>Vous verrez s'afficher :</p> <pre><code>Serveur d\u00e9marr\u00e9 sur http://localhost:3000\n</code></pre> <p>Ouvrez ensuite ton navigateur et rendez-vous \u00e0 cette adresse : http://localhost:3000</p> <p>Vous devriez voir votre page HTML stylis\u00e9e avec ton CSS ! </p>"},{"location":"14_NodeBase/installation/#expliquation","title":"Expliquation","text":"<ul> <li> <p>Le fichier <code>serveur.js</code> est un petit serveur backend : c\u2019est lui qui r\u00e9pond aux requ\u00eates HTTP du navigateur.</p> </li> <li> <p>Quand vous ouvrez <code>localhost:3000</code>, votre navigateur envoie une requ\u00eate <code>GET</code>, et le serveur r\u00e9pond avec le fichier HTML (et ensuite le CSS).</p> </li> <li> <p>Votre navigateur joue le r\u00f4le du client (frontend), et le fichier serveur.js celui du serveur (backend).</p> </li> </ul> <p>Vous venez de cr\u00e9er votre premier site web servi par un vrai serveur Node.js ! Node.js est un outil tr\u00e8s complet. Pour le ma\u00eetriser enti\u00e8rement, un cours d\u00e9di\u00e9 serait n\u00e9cessaire.</p> <p>Pour nous faciliter la vie, et pour apprendre \u00e0 utiliser un serveur Node.js plus facilement, nous allons utiliser Express. Il s'agit d'un outil (ou plus pr\u00e9cis\u00e9ment d\u2019un framework) qui simplifie l'utilisation de Node.js.</p> <p>L'utilisation de cet outil va nous permettre, en quelques s\u00e9ances de cours, de r\u00e9aliser toutes les op\u00e9rations de base que l\u2019on attend d\u2019un serveur.</p>"},{"location":"14_NodeBase/tuto/","title":"Creation d'un mini-site web avec Node.js et Express","text":""},{"location":"14_NodeBase/tuto/#41-le-frontend","title":"4.1 Le frontend","text":"<p>Dans cette section, nous allons cr\u00e9er un mini site web compos\u00e9 de :</p> <ul> <li> <p>Deux pages HTML diff\u00e9rentes (<code>index.html</code> et <code>about.html</code>) ;</p> </li> <li> <p>Un fichier CSS partag\u00e9 (<code>style.css</code>) ;</p> </li> <li> <p>Un petit script JavaScript c\u00f4t\u00e9 client (<code>script.js</code>) ;</p> </li> <li> <p>Un serveur Node.js avec Express (<code>serveur.js</code>), pour servir tous ces fichiers.</p> </li> </ul> <p>Ce mini-site permettra de :</p> <ul> <li> <p>naviguer entre deux pages via des liens <code>&lt;a&gt;</code> ;</p> </li> <li> <p>changer la couleur de fond de la page en appuyant sur un bouton (gr\u00e2ce au fichier <code>script.js</code>) ;</p> </li> <li> <p>comprendre comment Express sert les fichiers statiques (HTML, CSS, JS\u2026).</p> </li> </ul>"},{"location":"14_NodeBase/tuto/#structure-du-projet","title":"Structure du projet","text":"<p>Voici la structure du dossier du projet :</p> <pre><code>mini-site/ \n\u251c\u2500\u2500 public/ \n|    \u251c\u2500\u2500 css/\n|    |    \u2514\u2500\u2500 style.css\n|    \u251c\u2500\u2500 js/\n|    |    \u2514\u2500\u2500 script.js\n\u2502    \u251c\u2500\u2500 index.html\n\u2502    \u2514\u2500\u2500 about.html\n\u2514\u2500\u2500 serveur.js\n</code></pre>"},{"location":"14_NodeBase/tuto/#fichier-indexhtml","title":"Fichier <code>index.html</code>","text":"<p>Commencons par cr\u00e9er les fichiers index.html et about.html.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Page d'accueil&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n  &lt;script src=\"js/script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Bienvenue sur mon site&lt;/h1&gt;\n  &lt;p&gt;Ceci est la page d'accueil.&lt;/p&gt;\n  &lt;button id=\"changeColor\"&gt;Changer la couleur de fond&lt;/button&gt;\n  &lt;br&gt;&lt;br&gt;\n  &lt;a href=\"/about.html\"&gt;Aller \u00e0 la page \u00c0 propos&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"14_NodeBase/tuto/#fichier-abouthtml","title":"Fichier <code>about.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;\u00c0 propos&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n  &lt;script src=\"js/script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;\u00c0 propos&lt;/h1&gt;\n  &lt;p&gt;Ceci est une seconde page.&lt;/p&gt;\n  &lt;button id=\"changeColor\"&gt;Changer la couleur de fond&lt;/button&gt;\n  &lt;br&gt;&lt;br&gt;\n  &lt;a href=\"/index.html\"&gt;Retour \u00e0 l'accueil&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"14_NodeBase/tuto/#fichier-stylecss","title":"Fichier <code>style.css</code>","text":"<p>D\u00e9finissez le style dans le fichier style.css</p> <pre><code>body {\n  font-family: sans-serif;\n  text-align: center;\n  padding: 50px;\n  background-color: white;\n}\n</code></pre>"},{"location":"14_NodeBase/tuto/#fichier-scriptjs","title":"Fichier <code>script.js</code>","text":"<p>Enfin cr\u00e9er le fichier script.js. Ce fichier permet de changer la couleur du backgroud quand l'on appuie sur le bouton. </p> <pre><code>function changerCouleur() {\n    document.body.style.backgroundColor = \"#e0f7fa\";\n  }\n\nlet bouton = document.getElementById(\"changeColor\");\nbouton.addEventListener(\"click\", changerCouleur);\n</code></pre> <p>Tous ces fichiers sont le frontend, ils sont dans un dossier <code>public/</code> et ils seront \u00e9ventuellement envoy\u00e9 au client. </p> <p>Maintenant, nous allons commencer coder le backend avec le fichier <code>serveur.js</code>.</p>"},{"location":"14_NodeBase/tuto/#42-le-backend","title":"4.2 Le backend","text":""},{"location":"14_NodeBase/tuto/#fichier-serverjs","title":"Fichier <code>server.js</code>","text":"<pre><code>const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.static(\"public\"));\n\napp.listen(PORT, () =&gt; {\n  console.log(`Serveur d\u00e9marr\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre> <p>Comme mentionn\u00e9 pr\u00e9c\u00e9demment : </p> <ul> <li> <p><code>const express = require(\"express\")</code> : Nous permet d'importer la biblioth\u00e8que Express.</p> </li> <li> <p><code>const app = express()</code> : Va cr\u00e9er le serveur </p> </li> <li> <p><code>app.use(express.static(\"public\"))</code> : pour signifier que tous les fichiers dans <code>public/</code></p> </li> </ul> <pre><code>app.listen(PORT, () =&gt; {\n  console.log(`Serveur d\u00e9marr\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre> <p>Va nous permettre d'\u00e9couter les requ\u00eates envoy\u00e9es \u00e0 l\u2019adresse <code>http://localhost:3000</code> </p>"},{"location":"14_NodeBase/tuto/#lancer-le-projet","title":"Lancer le projet","text":"<p>Dans votre terminal, \u00e0 la racine du projet, lancez le serveur :</p> <pre><code>node serveur.js\n</code></pre> <p>Ouvrez ensuite votre navigateur \u00e0 l\u2019adresse suivante : <code>http://localhost:3000</code></p> <p>Vous verrez la page d\u2019accueil. Vous pouvez cliquer sur le lien pour aller vers la page \"\u00c0 propos\", et appuyer sur le bouton pour changer la couleur de fond.</p> <p>N'oubliez pas</p> <p>N'oubliez pas de lancer la commande \u00e0 la racine de votre projet : <pre><code>npm init -y\n</code></pre> Et \u00e9ventuellement de r\u00e9installer express : <pre><code>npm install express\n</code></pre></p>"},{"location":"14_NodeBase/tuto/#pourquoi-navons-nous-pas-defini-de-routes","title":"Pourquoi n\u2019avons-nous pas d\u00e9fini de routes ?","text":"<p>Vous avez peut-\u00eatre remarqu\u00e9 que nous n\u2019avons d\u00e9fini aucune route avec <code>app.get(...)</code> dans notre fichier <code>serveur.js</code>. Et pourtant, tout fonctionne !</p> <p>Cela est possible gr\u00e2ce \u00e0 cette ligne cl\u00e9 :</p> <pre><code>app.use(express.static(\"public\"));\n</code></pre> <p>Cette instruction dit \u00e0 Express : \u201cSers automatiquement tous les fichiers qui se trouvent dans le dossier public/.\u201d</p> <p>Autrement dit :</p> <ul> <li> <p>Si on va sur <code>http://localhost:3000/index.html</code>, Express envoie le fichier <code>public/index.html</code> ;</p> </li> <li> <p>Si on va sur <code>http://localhost:3000/about.html</code>, Express envoie le fichier <code>public/index.html</code> ;</p> </li> <li> <p>Si on demande <code>css/style.css</code> ou <code>js/script.js</code>, Express les retrouve tout seul ;</p> </li> </ul>"},{"location":"14_NodeBase/tuto/#et-pourquoi-arrive-t-on-automatiquement-sur-la-page-daccueil","title":"Et pourquoi arrive-t-on automatiquement sur la page d\u2019accueil ?","text":"<p>Quand vous ouvrez l\u2019URL <code>http://localhost:3000</code>, vous arrivez directement sur la page d\u2019accueil, sans \u00e9crire <code>/index.html</code>. C\u2019est parce qu\u2019Express (et les navigateurs en g\u00e9n\u00e9ral) cherchent par d\u00e9faut un fichier nomm\u00e9 <code>index.html</code> dans le dossier public.</p> <p>Faites le test :</p> <ul> <li> <p>Renommez le fichier <code>index.html</code> en <code>accueil.html</code> dans le dossier public.</p> </li> <li> <p>Rechargez votre page sur <code>http://localhost:3000</code>.</p> </li> </ul> <p>Vous verrez que \u00e7a ne fonctionne plus : Express ne trouve plus de fichier <code>index.html</code>, car ce nom est attendu par d\u00e9faut.</p> <p>Pour corriger ce comportement, vous pouvez d\u00e9finir une route personnalis\u00e9e, comme ceci :</p> <pre><code>const express = require(\"express\");\nconst path = require(\"path\"); // ligne \u00e0 ajouter\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.static(\"public\"));\n\n// D\u00e9finir une route personnalis\u00e9e pour la page d'accueil\napp.get(\"/\", (req, res) =&gt; {\n  res.sendFile(path.join(__dirname, \"public\", \"accueil.html\"));\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Serveur d\u00e9marr\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre> <p>Ceci nous dit que quand nous allons demander l'acc\u00e8s \u00e0 <code>\"/\"</code> c'est-\u00e0-dire \u00e0 <code>http://localhost:3000/</code>, il va nous envoyer vers la page <code>accueil.html</code> se trouvant dans <code>public/</code>.</p> <p>\u00c0 retenir</p> <ul> <li> <p>Express sert automatiquement tous les fichiers du dossier public.</p> </li> <li> <p>Si le fichier s\u2019appelle index.html, il est utilis\u00e9 par d\u00e9faut \u00e0 la racine /.</p> </li> <li> <p>Si on change le nom du fichier d\u2019accueil, il faut alors d\u00e9finir une route manuelle pour le remplacer.</p> </li> </ul> <p>Cela vous montre l\u2019\u00e9quilibre entre :</p> <ul> <li> <p>le mode simple avec express.static() (tout est automatique),le mode simple avec express.static() (tout est automatique),</p> </li> <li> <p>et le mode plus avanc\u00e9 avec des routes personnalis\u00e9es (plus flexible).</p> </li> </ul>"},{"location":"15_NodeFormulaire/","title":"Introduction","text":""},{"location":"15_NodeFormulaire/#11-rappel-sur-les-formulaires-html","title":"1.1 Rappel sur les formulaires HTML","text":"<p>Un formulaire HTML permet \u00e0 un utilisateur de remplir des informations (texte, mot de passe, s\u00e9lection, etc.) et de les envoyer au serveur.</p> <p>Les formulaires sont pr\u00e9sents partout sur le web : inscription, connexion, recherche, envoi de message, etc.</p> <p>Voici un exemple simple de formulaire HTML :</p> <pre><code>&lt;form action=\"/bonjour\" method=\"GET\"&gt;\n  &lt;label for=\"prenom\"&gt;Pr\u00e9nom :&lt;/label&gt;\n  &lt;input type=\"text\" id=\"prenom\" name=\"prenom\"&gt;\n  &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <ul> <li> <p><code>action=\"/bonjour\"</code> : Indique l\u2019adresse vers laquelle les donn\u00e9es doivent \u00eatre envoy\u00e9es.</p> </li> <li> <p><code>method=\"POST\"</code> : Indique la m\u00e9thode HTTP utilis\u00e9e pour envoyer les donn\u00e9es (GET ou POST).</p> </li> <li> <p><code>name=\"nom\"</code> : l\u2019attribut name sert de cl\u00e9 c\u00f4t\u00e9 serveur. Sans lui, Express ne pourra pas r\u00e9cup\u00e9rer la valeur du champ.</p> </li> </ul> <p>Dans cet exemple :</p> <ul> <li> <p>L\u2019utilisateur entre son pr\u00e9nom,</p> </li> <li> <p>Lorsqu\u2019il clique sur le bouton <code>\"Envoyer\"</code>, une requ\u00eate <code>GET</code> est envoy\u00e9e \u00e0 l\u2019adresse <code>/bonjour</code>,</p> </li> <li> <p>Les donn\u00e9es du champ sont envoy\u00e9es au serveur, et peuvent \u00eatre trait\u00e9es.</p> </li> </ul>"},{"location":"15_NodeFormulaire/#12-rappel-sur-les-methodes-get-et-post","title":"1.2 Rappel sur les m\u00e9thodes GET et POST","text":"<p>Lorsqu\u2019un formulaire est envoy\u00e9, il utilise une m\u00e9thode HTTP pour transmettre les donn\u00e9es au serveur. Les deux m\u00e9thodes les plus courantes sont GET et POST.</p>"},{"location":"15_NodeFormulaire/#methode-get","title":"M\u00e9thode GET","text":"<p>Avec la m\u00e9thode GET, les donn\u00e9es sont ajout\u00e9es directement dans l\u2019URL.</p> <pre><code>&lt;form action=\"/bonjour\" method=\"GET\"&gt;\n  &lt;input type=\"text\" name=\"prenom\" value=\"Alice\"&gt;\n  &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Si l\u2019utilisateur clique sur \"Envoyer\", cela produit une requ\u00eate de ce type :</p> <pre><code>/bonjour?prenom=Alice\n</code></pre>"},{"location":"15_NodeFormulaire/#methode-post","title":"M\u00e9thode POST","text":"<p>Avec la m\u00e9thode POST, les donn\u00e9es sont envoy\u00e9es dans le corps de la requ\u00eate (invisible dans l\u2019URL).</p> <pre><code>&lt;form action=\"/bonjour\" method=\"POST\"&gt;\n  &lt;input type=\"text\" name=\"prenom\" value=\"Alice\"&gt;\n  &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Cette fois, l\u2019URL sera simplement <code>/bonjour</code>, mais les donn\u00e9es (<code>prenom=Alice</code>) seront envoy\u00e9es en arri\u00e8re-plan.</p>"},{"location":"15_NodeFormulaire/#13-recuperer-les-donnees-cote-serveur","title":"1.3 R\u00e9cup\u00e9rer les donn\u00e9es c\u00f4t\u00e9 serveur","text":"<p>Suivant la m\u00e9thode, utiliser dans le formulaire (GET ou POST) la r\u00e9cup\u00e9ration des donn\u00e9es sera un peu diff\u00e9rent du c\u00f4t\u00e9 serveur. La prochaine section explique comment faire avec Express.</p>"},{"location":"15_NodeFormulaire/exercice/","title":"Exercices","text":""},{"location":"15_NodeFormulaire/exercice/#41-exercice-ajouter-un-article-avec-validation","title":"4.1 Exercice \u2013 Ajouter un article avec validation","text":"<p>Dans cet exercice, vous allez compl\u00e9ter le projet MiniBlog que vous avez commenc\u00e9 lors de la s\u00e9ance pr\u00e9c\u00e9dente. Le but est de rendre fonctionnel le formulaire situ\u00e9 dans la page <code>ajout.html</code>.</p>"},{"location":"15_NodeFormulaire/exercice/#objectif","title":"Objectif","text":"<p>Lorsque l\u2019utilisateur remplit le formulaire et clique sur \"Publier\" : - Le formulaire est envoy\u00e9 au serveur en POST - Le serveur v\u00e9rifie que tous les champs sont remplis - Si tout est correct :   - l\u2019utilisateur est redirig\u00e9 vers la m\u00eame page (<code>ajout.html?etat=ok</code>)   - un message vert de confirmation s\u2019affiche - Si un champ est manquant :   - l\u2019utilisateur est redirig\u00e9 vers <code>ajout.html?etat=erreur</code>   - un message rouge d\u2019erreur s\u2019affiche</p>"},{"location":"15_NodeFormulaire/exercice/#instructions","title":"Instructions","text":"<ol> <li>Reprenez le projet MiniBlog cr\u00e9\u00e9 \u00e0 la s\u00e9ance pr\u00e9c\u00e9dente (Express + HTML statiques).</li> <li>Dans le fichier <code>ajout.html</code> :</li> <li>Modifiez le formulaire pour qu\u2019il envoie les donn\u00e9es en POST vers <code>/ajouter</code></li> <li>Ajoutez une zone vide (<code>&lt;p id=\"message\"&gt;</code>) pour afficher un message dynamique</li> <li>Cr\u00e9ez ou modifiez le fichier <code>script.js</code> pour qu\u2019il :</li> <li>lise le param\u00e8tre <code>etat</code> dans l\u2019URL</li> <li>affiche un message si <code>etat=ok</code> (succ\u00e8s) ou <code>etat=erreur</code> (champ manquant)</li> <li>Dans le fichier <code>server.js</code> :</li> <li>Ajoutez le middleware <code>express.urlencoded(...)</code> pour lire les donn\u00e9es POST</li> <li>Ajoutez une route POST <code>/ajouter</code> qui v\u00e9rifie si <code>titre</code> et <code>contenu</code> sont bien remplis</li> <li>Redirigez avec <code>?etat=ok</code> ou <code>?etat=erreur</code> selon les cas</li> </ol>"},{"location":"15_NodeFormulaire/exercice/#resultat-attendu","title":"R\u00e9sultat attendu","text":"<ul> <li>L\u2019utilisateur peut envoyer un article via le formulaire</li> <li>Un message lui indique si son article a \u00e9t\u00e9 bien envoy\u00e9 ou non</li> <li>Les donn\u00e9es ne sont pas encore sauvegard\u00e9es : cela viendra dans un prochain exercice</li> </ul>"},{"location":"15_NodeFormulaire/recuperation/","title":"R\u00e9cup\u00e9rer des donn\u00e9es dans Express","text":""},{"location":"15_NodeFormulaire/recuperation/#21-recuperation-des-donnees","title":"2.1 R\u00e9cup\u00e9ration des donn\u00e9es","text":"<p>Lorsque l\u2019utilisateur remplit un formulaire et clique sur \"Envoyer\", son navigateur envoie une requ\u00eate HTTP ou HTTPS vers le serveur.</p> <p>Cette requ\u00eate contient toutes les informations saisies dans le formulaire : par exemple le pr\u00e9nom, le message, ou le contenu d\u2019un article. Ces donn\u00e9es sont transmises selon la m\u00e9thode d\u00e9finie dans le formulaire (<code>GET</code> ou <code>POST</code>), et sont envoy\u00e9es avec la requ\u00eate.</p>"},{"location":"15_NodeFormulaire/recuperation/#cote-client","title":"C\u00f4t\u00e9 client","text":"<p>Le navigateur prend les donn\u00e9es du formulaire et les pr\u00e9pare pour les envoyer :</p> <ul> <li> <p>soit dans l\u2019URL (si on utilise <code>GET</code>),</p> </li> <li> <p>soit dans le corps de la requ\u00eate (si on utilise <code>POST</code>).</p> </li> </ul>"},{"location":"15_NodeFormulaire/recuperation/#cote-serveur","title":"C\u00f4t\u00e9 serveur","text":"<p>Le serveur, lui, re\u00e7oit la requ\u00eate, l\u2019analyse, et en extrait les donn\u00e9es. Gr\u00e2ce \u00e0 Express, ces donn\u00e9es peuvent \u00eatre repr\u00e9sent\u00e9es sous forme d\u2019objet JavaScript, ce qui les rend faciles \u00e0 lire, \u00e0 afficher, ou \u00e0 utiliser dans un traitement.</p> <p>Le serveur joue donc le r\u00f4le d\u2019interpr\u00e8te : il re\u00e7oit une requ\u00eate contenant des informations, et les convertit en donn\u00e9es exploitables dans le code js.</p>"},{"location":"15_NodeFormulaire/recuperation/#22-traitement-des-donnees-avec-get","title":"2.2 Traitement des donn\u00e9es avec GET","text":"<p>Nous allons maintenant voir comment r\u00e9cup\u00e9rer les donn\u00e9es envoy\u00e9es par un formulaire GET dans Express.</p>"},{"location":"15_NodeFormulaire/recuperation/#exemple-de-formulaire-html-methode-get","title":"Exemple de formulaire HTML (m\u00e9thode GET)","text":"<pre><code>&lt;form action=\"/bonjour\" method=\"GET\"&gt;\n  &lt;label for=\"prenom\"&gt;Pr\u00e9nom :&lt;/label&gt;\n  &lt;input type=\"text\" id=\"prenom\" name=\"prenom\"&gt;\n  &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Ce formulaire enverra une requ\u00eate de ce type au serveur :</p> <pre><code>/bonjour?prenom=Alice\n</code></pre>"},{"location":"15_NodeFormulaire/recuperation/#cote-serveur-recuperer-la-donnee-dans-express","title":"C\u00f4t\u00e9 serveur : r\u00e9cup\u00e9rer la donn\u00e9e dans Express","text":"<p>Dans le fichier <code>server.js</code>, on d\u00e9finit une route GET correspondant \u00e0 <code>/bonjour</code> :</p> <pre><code>const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.get(\"/bonjour\", (req, res) =&gt; {\n  const prenom = req.query.prenom;\n  res.send(`Bonjour ${prenom} !`);\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Serveur lanc\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre> <ul> <li> <p><code>req.query</code> est un objet contenant toutes les donn\u00e9es envoy\u00e9es dans l\u2019URL.</p> </li> <li> <p>Ici, <code>req.query.prenom</code> va contenir la valeur tap\u00e9e dans le champ du formulaire.</p> </li> <li> <p>Le serveur r\u00e9pond avec un message personnalis\u00e9 gr\u00e2ce \u00e0 <code>res.send('Bonjour ${prenom} !')</code>. </p> </li> </ul> <p>Lorsqu\u2019un utilisateur soumet le formulaire, il envoie une requ\u00eate HTTP au serveur. La fonction <code>res.send(\"Bonjour Alice !\")</code> permet au serveur d\u2019envoyer une r\u00e9ponse HTTP contenant le texte <code>\"Bonjour Alice !\"</code> au client (le navigateur).</p> <p>Si l\u2019utilisateur tape \"Alice\" et clique sur \"Envoyer\", il verra :</p> <pre><code>Bonjour Alice !\n</code></pre>"},{"location":"15_NodeFormulaire/recuperation/#23-traitement-des-donnees-avec-post","title":"2.3 Traitement des donn\u00e9es avec POST","text":"<p>Contrairement \u00e0 la m\u00e9thode GET, avec POST, les donn\u00e9es ne sont pas visibles dans l\u2019URL. Elles sont envoy\u00e9es dans le corps de la requ\u00eate, de mani\u00e8re invisible pour l\u2019utilisateur.</p> <p>Voyons comment r\u00e9cup\u00e9rer ces donn\u00e9es dans Express.</p>"},{"location":"15_NodeFormulaire/recuperation/#exemple-de-formulaire-html-methode-post","title":"Exemple de formulaire HTML (m\u00e9thode POST)","text":"<pre><code>&lt;form action=\"/contact\" method=\"POST\"&gt;\n  &lt;label for=\"nom\"&gt;Nom :&lt;/label&gt;\n  &lt;input type=\"text\" id=\"nom\" name=\"nom\"&gt;\n\n  &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"15_NodeFormulaire/recuperation/#cote-serveur-recuperer-la-donnee-dans-express_1","title":"C\u00f4t\u00e9 serveur : r\u00e9cup\u00e9rer la donn\u00e9e dans Express","text":"<pre><code>const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\n// Middleware n\u00e9cessaire pour lire les donn\u00e9es POST (formulaires HTML)\napp.use(express.urlencoded({ extended: true }));\n\napp.post(\"/contact\", (req, res) =&gt; {\n  const nom = req.body.nom;\n  res.send(`Bonjour ${nom}, votre message a \u00e9t\u00e9 re\u00e7u.`);\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Serveur d\u00e9marr\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre> <ul> <li> <p><code>app.use(express.urlencoded(...))</code> est un middleware qui permet \u00e0 Express de lire les donn\u00e9es envoy\u00e9es par un formulaire HTML.</p> </li> <li> <p><code>req.body</code> contient toutes les valeurs envoy\u00e9es via POST.</p> </li> <li> <p><code>req.body.nom</code> permet ici de r\u00e9cup\u00e9rer la valeur du champ \"nom\".</p> </li> <li> <p><code>res.send(...)</code> envoie une r\u00e9ponse HTTP contenant un message personnalis\u00e9.</p> </li> </ul> <p>urlencoded</p> <p>Sans le middleware <code>express.urlencoded(...)</code>, <code>req.body</code> serait undefined. Ce middleware est indispensable pour traiter les donn\u00e9es des formulaires POST.</p> <p>Si l\u2019utilisateur entre \"Alice\" et clique sur \"Envoyer\", il recevra comme r\u00e9ponse :</p> <pre><code>Bonjour Alice, votre message a \u00e9t\u00e9 re\u00e7u.\n</code></pre>"},{"location":"15_NodeFormulaire/recuperation/#24-envoyer-une-reponse","title":"2.4 Envoyer une r\u00e9ponse","text":"<p>Dans les sections pr\u00e9c\u00e9dentes, nous avons d\u00e9j\u00e0 vu que le serveur peut r\u00e9pondre \u00e0 une requ\u00eate du client avec la m\u00e9thode <code>res.send(...)</code>. C\u2019est gr\u00e2ce \u00e0 cela que nous avons pu afficher un message simple comme :</p> <pre><code>res.send(\"Bonjour Alice !\");\n</code></pre> <p>Mais il existe plusieurs fa\u00e7ons d\u2019envoyer une r\u00e9ponse au client.</p>"},{"location":"15_NodeFormulaire/recuperation/#envoyer-directement-du-html-via-ressend","title":"Envoyer directement du HTML via res.send()","text":"<p>Il est tout \u00e0 fait possible d\u2019envoyer du code HTML directement depuis le serveur.</p> <pre><code>res.send(\"&lt;h1&gt;Merci pour votre message !&lt;/h1&gt;\");\n</code></pre> <p>Cela fonctionne, mais :</p> <ul> <li> <p>ce n\u2019est pas tr\u00e8s pratique pour de longues pages HTML,</p> </li> <li> <p>le code HTML est m\u00e9lang\u00e9 avec le JavaScript du serveur,</p> </li> <li> <p>difficile \u00e0 maintenir sur le long terme</p> </li> </ul> <p>\u00c0 utiliser pour des messages tr\u00e8s simples uniquement.</p>"},{"location":"15_NodeFormulaire/recuperation/#rediriger-vers-une-autre-page-html","title":"Rediriger vers une autre page HTML","text":"<p>Une solution plus propre est de rediriger le client vers un fichier HTML statique, que l\u2019on aura plac\u00e9 dans le dossier <code>public/</code>.</p> <pre><code>res.redirect(\"/merci.html\");\n</code></pre> <p>Dans ce cas, le serveur demande au navigateur d\u2019aller chercher la page <code>/merci.html</code>. Le probl\u00e8me est que dans ce cas nous n'envoyons aucune information contenu dans le formulaire...</p>"},{"location":"15_NodeFormulaire/recuperation/#rediriger-vers-une-page-html-transmettre-des-donnees-simples","title":"Rediriger vers une page HTML + transmettre des donn\u00e9es simples","text":"<p>Il est possible de transmettre des donn\u00e9es dans l\u2019URL pour qu\u2019une page HTML dynamique (gr\u00e2ce \u00e0 JavaScript) les r\u00e9cup\u00e8re.</p> <pre><code>res.redirect(`/resultat.html?nom=${encodeURIComponent(prenom)}`);\n</code></pre> <p>Dans la page <code>resultat.html</code>, un script JavaScript peut alors lire la valeur depuis l\u2019URL et adapter l\u2019affichage :</p> <pre><code>const params = new URLSearchParams(window.location.search);\nconst nom = params.get(\"nom\");\ndocument.getElementById(\"message\").textContent = `Bonjour ${nom} !`;\n</code></pre> <p>Ce script est \u00e0 mettre dans le frontend et non pas dans le fichier backend (server.js).</p> <p>Limites :</p> <ul> <li> <p>Donn\u00e9es visibles dans l\u2019URL</p> </li> <li> <p>Impossible d\u2019envoyer des objets complexes</p> </li> <li> <p>Pas s\u00e9curis\u00e9 pour des informations sensibles</p> </li> </ul> <p>D'autres m\u00e9thodes sont possibles pour outre-passer ces limites, comme l'utilisation de AJAX, n\u00e9anmoins il s'agit l\u00e0 de fonctionnalit\u00e9 plus avanc\u00e9e que nous ne verrons pas dans le cadre de ce cours.</p>"},{"location":"15_NodeFormulaire/recuperation/#25-lire-les-informations-dans-lurl-cote-client","title":"2.5 Lire les informations dans l\u2019URL c\u00f4t\u00e9 client","text":"<p>Il peut arriver que le serveur veuille transmettre une information \u00e0 une page HTML, sans passer par AJAX ou stockage local. Une m\u00e9thode simple consiste \u00e0 ajouter des param\u00e8tres dans l\u2019URL (par exemple apr\u00e8s une redirection), et \u00e0 les lire ensuite c\u00f4t\u00e9 client avec JavaScript.</p>"},{"location":"15_NodeFormulaire/recuperation/#exemple-durl-avec-parametres","title":"Exemple d\u2019URL avec param\u00e8tres :","text":"<p><pre><code>http://localhost:3000/resultat.html?user=John&amp;id=123\n</code></pre> Cette URL contient l'adresse de la page html \u00e0 affich\u00e9 <code>resultat.html</code> et \u00e9galement deux param\u00e8tres <code>user</code> dont la valeur est <code>John</code> et l'<code>id</code> dont la valeur est <code>123</code>. \u00c0 partir de cette URL il est possible de r\u00e9cup\u00e9rer ces param\u00e8tres en utilisant simplement un code JS c\u00f4t\u00e9 client (c'est-\u00e0-dire sans utiliser node.js)</p>"},{"location":"15_NodeFormulaire/recuperation/#code-js-pour-lire-ces-parametres","title":"Code JS pour lire ces param\u00e8tres","text":"<pre><code>const urlParams = new URLSearchParams(window.location.search);\nconst user = urlParams.get(\"user\");  // 'John'\nconst id = urlParams.get(\"id\");      // '123'\n\nconsole.log(user, id);\n</code></pre>"},{"location":"15_NodeFormulaire/recuperation/#explication","title":"Explication","text":"<ul> <li> <p>window.location.search r\u00e9cup\u00e8re la partie de l\u2019URL apr\u00e8s le ? (appel\u00e9e query string)</p> </li> <li> <p>URLSearchParams permet d\u2019analyser cette partie et d\u2019acc\u00e9der facilement aux diff\u00e9rentes valeurs envoy\u00e9es</p> </li> <li> <p>Vous pouvez ensuite utiliser ces valeurs pour personnaliser l\u2019affichage de la page</p> </li> </ul>"},{"location":"15_NodeFormulaire/recuperation/#a-quoi-ca-sert","title":"\u00c0 quoi \u00e7a sert ?","text":"<p>Cela peut \u00eatre un moyen simple pour le serveur d\u2019envoyer une information au frontend, sans recharger de donn\u00e9es ni utiliser de base de donn\u00e9es. Par exemple :</p> <ul> <li> <p>Afficher un message personnalis\u00e9 (Bonjour John !)</p> </li> <li> <p>Charger un \u00e9l\u00e9ment en fonction d\u2019un ID</p> </li> <li> <p>Adapter le contenu ou l\u2019apparence de la page</p> </li> </ul> <p>Attetntion</p> <p>Attention : les donn\u00e9es envoy\u00e9es dans l\u2019URL sont visibles par tout le monde. Ce n\u2019est pas une m\u00e9thode s\u00e9curis\u00e9e, et elle a des limitations (taille, confidentialit\u00e9\u2026). Une fa\u00e7on plus s\u00e9curis\u00e9e de faire serait, par exemple, d'utiliser AJAX.</p>"},{"location":"15_NodeFormulaire/tuto/","title":"Tuto r\u00e9cup\u00e9rer des donn\u00e9es d'un formulaire","text":""},{"location":"15_NodeFormulaire/tuto/#31-tuto-mini-site-formulaire-de-contact-avec-validation-serveur","title":"3.1 Tuto mini-site : formulaire de contact avec validation serveur","text":"<p>Dans ce tutoriel, nous allons cr\u00e9er une petite page de formulaire de contact avec les champs suivants : - Pr\u00e9nom - Nom - Email - Message</p> <p>Ce formulaire sera envoy\u00e9 avec la m\u00e9thode POST vers un serveur Express.</p>"},{"location":"15_NodeFormulaire/tuto/#objectif","title":"Objectif :","text":"<ul> <li>Le serveur v\u00e9rifie que tous les champs sont remplis</li> <li>Si c\u2019est le cas \u279c redirection vers une page de confirmation</li> <li>Sinon \u279c redirection vers le formulaire avec un param\u00e8tre d\u2019erreur dans l\u2019URL</li> <li>Le message d\u2019erreur est affich\u00e9 dynamiquement via JavaScript</li> </ul> <p>V\u00e9rification des champs c\u00f4t\u00e9 client</p> <p>Notez qu'il est \u00e9galement possible de v\u00e9rifier que les champs soient bien compl\u00e9t\u00e9s du c\u00f4t\u00e9 client avec la balise <code>required</code> (voir tuto HTML sur les formulaires). Ici, pour le but de l'exercice, nous le v\u00e9rifions uniquement du c\u00f4t\u00e9 serveur, mais il est g\u00e9n\u00e9ralement bon de le v\u00e9rifier des deux c\u00f4t\u00e9s. </p>"},{"location":"15_NodeFormulaire/tuto/#structure-du-projet","title":"Structure du projet","text":"<pre><code>mini-site/ \n\u251c\u2500\u2500 public/ \n|    \u251c\u2500\u2500 css/\n|    |    \u2514\u2500\u2500 style.css\n|    \u251c\u2500\u2500 js/\n|    |    \u2514\u2500\u2500 script.js\n\u2502    \u251c\u2500\u2500 contact.html\n\u2502    \u2514\u2500\u2500 confirmation.html\n\u2514\u2500\u2500 serveur.js\n</code></pre>"},{"location":"15_NodeFormulaire/tuto/#la-partie-html-contacthtml-et-confirmationhtml","title":"La partie HTML (contact.html et confirmation.html)","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Contact&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n  &lt;script src=\"js/script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;main&gt;\n    &lt;h1&gt;Formulaire de contact&lt;/h1&gt;\n\n    &lt;p id=\"erreur\" class=\"erreur-message\"&gt;&lt;/p&gt;\n\n    &lt;form action=\"/contact\" method=\"POST\"&gt;\n      &lt;label for=\"prenom\"&gt;Pr\u00e9nom :&lt;/label&gt;\n      &lt;input type=\"text\" id=\"prenom\" name=\"prenom\"&gt;&lt;br&gt;\n\n      &lt;label for=\"nom\"&gt;Nom :&lt;/label&gt;\n      &lt;input type=\"text\" id=\"nom\" name=\"nom\"&gt;&lt;br&gt;\n\n      &lt;label for=\"email\"&gt;Email :&lt;/label&gt;\n      &lt;input type=\"email\" id=\"email\" name=\"email\"&gt;&lt;br&gt;\n\n      &lt;label for=\"message\"&gt;Message :&lt;/label&gt;&lt;br&gt;\n      &lt;textarea id=\"message\" name=\"message\" rows=\"5\"&gt;&lt;/textarea&gt;&lt;br&gt;\n\n      &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Confirmation&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;main&gt;\n    &lt;h1&gt;Merci !&lt;/h1&gt;\n    &lt;p&gt;Votre message a bien \u00e9t\u00e9 envoy\u00e9.&lt;/p&gt;\n    &lt;a href=\"/contact.html\"&gt;Retour au formulaire&lt;/a&gt;\n  &lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"15_NodeFormulaire/tuto/#le-css-stylecss","title":"Le CSS (style.css)","text":"<pre><code>body {\n  font-family: sans-serif;\n  background-color: #f4f4f4;\n  padding: 20px;\n}\n\nmain {\n  max-width: 500px;\n  margin: auto;\n  background-color: white;\n  padding: 30px;\n  border-radius: 8px;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n}\n\nlabel {\n  display: block;\n  margin-top: 15px;\n}\n\ninput, textarea {\n  width: 100%;\n  padding: 8px;\n  margin-top: 5px;\n}\n\nbutton {\n  margin-top: 15px;\n  padding: 10px 15px;\n  background-color: #336699;\n  color: white;\n  border: none;\n  border-radius: 4px;\n}\n\n.erreur-message {\n  color: red;\n  font-weight: bold;\n}\n</code></pre>"},{"location":"15_NodeFormulaire/tuto/#le-script-frontend-scriptjs","title":"Le script frontend (script.js)","text":"<pre><code>const params = new URLSearchParams(window.location.search);\nconst erreur = params.get(\"erreur\");\n\nif (erreur === \"1\") {\n  const messageErreur = document.getElementById(\"erreur\");\n  messageErreur.textContent = \"Tous les champs doivent \u00eatre remplis.\";\n}\n</code></pre> <p>Ce script regarde si un param\u00e8tre erreur est pr\u00e9sent dans l'URL, si c'est le cas, il s\u00e9lectionne la balise <code>\"erreur\"</code> du code HTML et y ajoute un texte. </p>"},{"location":"15_NodeFormulaire/tuto/#le-script-backend-serverjs","title":"Le script backend (server.js)","text":"<p><pre><code>const express = require(\"express\");\nconst path = require(\"path\");\nconst app = express();\nconst PORT = 3000;\n\n// Middleware pour lire les donn\u00e9es de formulaire\napp.use(express.urlencoded({ extended: true }));\n\n// Sert les fichiers statiques (HTML, CSS, JS)\napp.use(express.static(\"public\"));\n\n// Pour envoyerr sur la page de contact (plut\u00f4t que index.html)\napp.get('/', (req, res) =&gt; {\n    res.sendFile(__dirname + '/public/contact.html');\n  });\n\napp.post(\"/contact\", (req, res) =&gt; {\n  const { prenom, nom, email, message } = req.body;\n\n  if (!prenom || !nom || !email || !message) {\n    // Redirection avec un param\u00e8tre dans l'URL en cas d'erreur\n    return res.redirect(\"/contact.html?erreur=1\");\n  }\n\n  // Si tout est rempli, redirection vers une page de confirmation\n  res.redirect(\"/confirmation.html\");\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Serveur d\u00e9marr\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre> Ce code permet de cr\u00e9er un serveur et de v\u00e9rifier que les donn\u00e9es re\u00e7ues par une requ\u00eate post sont bien compl\u00e8te, si c'est le cas, on redirige vers la page de confirmation, sinon on redirige vers la page de contact, mais avec un param\u00e8tre <code>\"erreur\"</code> dans l'URL. </p> <p>Ce projet montre un cycle complet : formulaire \u2192 validation \u2192 redirection   </p>"},{"location":"16_NodeBD/","title":"Introduction","text":""},{"location":"16_NodeBD/#11-bases-de-donnees-pour-les-sites-web","title":"1.1 Bases de donn\u00e9es pour les sites web","text":"<p>Lorsque l\u2019on cr\u00e9e un site web dynamique, il devient vite n\u00e9cessaire de stocker des informations quelque part. On parle alors de base de donn\u00e9es : un outil qui permet de sauvegarder, rechercher, modifier ou supprimer des donn\u00e9es de mani\u00e8re structur\u00e9e.</p> <p>Les donn\u00e9es sont \u00e9videmment sauvegard\u00e9es du c\u00f4t\u00e9 serveur (backend), l'utilisateur et donc le frontend, n'y a pas acc\u00e8s directement. Pourtant, les donn\u00e9es sont souvent utilis\u00e9es dans le frontend :</p> <ul> <li> <p>Le site web doit afficher des donn\u00e9es sauvegard\u00e9es dans une BD (par exemple le nom de l'utilisateur connect\u00e9, l'\u00e9tat de son panier,...)</p> </li> <li> <p>L'utilisateur envoie des donn\u00e9es au serveur. Par exemple, quand il s'enregistre sur un site web, il le fait via un formulaire se trouvant dans le frontend. Le backend (le serveur) doit r\u00e9cup\u00e9rer ces donn\u00e9es et puis les enregistrer dans une base de donn\u00e9es.</p> </li> </ul>"},{"location":"16_NodeBD/#12-rappel-sql","title":"1.2 Rappel SQL","text":"<p>Le SQL (Structured Query Language) est un langage utilis\u00e9 pour manipuler des bases de donn\u00e9es relationnelles.</p> <p>Avec SQL, on peut : - cr\u00e9er une table (<code>CREATE TABLE</code>) - ajouter des donn\u00e9es (<code>INSERT INTO</code>) - lire des donn\u00e9es (<code>SELECT</code>) - modifier ou supprimer des donn\u00e9es (<code>UPDATE</code>, <code>DELETE</code>)</p>"},{"location":"16_NodeBD/#rappel-sgbd-systeme-de-gestion-de-base-de-donnees","title":"Rappel SGBD (Syst\u00e8me de Gestion de Base de Donn\u00e9es)","text":"<p>Un SGBD est un programme qui g\u00e8re les bases de donn\u00e9es et permet d\u2019y acc\u00e9der depuis un langage de programmation.</p> <p>Quelques SGBD connus :</p> <ul> <li> <p>MySQL</p> </li> <li> <p>PostgreSQL</p> </li> <li> <p>Oracle</p> </li> <li> <p>SQLite (celui que nous allons utiliser)</p> </li> </ul>"},{"location":"16_NodeBD/#14-pourquoi-utiliser-sqlite-dans-ce-cours","title":"1.4 Pourquoi utiliser SQLite dans ce cours ?","text":"<p>Pour ce cours, nous allons utiliser SQLite, un SGBD l\u00e9ger et int\u00e9gr\u00e9.</p> <p>Avantages de SQLite :</p> <ul> <li> <p>Tr\u00e8s simple \u00e0 installer : une base = 1 seul fichier .db</p> </li> <li> <p>Parfait pour un projet local</p> </li> <li> <p>Compatible avec Node.js</p> </li> <li> <p>Aucune configuration serveur n\u00e9cessaire</p> </li> </ul> <p>Limites :</p> <ul> <li> <p>Pas adapt\u00e9 \u00e0 des sites avec beaucoup de trafic ou d\u2019utilisateurs</p> </li> <li> <p>Pas con\u00e7u pour \u00eatre utilis\u00e9 \u00e0 distance sur un serveur web r\u00e9el</p> </li> </ul>"},{"location":"16_NodeBD/ajax/","title":"4. Introduction \u00e0 AJAX","text":""},{"location":"16_NodeBD/ajax/#41-quest-ce-quajax","title":"4.1 Qu\u2019est-ce qu\u2019AJAX ?","text":"<p>Lorsque vous remplissez un formulaire ou cliquez sur un bouton, le navigateur peut :</p> <ul> <li> <p>soit recharger toute la page pour obtenir une r\u00e9ponse du serveur,</p> </li> <li> <p>soit, plus discr\u00e8tement, envoyer une requ\u00eate en arri\u00e8re-plan, et mettre \u00e0 jour la page sans la recharger.</p> </li> </ul> <p>Ce deuxi\u00e8me cas s\u2019appelle AJAX (Asynchronous JavaScript And XML).</p>"},{"location":"16_NodeBD/ajax/#a-quoi-ca-sert","title":"\u00c0 quoi \u00e7a sert ?","text":"<p>AJAX permet au JavaScript dans le navigateur de :</p> <ul> <li> <p>envoyer une requ\u00eate vers le serveur (souvent avec <code>fetch()</code>)</p> </li> <li> <p>recevoir une r\u00e9ponse (souvent en JSON)</p> </li> <li> <p>mettre \u00e0 jour le contenu de la page sans quitter l\u2019\u00e9cran</p> </li> </ul> <p>Cela rend les sites plus r\u00e9actifs et plus agr\u00e9ables \u00e0 utiliser.</p>"},{"location":"16_NodeBD/ajax/#ce-que-nous-allons-faire","title":"Ce que nous allons faire","text":"<p>Dans ce cours, nous n\u2019allons pas explorer toutes les possibilit\u00e9s d\u2019AJAX, mais nous allons :</p> <ul> <li> <p>utiliser <code>fetch()</code> pour interroger le serveur,</p> </li> <li> <p>recevoir des donn\u00e9es au format JSON,</p> </li> <li> <p>afficher dynamiquement ces donn\u00e9es sur la page gr\u00e2ce au JavaScript frontend.</p> </li> </ul> <p>Cela nous suffira largement pour :</p> <ul> <li> <p>exploiter les fonctions du repository que nous venons de cr\u00e9er,</p> </li> <li> <p>par exemple pour afficher la liste des utilisateurs de la base de donn\u00e9es.</p> </li> </ul> <p>Vous n\u2019avez pas besoin de conna\u00eetre tous les d\u00e9tails techniques d\u2019AJAX. Vous devez surtout comprendre que cela nous permet de connecter JavaScript au serveur, et d\u2019utiliser les donn\u00e9es dynamiques sans recharger la page.</p>"},{"location":"16_NodeBD/ajax/#42-introduction-a-fetch","title":"4.2 Introduction \u00e0 <code>fetch()</code>","text":"<p>Pour faire une requ\u00eate AJAX avec JavaScript moderne, on utilise g\u00e9n\u00e9ralement la fonction <code>fetch()</code>. Elle permet de demander des donn\u00e9es au serveur, et de r\u00e9cup\u00e9rer une r\u00e9ponse sans recharger la page.</p>"},{"location":"16_NodeBD/ajax/#exemple-simple-recuperer-un-message-depuis-le-serveur","title":"Exemple simple : r\u00e9cup\u00e9rer un message depuis le serveur","text":""},{"location":"16_NodeBD/ajax/#1-route-cote-serveur","title":"1. Route c\u00f4t\u00e9 serveur","text":"<p>Dans votre fichier <code>server.js</code>, ajoutez cette route tr\u00e8s simple :</p> <p><pre><code>app.get(\"/api/message\", (req, res) =&gt; {\n  res.json({ message: \"Bonjour depuis le serveur !\" });\n});\n</code></pre> Ce code cr\u00e9e une route qui, quand elle sera appel\u00e9, renverra une r\u00e9ponse sous un format <code>json</code> \u00e0 la page qui l'a appel\u00e9. </p>"},{"location":"16_NodeBD/ajax/#2-code-javascript-cote-client-dans-scriptjs-par-exemple","title":"2. Code JavaScript c\u00f4t\u00e9 client (dans script.js par exemple)","text":"<p><pre><code>fetch(\"/api/message\")\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    console.log(\"Message du serveur :\", data.message);\n  })\n  .catch(error =&gt; {\n    console.error(\"Erreur lors du fetch :\", error);\n  });\n</code></pre> Explication :</p> <ul> <li> <p><code>fetch(...)</code> envoie une requ\u00eate <code>GET</code> vers l\u2019URL <code>/api/message</code></p> </li> <li> <p><code>response.json()</code> transforme la r\u00e9ponse re\u00e7ue (format JSON) en un objet utilisable</p> </li> <li> <p>Ensuite, on peut utiliser les donn\u00e9es retourn\u00e9es dans le code JS</p> </li> <li> <p>En cas d\u2019erreur (connexion impossible, mauvaise URL, etc.), le <code>.catch(...)</code> permet d\u2019afficher un message d\u2019erreur</p> </li> </ul>"},{"location":"16_NodeBD/ajax/#3-resultat-dans-la-console-du-navigateur","title":"3. R\u00e9sultat dans la console du navigateur","text":"<p>Message du serveur :  <pre><code>Bonjour depuis le serveur !\n</code></pre></p> <p>fetch</p> <p><code>fetch()</code> est une m\u00e9thode tr\u00e8s pratique pour connecter le JavaScript c\u00f4t\u00e9 client avec les donn\u00e9es du serveur.</p>"},{"location":"16_NodeBD/exercice/","title":"8. Exercice \u2013 \u00c9tendre le MiniBlog avec une base de donn\u00e9es","text":"<p>Dans cet exercice, vous allez reprendre le MiniBlog que vous aviez r\u00e9alis\u00e9 lors du cours pr\u00e9c\u00e9dent, et vous allez l\u2019am\u00e9liorer pour qu\u2019il soit connect\u00e9 \u00e0 une base de donn\u00e9es r\u00e9elle gr\u00e2ce \u00e0 Express et SQLite.</p>"},{"location":"16_NodeBD/exercice/#objectif","title":"Objectif","text":"<p>Jusqu\u2019\u00e0 pr\u00e9sent, les articles \u00e9taient \u00e9crits en dur dans le HTML. L\u2019objectif est maintenant de rendre le site dynamique, c\u2019est-\u00e0-dire :</p> <ul> <li> <p>les articles sont enregistr\u00e9s dans une base de donn\u00e9es ;</p> </li> <li> <p>la page d\u2019accueil (<code>index.html</code>) affiche automatiquement tous les articles pr\u00e9sents dans la base ;</p> </li> <li> <p>la page d\u2019un article (<code>article.html</code>) affiche dynamiquement le contenu correspondant \u00e0 l\u2019ID dans l\u2019URL ;</p> </li> <li> <p>la page d\u2019ajout (<code>ajout.html</code>) permet d\u2019ajouter un nouvel article via un formulaire HTML classique.</p> </li> </ul>"},{"location":"16_NodeBD/exercice/#consignes","title":"Consignes","text":"<ol> <li> <p>Reprenez le projet MiniBlog du cours pr\u00e9c\u00e9dent.</p> </li> <li> <p>Cr\u00e9ez une base de donn\u00e9es SQLite nomm\u00e9e par exemple <code>blog.db</code> dans un dossier <code>data/</code>.    \u00c0 l\u2019aide de DataGrip (ou d\u2019un script SQL), cr\u00e9ez une table <code>articles</code> avec les colonnes suivantes :</p> <ul> <li> <p><code>id</code> (entier, cl\u00e9 primaire, auto-incr\u00e9ment\u00e9)</p> </li> <li> <p><code>titre</code> (texte)</p> </li> <li> <p><code>contenu</code> (texte)</p> </li> </ul> </li> <li> <p>Ajoutez au moins 10 articles dans cette base de donn\u00e9es.</p> </li> <li> <p>Cr\u00e9ez une classe <code>ArticleRepository</code> dans un dossier <code>repository/</code>, contenant les m\u00e9thodes suivantes :</p> <ul> <li> <p><code>getAllArticles(callback)</code> \u2192 retourne tous les articles</p> </li> <li> <p><code>getArticleById(id, callback)</code> \u2192 retourne un article sp\u00e9cifique</p> </li> <li> <p><code>insertArticle(titre, contenu, callback)</code> \u2192 ins\u00e8re un nouvel article</p> </li> </ul> </li> <li> <p>Modifiez <code>server.js</code> pour :</p> <ul> <li> <p>ajouter une route <code>GET /api/articles</code> pour retourner tous les articles en JSON</p> </li> <li> <p>ajouter une route <code>GET /api/articles/:id</code> pour retourner un article sp\u00e9cifique</p> </li> <li> <p>ajouter une route <code>POST /ajouter</code> qui ins\u00e8re un article depuis un formulaire HTML</p> </li> </ul> </li> <li> <p>Modifiez <code>index.html</code> pour qu\u2019il affiche dynamiquement tous les articles pr\u00e9sents dans la base (via <code>fetch()</code>).</p> </li> <li> <p>Modifiez <code>article.html</code> pour qu\u2019il affiche l\u2019article correspondant \u00e0 l\u2019<code>id</code> pass\u00e9 dans l\u2019URL.</p> </li> <li> <p>Modifiez <code>ajout.html</code> pour que le formulaire fonctionne et ins\u00e8re les donn\u00e9es dans la base.</p> </li> <li> <p>Ajoutez un message de confirmation ou d\u2019erreur apr\u00e8s soumission du formulaire.</p> </li> </ol>"},{"location":"16_NodeBD/exercice/#astuce","title":"Astuce","text":"<p>Le code a d\u00e9j\u00e0 \u00e9t\u00e9 vu \u00e9tape par \u00e9tape durant la s\u00e9ance. Vous pouvez vous appuyer sur les exemples du mini tutoriel (section 7) pour vous guider dans l'exercice.</p>"},{"location":"16_NodeBD/exercice/#a-la-fin-votre-site-doit-etre-capable-de","title":"\u00c0 la fin, votre site doit \u00eatre capable de :","text":"<ul> <li> <p>afficher dynamiquement une liste d\u2019articles depuis la base ;</p> </li> <li> <p>afficher le d\u00e9tail d\u2019un article s\u00e9lectionn\u00e9 ;</p> </li> <li> <p>ajouter un nouvel article depuis un formulaire HTML.</p> </li> </ul> <p>Bon courage et n\u2019h\u00e9sitez pas \u00e0 tester chaque partie au fur et \u00e0 mesure de votre avancement.</p>"},{"location":"16_NodeBD/lireDonnees/","title":"5. Lire des donn\u00e9es depuis la base de donn\u00e9es","text":""},{"location":"16_NodeBD/lireDonnees/#51-lire-toutes-les-donnees-avec-express-fetch-getalluser","title":"5.1 Lire toutes les donn\u00e9es avec Express + fetch (getAllUser)","text":"<p>Nous avons maintenant tous les \u00e9l\u00e9ments n\u00e9cessaires pour :</p> <ul> <li> <p>interroger la base de donn\u00e9es (avec notre m\u00e9thode <code>getAllUsers()</code> du repository),</p> </li> <li> <p>r\u00e9cup\u00e9rer ces donn\u00e9es dans le serveur Express,</p> </li> <li> <p>les envoyer au navigateur via une route <code>GET</code>,</p> </li> <li> <p>et les afficher c\u00f4t\u00e9 client avec <code>fetch()</code>.</p> </li> </ul>"},{"location":"16_NodeBD/lireDonnees/#etapes-resumees","title":"\u00c9tapes r\u00e9sum\u00e9es","text":"<ol> <li> <p>Le client (navigateur) utilise <code>fetch(\"/api/users\")</code></p> </li> <li> <p>Express intercepte cette requ\u00eate via une route <code>GET /api/users</code></p> </li> <li> <p>Le serveur appelle la m\u00e9thode <code>getAllUsers()</code> de notre <code>UserRepository</code></p> </li> <li> <p>Le r\u00e9sultat est renvoy\u00e9 au client au format JSON</p> </li> </ol>"},{"location":"16_NodeBD/lireDonnees/#exemple-de-code-dans-serverjs","title":"Exemple de code dans <code>server.js</code>","text":"<pre><code>const UserRepository = require(\"./repository/UserRepository\");\nconst userRepo = new UserRepository();\n\napp.get(\"/api/users\", (req, res) =&gt; {\n  userRepo.getAllUsers((err, users) =&gt; {\n    if (err) {\n      return res.status(500).json({ error: \"Erreur lors de la r\u00e9cup\u00e9ration\" });\n    }\n    res.json(users);\n  });\n});\n</code></pre> <p>Cette route interagit avec la base et renvoie la liste compl\u00e8te des utilisateurs en JSON.</p>"},{"location":"16_NodeBD/lireDonnees/#exemple-de-code-cote-client-scriptjs","title":"Exemple de code c\u00f4t\u00e9 client <code>script.js</code>","text":"<pre><code>fetch(\"/api/users\")\n  .then(response =&gt; response.json())\n  .then(users =&gt; {\n    const container = document.getElementById(\"users\");\n\n    users.forEach(user =&gt; {\n      const p = document.createElement(\"p\");\n      p.textContent = `${user.nom} \u2013 ${user.email}`;\n      container.appendChild(p);\n    });\n  })\n  .catch(error =&gt; {\n    console.error(\"Erreur lors de la r\u00e9cup\u00e9ration des utilisateurs :\", error);\n  });\n</code></pre> <p>Lorsque la page se charge, le script :</p> <ul> <li> <p>r\u00e9cup\u00e8re les utilisateurs depuis le serveur,</p> </li> <li> <p>cr\u00e9e dynamiquement des \u00e9l\u00e9ments HTML (dans le <code>forEach</code>),</p> </li> <li> <p>et les ins\u00e8re dans la page sans rechargement (<code>container.appendChild(p)</code>).</p> </li> </ul> <p>C\u2019est une utilisation simple et efficace de fetch + DOM pour afficher des donn\u00e9es dynamiques.</p>"},{"location":"16_NodeBD/lireDonnees/#exemple-html-associe-indexhtml-ou-autre","title":"Exemple HTML associ\u00e9 (index.html ou autre)","text":"<pre><code>&lt;body&gt;\n  &lt;h1&gt;Liste des utilisateurs&lt;/h1&gt;\n  &lt;section id=\"users\"&gt;&lt;/section&gt;\n&lt;/body&gt;\n</code></pre> <p>Au final avec tous ces codes voici ce qu'il se passe :</p> <ul> <li> <p>Lorsque la page est charg\u00e9e, le navigateur envoie automatiquement une requ\u00eate <code>GET</code> vers <code>/api/users</code></p> </li> <li> <p>Le serveur r\u00e9cup\u00e8re les donn\u00e9es dans la base et les retourne au client</p> </li> <li> <p>Le JavaScript affiche les utilisateurs dynamiquement dans la page</p> </li> </ul>"},{"location":"16_NodeBD/lireDonnees/#52-lire-toutes-les-donnees-avec-express-fetch-getuserbyid","title":"5.2 Lire toutes les donn\u00e9es avec Express + fetch (getUserById)","text":"<p>Dans cette section, nous allons utiliser la m\u00e9thode <code>getUserById()</code> de notre <code>UserRepository</code> pour r\u00e9cup\u00e9rer un seul utilisateur en fonction de son identifiant.</p>"},{"location":"16_NodeBD/lireDonnees/#objectif","title":"Objectif","text":"<ul> <li> <p>Le frontend appelle une route comme <code>/api/users/2</code></p> </li> <li> <p>Le serveur interroge la base de donn\u00e9es et renvoie uniquement l\u2019utilisateur avec l\u2019ID 2</p> </li> <li> <p>Le JavaScript affiche ses informations dans la page</p> </li> </ul>"},{"location":"16_NodeBD/lireDonnees/#exemple-de-route-dans-serverjs","title":"Exemple de route dans <code>server.js</code>","text":"<pre><code>app.get(\"/api/users/:id\", (req, res) =&gt; {\n  const id = req.params.id;\n\n  userRepo.getUserById(id, (err, user) =&gt; {\n    if (err) {\n      return res.status(500).json({ error: \"Erreur serveur\" });\n    }\n    if (!user) {\n      return res.status(404).json({ error: \"Utilisateur non trouv\u00e9\" });\n    }\n    res.json(user);\n  });\n});\n</code></pre>"},{"location":"16_NodeBD/lireDonnees/#explication","title":"Explication","text":"<ul> <li> <p><code>:id</code> dans l\u2019URL signifie que l\u2019on attend un param\u00e8tre dynamique (ex. : <code>/api/users/3</code>)</p> </li> <li> <p><code>req.params.id</code> permet de r\u00e9cup\u00e9rer cette valeur dans le code</p> </li> <li> <p>La m\u00e9thode <code>getUserById</code> cherche dans la base un utilisateur correspondant</p> </li> <li> <p>On retourne une erreur 404 si aucun utilisateur n\u2019est trouv\u00e9</p> </li> <li> <p>Si l'utilisateur est trouv\u00e9, on le retourne dans un <code>json</code></p> </li> </ul>"},{"location":"16_NodeBD/lireDonnees/#exemple-de-code-client-scriptjs","title":"Exemple de code client <code>script.js</code>","text":"<pre><code>fetch(\"/api/users/2\")\n  .then(response =&gt; response.json())\n  .then(user =&gt; {\n    const container = document.getElementById(\"user\");\n\n    const div = document.createElement(\"div\");\n    div.innerHTML = `\n      &lt;h2&gt;${user.nom}&lt;/h2&gt;\n      &lt;p&gt;Email : ${user.email}&lt;/p&gt;\n    `;\n    container.appendChild(div);\n  })\n  .catch(error =&gt; {\n    console.error(\"Erreur lors de la r\u00e9cup\u00e9ration de l\u2019utilisateur :\", error);\n  });\n</code></pre> <p>On r\u00e9cup\u00e8re la r\u00e9ponse contenant les informations sur l'utilisateurs et on les affiche dans un nouveau <code>div</code>.</p>"},{"location":"16_NodeBD/lireDonnees/#exemple-html-associe","title":"Exemple HTML associ\u00e9","text":"<p><pre><code>&lt;body&gt;\n  &lt;h1&gt;Fiche utilisateur&lt;/h1&gt;\n  &lt;section id=\"user\"&gt;&lt;/section&gt;\n&lt;/body&gt;\n</code></pre> Au terme de tous ces scripts le r\u00e9sultat attendu est le suivant :</p> <ul> <li> <p>L\u2019utilisateur avec l\u2019ID 2 est r\u00e9cup\u00e9r\u00e9 depuis le serveur</p> </li> <li> <p>Ses informations sont affich\u00e9es dans la page</p> </li> <li> <p>Le tout se fait sans rechargement, gr\u00e2ce \u00e0 <code>fetch()</code></p> </li> </ul>"},{"location":"16_NodeBD/repository/","title":"3. Repository","text":""},{"location":"16_NodeBD/repository/#31-introduction-au-concept-de-repository","title":"3.1 Introduction au concept de Repository","text":"<p>Pour pouvoir discuter avec une base de donn\u00e9es, nous allons organiser notre code de mani\u00e8re claire et structur\u00e9e.</p> <p>La m\u00e9thode que nous allons utiliser est la suivante : Cr\u00e9er une classe d\u00e9di\u00e9e \u00e0 la gestion de la base de donn\u00e9es, que l\u2019on appelle un repository.</p>"},{"location":"16_NodeBD/repository/#quest-ce-quun-repository","title":"Qu\u2019est-ce qu\u2019un repository ?","text":"<p>Un repository est un fichier JavaScript (une classe) qui a pour r\u00f4le de :</p> <ul> <li> <p>se connecter \u00e0 la base de donn\u00e9es (au moment de sa cr\u00e9ation),</p> </li> <li> <p>contenir des m\u00e9thodes (fonctions) qui permettent de faire des actions sur la base.</p> </li> </ul> <p>Chaque m\u00e9thode aura une mission bien pr\u00e9cise :</p> <ul> <li> <p>r\u00e9cup\u00e9rer toutes les donn\u00e9es d\u2019une table (<code>SELECT *</code>)</p> </li> <li> <p>r\u00e9cup\u00e9rer une donn\u00e9e par son identifiant (<code>SELECT WHERE id = ...</code>)</p> </li> <li> <p>ajouter une donn\u00e9e (<code>INSERT INTO</code>)</p> </li> <li> <p>\u00e9ventuellement modifier ou supprimer une donn\u00e9e (<code>UPDATE</code>, <code>DELETE</code>)</p> </li> </ul>"},{"location":"16_NodeBD/repository/#pourquoi-faire-ca-dans-une-classe-a-part","title":"Pourquoi faire \u00e7a dans une classe \u00e0 part ?","text":"<ul> <li> <p>Cela permet de s\u00e9parer la gestion des donn\u00e9es du reste de l\u2019application (routes, logique du site, etc.)</p> </li> <li> <p>Le code est plus lisible, plus r\u00e9utilisable, et plus facile \u00e0 tester</p> </li> <li> <p>Si on change de base de donn\u00e9es plus tard, on n\u2019aura \u00e0 modifier que cette partie</p> </li> </ul> <p>Pour l\u2019instant, vous pouvez voir un repository comme un fichier <code>.js</code> contenant plusieurs fonctions, et qui est charg\u00e9 de parler avec la base de donn\u00e9es.</p>"},{"location":"16_NodeBD/repository/#32-rappel-classe-objet","title":"3.2 Rappel : classe / objet","text":"<p>M\u00eame si vous n\u2019avez pas encore vu ce concept en profondeur, il est utile de conna\u00eetre quelques bases sur les classes et les objets, car nous allons d\u00e9j\u00e0 en utiliser pour les <code>Repository</code>.</p>"},{"location":"16_NodeBD/repository/#classe-et-objet-cest-quoi","title":"Classe et objet, c\u2019est quoi ?","text":"<ul> <li> <p>Une classe, c\u2019est un peu comme un mod\u00e8le ou un plan que l\u2019on \u00e9crit dans un fichier.</p> </li> <li> <p>Un objet, c\u2019est une version concr\u00e8te de ce plan, avec laquelle on peut interagir dans le code.</p> </li> </ul> <p>Par exemple :  </p> <p>On peut imaginer qu\u2019une classe repr\u00e9sente un \"robot\", et chaque objet est un robot r\u00e9el qui ex\u00e9cute des actions.</p>"},{"location":"16_NodeBD/repository/#et-dans-notre-cas","title":"Et dans notre cas ?","text":"<p>Dans notre cas, on va cr\u00e9er une classe qui repr\u00e9sente un acc\u00e8s \u00e0 la base de donn\u00e9es (ce qu\u2019on appelle un repository). Ce repository contiendra :</p> <ul> <li> <p>une connexion \u00e0 la base</p> </li> <li> <p>plusieurs m\u00e9thodes pour effectuer des actions : lire, ajouter, chercher...</p> </li> </ul>"},{"location":"16_NodeBD/repository/#pourquoi-utiliser-une-classe","title":"Pourquoi utiliser une classe ?","text":"<p>On pourrait faire tout \u00e7a dans un simple fichier <code>.js</code> avec quelques fonctions, mais ce ne serait pas tr\u00e8s organis\u00e9.</p> <p>En utilisant une classe :</p> <ul> <li> <p>on suit une structure plus propre et standard (comme dans les vrais projets)</p> </li> <li> <p>on regroupe toutes les fonctions li\u00e9es \u00e0 la base de donn\u00e9es dans un seul endroit</p> </li> <li> <p>on pourra plus facilement faire \u00e9voluer le code plus tard</p> </li> </ul> <p>Ainsi, on va se permettre d'\u00e9crire la syntaxe d'une classe m\u00eame si vous n'avez pas encore bien vu ce concept. Pour le moment, vous pouvez retenir que c'est similaire \u00e0 un fichier qui contient diff\u00e9rentes fonctions similaires. </p>"},{"location":"16_NodeBD/repository/#33-details-sur-la-classe-repository","title":"3.3 D\u00e9tails sur la classe Repository","text":"<p>Nous allons maintenant construire un exemple concret de repository.</p> <p>Imaginons que nous avons une base de donn\u00e9es contenant une table appel\u00e9e <code>users</code>. Cette table pourrait contenir les colonnes suivantes :</p> <ul> <li> <p><code>id</code> : identifiant unique</p> </li> <li> <p><code>nom</code> : le nom de l\u2019utilisateur</p> </li> <li> <p><code>email</code> : son adresse mail</p> </li> </ul> <p>(Voir image ci-dessous pour une repr\u00e9sentation visuelle de la table)</p>"},{"location":"16_NodeBD/repository/#objectif","title":"Objectif","text":"<p>Nous allons cr\u00e9er une classe <code>UserRepository</code> dont le r\u00f4le sera de :</p> <ul> <li> <p>se connecter \u00e0 la base de donn\u00e9es</p> </li> <li> <p>proposer plusieurs m\u00e9thodes (=fonctions) pour interagir avec la table <code>users</code></p> </li> </ul> <p>Cette classe sera d\u00e9finie dans un fichier \u00e0 part, par exemple <code>UserRepository.js</code>.</p>"},{"location":"16_NodeBD/repository/#pourquoi-faire-ca","title":"Pourquoi faire \u00e7a ?","text":"<p>Cr\u00e9er une classe comme celle-ci nous permet de :</p> <ul> <li> <p>centraliser toute la logique d\u2019acc\u00e8s aux donn\u00e9es</p> </li> <li> <p>r\u00e9utiliser facilement les m\u00e9thodes dans notre serveur Express</p> </li> <li> <p>\u00e9crire un code plus propre, clair et standardis\u00e9</p> </li> </ul>"},{"location":"16_NodeBD/repository/#exemple-de-structure-de-la-classe-userrepository","title":"Exemple de structure de la classe <code>UserRepository</code>","text":"<pre><code>const sqlite3 = require(\"sqlite3\").verbose();\nconst path = require(\"path\");\n\nclass UserRepository {\n  constructor() {\n    // Le constructeur est appel\u00e9 lorsqu\u2019on cr\u00e9e un \"objet\" UserRepository\n    // C\u2019est ici que l\u2019on se connecte \u00e0 la base de donn\u00e9es\n    this.db = new sqlite3.Database(path.join(__dirname, \"../data/site.db\"));\n  }\n\n  // M\u00e9thode pour r\u00e9cup\u00e9rer tous les utilisateurs\n  getAllUsers(callback) {\n    const query = \"SELECT * FROM users\";\n    this.db.all(query, [], (err, rows) =&gt; {\n        if (err) {\n        return callback(err);\n        }\n        callback(null, rows); // rows est un tableau contenant tous les utilisateurs\n    });\n  }\n\n  // M\u00e9thode pour r\u00e9cup\u00e9rer un utilisateur par son ID\n  getUserById(id, callback) {\n    const query = \"SELECT * FROM users WHERE id = ?\";\n    this.db.get(query, [id], (err, row) =&gt; {\n        if (err) {\n        return callback(err);\n        }\n        callback(null, row); // row est l\u2019objet repr\u00e9sentant l\u2019utilisateur, ou null si non trouv\u00e9\n    });\n\n  }\n\n  // M\u00e9thode pour ins\u00e9rer un nouvel utilisateur\n  insertUser(nom, email, callback) {\n    const query = \"INSERT INTO users (nom, email) VALUES (?, ?)\";\n    this.db.run(query, [nom, email], function (err) {\n        if (err) {\n        return callback(err);\n        }\n        // this.lastID contient l\u2019id du nouvel utilisateur ins\u00e9r\u00e9\n        callback(null, { id: this.lastID });\n    });\n  }\n}\n\nmodule.exports = UserRepository;\n</code></pre>"},{"location":"16_NodeBD/repository/#ce-quon-remarque-ici","title":"Ce qu\u2019on remarque ici","text":"<ul> <li> <p>Le constructeur (constructor) est ex\u00e9cut\u00e9 une fois lorsqu\u2019on cr\u00e9e un objet <code>UserRepository</code></p> </li> <li> <p>La base de donn\u00e9es est ouverte une seule fois, gr\u00e2ce \u00e0 <code>sqlite3.Database(...)</code></p> </li> <li> <p>Chaque m\u00e9thode correspond \u00e0 une action possible sur la base de donn\u00e9es :</p> <pre><code>1. lire tous les utilisateurs\n\n2. lire un utilisateur sp\u00e9cifique\n\n3. ajouter un nouvel utilisateur\n</code></pre> </li> </ul>"},{"location":"16_NodeBD/repository/#34-la-methode-getall","title":"3.4 La m\u00e9thode <code>getAll()</code>","text":"<p>Commen\u00e7ons par la m\u00e9thode la plus simple : celle qui permet de r\u00e9cup\u00e9rer tous les \u00e9l\u00e9ments d\u2019une table. Dans notre exemple, on souhaite r\u00e9cup\u00e9rer tous les utilisateurs pr\u00e9sents dans la table <code>users</code>.</p>"},{"location":"16_NodeBD/repository/#objectif_1","title":"Objectif","text":"<p>La m\u00e9thode <code>getAllUsers()</code> va :</p> <ul> <li> <p>envoyer une requ\u00eate SQL \u00e0 la base de donn\u00e9es (<code>SELECT * FROM users</code>)</p> </li> <li> <p>r\u00e9cup\u00e9rer tous les utilisateurs sous forme d\u2019un tableau</p> </li> <li> <p>passer ce tableau \u00e0 une fonction callback, pour que notre serveur Express puisse ensuite les envoyer au frontend en JSON (on en rediscute \u00e0 la section suivante)</p> </li> </ul>"},{"location":"16_NodeBD/repository/#exemple-de-methode-getallusers","title":"Exemple de m\u00e9thode <code>getAllUsers()</code>","text":"<pre><code>getAllUsers(callback) {\n  const query = \"SELECT * FROM users\";\n  this.db.all(query, [], (err, rows) =&gt; {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, rows); // rows est un tableau contenant tous les utilisateurs\n  });\n}\n</code></pre> <p>D\u00e9tail du fonctionnement :</p> <p>-<code>this.db.all(...)</code> est une m\u00e9thode fournie par SQLite pour ex\u00e9cuter une requ\u00eate qui retourne plusieurs r\u00e9sultats.</p> <ul> <li><code>rows</code> est un tableau d\u2019objets JavaScript, o\u00f9 chaque objet correspond \u00e0 une ligne de la table <code>users</code>.</li> </ul> <p>Exemple de contenu de rows : <pre><code>[\n  { id: 1, nom: \"Alice\", email: \"alice@example.com\" },\n  { id: 2, nom: \"Bob\", email: \"bob@example.com\" }\n]\n</code></pre> - Le <code>callback(null, rows)</code> permet d\u2019utiliser ce tableau ailleurs dans le code, typiquement pour l\u2019envoyer au navigateur.</p> <p>Cette m\u00e9thode est tr\u00e8s pratique pour afficher une liste compl\u00e8te d\u2019\u00e9l\u00e9ments depuis la base dans une page web. On l\u2019utilisera pour afficher dynamiquement des donn\u00e9es avec JavaScript.</p> <p>Nous verrons comment nous pouvons utiliser cette m\u00e9thode dans la section suivante. </p>"},{"location":"16_NodeBD/repository/#35-la-methode-getbyid","title":"3.5 La m\u00e9thode <code>getById()</code>","text":"<p>Cette m\u00e9thode permet de r\u00e9cup\u00e9rer un seul \u00e9l\u00e9ment pr\u00e9cis depuis la base de donn\u00e9es, en fonction de son identifiant (<code>id</code>).</p>"},{"location":"16_NodeBD/repository/#objectif_2","title":"Objectif","text":"<p>La m\u00e9thode <code>getUserById(id, callback)</code> va :</p> <ul> <li> <p>recevoir un identifiant (par exemple <code>3</code>)</p> </li> <li> <p>ex\u00e9cuter une requ\u00eate SQL qui recherche l\u2019utilisateur correspondant</p> </li> <li> <p>renvoyer cet utilisateur \u00e0 travers le callback</p> </li> </ul>"},{"location":"16_NodeBD/repository/#exemple-de-methode-getuserbyid","title":"Exemple de m\u00e9thode <code>getUserById()</code>","text":"<pre><code>getUserById(id, callback) {\n  const query = \"SELECT * FROM users WHERE id = ?\";\n  this.db.get(query, [id], (err, row) =&gt; {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, row); // row est l\u2019objet repr\u00e9sentant l\u2019utilisateur, ou null si non trouv\u00e9\n  });\n}\n</code></pre>"},{"location":"16_NodeBD/repository/#detail-du-fonctionnement","title":"D\u00e9tail du fonctionnement","text":"<ul> <li> <p>On utilise this.db.get(...) car on attend un seul r\u00e9sultat.</p> </li> <li> <p>Le <code>?</code> dans la requ\u00eate est un param\u00e8tre s\u00e9curis\u00e9 (emp\u00eache les injections SQL).</p> </li> <li> <p><code>row</code> contient l\u2019objet utilisateur, par exemple :</p> </li> </ul> <pre><code>{ id: 3, nom: \"Claire\", email: \"claire@example.com\" }\n</code></pre> <ul> <li>Si aucun utilisateur ne correspond \u00e0 l\u2019ID donn\u00e9, <code>row</code> vaudra <code>null</code>.</li> </ul> <p>Cette m\u00e9thode est utile lorsqu\u2019on veut afficher ou utiliser un seul \u00e9l\u00e9ment pr\u00e9cis, identifi\u00e9 par son ID.</p>"},{"location":"16_NodeBD/repository/#36-la-methode-insert","title":"3.6 La m\u00e9thode <code>insert()</code>","text":"<p>Cette m\u00e9thode permet d\u2019ajouter une nouvelle ligne dans la base de donn\u00e9es. Dans notre exemple, cela signifie ajouter un nouvel utilisateur.</p>"},{"location":"16_NodeBD/repository/#objectif_3","title":"Objectif","text":"<p>La m\u00e9thode <code>insertUser(nom, email, callback)</code> va : - recevoir un nom et un email - ex\u00e9cuter une requ\u00eate SQL <code>INSERT INTO</code> - appeler le callback lorsque l\u2019insertion est termin\u00e9e</p>"},{"location":"16_NodeBD/repository/#exemple-de-methode-insertuser","title":"Exemple de m\u00e9thode <code>insertUser()</code>","text":"<pre><code>insertUser(nom, email, callback) {\n  const query = \"INSERT INTO users (nom, email) VALUES (?, ?)\";\n  this.db.run(query, [nom, email], function (err) {\n    if (err) {\n      return callback(err);\n    }\n    // this.lastID contient l\u2019id du nouvel utilisateur ins\u00e9r\u00e9\n    callback(null, { id: this.lastID });\n  });\n}\n</code></pre>"},{"location":"16_NodeBD/repository/#detail-du-fonctionnement_1","title":"D\u00e9tail du fonctionnement","text":"<ul> <li> <p><code>this.db.run(...)</code> permet d\u2019ex\u00e9cuter une requ\u00eate sans attendre de r\u00e9sultat (comme un <code>INSERT</code>)</p> </li> <li> <p>Les <code>?</code> sont des param\u00e8tres s\u00e9curis\u00e9s</p> </li> <li> <p>La fonction callback re\u00e7oit un objet <code>{ id: ... }</code> contenant l\u2019identifiant du nouvel utilisateur ins\u00e9r\u00e9</p> </li> <li> <p>On utilise <code>function (...)</code> (et non une arrow function) pour pouvoir acc\u00e9der \u00e0 <code>this.lastID</code></p> </li> </ul> <p>Cette m\u00e9thode est utile pour enregistrer une nouvelle donn\u00e9e dans la base, g\u00e9n\u00e9ralement suite \u00e0 un formulaire rempli par l\u2019utilisateur.</p> <p>Avant d'apprendre \u00e0 utiliser ces fonctions pour pouvoir les utiliser dans le backend et le frontend, il va falloir discuter de comment on peut transf\u00e9rer les r\u00e9sultats de ces m\u00e9thodes du backend au frontend. Pour cela, nous allons introduire AJAX.</p>"},{"location":"16_NodeBD/sauvegarderDonnees/","title":"6. Sauvegarder des donn\u00e9es dans la base de donn\u00e9es","text":"<p>Jusqu\u2019\u00e0 pr\u00e9sent, nous avons utilis\u00e9 notre base de donn\u00e9es uniquement pour lire des informations. Nous allons maintenant apprendre \u00e0 ins\u00e9rer de nouvelles donn\u00e9es dans la base gr\u00e2ce \u00e0 un formulaire HTML classique.</p>"},{"location":"16_NodeBD/sauvegarderDonnees/#61-objectif","title":"6.1 Objectif","text":"<p>Nous allons :</p> <ul> <li> <p>cr\u00e9er un formulaire HTML permettant d\u2019ajouter un utilisateur (<code>nom</code>, <code>email</code>)</p> </li> <li> <p>envoyer ce formulaire via une requ\u00eate POST vers le serveur</p> </li> <li> <p>ins\u00e9rer les donn\u00e9es dans la base gr\u00e2ce \u00e0 <code>insertUser(...)</code></p> </li> <li> <p>rediriger vers une page de confirmation ou d'erreur</p> </li> </ul>"},{"location":"16_NodeBD/sauvegarderDonnees/#exemple-de-formulaire-html-ajouthtml","title":"Exemple de formulaire HTML (<code>ajout.html</code>)","text":"<pre><code>&lt;h2&gt;Ajouter un utilisateur&lt;/h2&gt;\n\n&lt;form action=\"/ajouter-user\" method=\"POST\"&gt;\n  &lt;label for=\"nom\"&gt;Nom :&lt;/label&gt;\n  &lt;input type=\"text\" id=\"nom\" name=\"nom\" required&gt;\n\n  &lt;label for=\"email\"&gt;Email :&lt;/label&gt;\n  &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n\n  &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Remarquez l'attribut <code>action=\"/ajouter-user\"</code> : c\u2019est l\u2019adresse vers laquelle le formulaire va \u00eatre envoy\u00e9. L'attribut <code>method=\"POST\"</code> indique qu\u2019il s\u2019agit d\u2019un envoi de donn\u00e9es.</p>"},{"location":"16_NodeBD/sauvegarderDonnees/#route-express-dans-serverjs","title":"Route Express dans server.js","text":"<pre><code>app.use(express.json()); // Middleware pour lire le JSON dans le corps de la requ\u00eate\n\napp.post(\"/ajouter-user\", (req, res) =&gt; {\n  const { nom, email } = req.body;\n\n  if (!nom || !email) {\n    return res.status(400).json({ error: \"Champs manquants\" });\n  }\n\n  userRepo.insertUser(nom, email, (err, result) =&gt; {\n    if (err) {\n      return res.status(500).json({ error: \"Erreur d\u2019insertion\" });\n    }\n    res.status(201).json({ id: result.id });\n  });\n});\n</code></pre> <p>Dans ce code, on voit que l'on cr\u00e9e une route qui va (si pas d'erreur), appeler la m\u00e9thode insertUser pour pouvoir sauvegarder les informations dans la base de donn\u00e9es.</p>"},{"location":"16_NodeBD/sauvegarderDonnees/#resultat-attendu","title":"R\u00e9sultat attendu","text":"<ul> <li> <p>L\u2019utilisateur remplit le formulaire et clique sur \"Envoyer\"</p> </li> <li> <p>Le navigateur envoie la requ\u00eate <code>POST</code> au serveur</p> </li> <li> <p>Le serveur ins\u00e8re les donn\u00e9es dans la base avec <code>insertUser(...)</code></p> </li> <li> <p>L\u2019utilisateur est redirig\u00e9 vers la page d\u2019ajout, avec un message de succ\u00e8s ou d\u2019erreur</p> </li> </ul> <p>Cette m\u00e9thode ne n\u00e9cessite pas de JavaScript avanc\u00e9 et fonctionne tr\u00e8s bien pour des formulaires simples.</p>"},{"location":"16_NodeBD/sqlite/","title":"2. SQLite","text":""},{"location":"16_NodeBD/sqlite/#21-utilisation-de-datagrip","title":"2.1 Utilisation de DataGrip","text":"<p>Pour manipuler facilement une base de donn\u00e9es, il est utile d\u2019avoir un outil visuel. Dans ce cours, nous allons utiliser DataGrip, un logiciel de JetBrains (les cr\u00e9ateurs d\u2019IntelliJ et WebStorm).</p>"},{"location":"16_NodeBD/sqlite/#a-quoi-sert-datagrip","title":"\u00c0 quoi sert DataGrip ?","text":"<p>DataGrip est une interface graphique pour les bases de donn\u00e9es. Il vous permet de :</p> <ul> <li> <p>visualiser les tables et leur contenu,</p> </li> <li> <p>\u00e9crire et ex\u00e9cuter des requ\u00eates SQL (SELECT, INSERT, etc.),</p> </li> <li> <p>cr\u00e9er, modifier ou supprimer des tables,</p> </li> <li> <p>explorer les relations entre les donn\u00e9es.</p> </li> </ul>"},{"location":"16_NodeBD/sqlite/#installer-datagrip","title":"Installer DataGrip","text":"<ol> <li> <p>Allez sur le site officiel : https://www.jetbrains.com/datagrip/</p> </li> <li> <p>Cliquez sur Download.</p> </li> <li> <p>Choisissez votre syst\u00e8me d\u2019exploitation (Windows, macOS, Linux).</p> </li> <li> <p>Installez le programme comme n\u2019importe quelle application.</p> </li> </ol> <p>Vous pouvez activer une licence gratuite avec votre adresse mail acad\u00e9mique sur JetBrains Student Program.</p>"},{"location":"16_NodeBD/sqlite/#une-fois-installe","title":"Une fois install\u00e9...","text":"<p>Lorsque DataGrip est lanc\u00e9, vous pourrez :</p> <ul> <li> <p>cr\u00e9er une nouvelle connexion vers une base SQLite,</p> </li> <li> <p>naviguer visuellement dans vos donn\u00e9es,</p> </li> <li> <p>tester vos requ\u00eates SQL avant de les utiliser dans le code.</p> </li> </ul>"},{"location":"16_NodeBD/sqlite/#22-creation-dune-base-de-donnees-sqlite","title":"2.2 Cr\u00e9ation d'une base de donn\u00e9es SQLite","text":"<p>Nous allons maintenant cr\u00e9er notre premi\u00e8re base de donn\u00e9es SQLite \u00e0 l\u2019aide de DataGrip.</p>"},{"location":"16_NodeBD/sqlite/#etapes-pour-creer-une-base-sqlite-dans-datagrip","title":"\u00c9tapes pour cr\u00e9er une base SQLite dans DataGrip","text":"<ol> <li> <p>Ouvrez DataGrip</p> </li> <li> <p>Dans la colonne de gauche, cliquez sur le bouton \"+\" puis sur \"Data Source\" \u2192 \"SQLite\"</p> </li> <li> <p>Une nouvelle fen\u00eatre s\u2019ouvre :</p> </li> <li> <p>Cliquez sur \"...\" \u00e0 droite de \"Database file\"</p> </li> <li> <p>Choisissez l\u2019emplacement o\u00f9 vous souhaitez enregistrer votre base (par exemple, dans un dossier <code>data/</code> de votre projet)</p> </li> <li> <p>Donnez-lui un nom, par exemple : <code>site.db</code></p> </li> <li> <p>Cliquez sur OK.</p> </li> </ol>"},{"location":"16_NodeBD/sqlite/#ou-se-trouve-la-base-de-donnees","title":"O\u00f9 se trouve la base de donn\u00e9es ?","text":"<ul> <li> <p>La base est un fichier .db stock\u00e9 \u00e0 l\u2019endroit que vous avez choisi.</p> </li> <li> <p>Ce fichier contient toutes les donn\u00e9es, tables et sch\u00e9mas de votre base.</p> </li> <li> <p>Il est facilement partageable ou transportable (c\u2019est un des avantages de SQLite).</p> </li> </ul>"},{"location":"16_NodeBD/sqlite/#connexion-automatique","title":"Connexion automatique","text":"<p>Une fois la base cr\u00e9\u00e9e, DataGrip s\u2019y connecte automatiquement. Vous verrez appara\u00eetre dans l\u2019arborescence de gauche :</p> <ul> <li> <p>votre nouvelle base de donn\u00e9es,</p> </li> <li> <p>et un dossier <code>Tables</code> (vide pour l\u2019instant).</p> </li> </ul> <p>Vous pouvez maintenant :</p> <ul> <li> <p>cr\u00e9er des tables,</p> </li> <li> <p>ins\u00e9rer des donn\u00e9es,</p> </li> <li> <p>ex\u00e9cuter des requ\u00eates SQL.</p> </li> </ul>"},{"location":"16_NodeBD/sqlite/#attention-suppression-disparition","title":"Attention : suppression \u2260 disparition","text":"<p>Si vous cliquez-droit sur la connexion et choisissez \"Remove\" dans DataGrip : - Cela supprime la connexion dans DataGrip,</p> <ul> <li>Mais cela ne supprime pas le fichier <code>.db</code> !</li> </ul> <p>Vous pouvez vous reconnecter \u00e0 tout moment \u00e0 cette base existante :</p> <ul> <li> <p>Cliquez sur \"+\" \u2192 \"Data Source\" \u2192 \"SQLite\"</p> </li> <li> <p>Dans \"Database file\", choisissez le fichier <code>.db</code> d\u00e9j\u00e0 existant</p> </li> </ul> <p>La base SQLite est un simple fichier. Tant que ce fichier n\u2019est pas supprim\u00e9, vos donn\u00e9es sont conserv\u00e9es.</p>"},{"location":"16_NodeBD/sqlite/#23-creer-une-table-dans-la-bd","title":"2.3 Cr\u00e9er une table dans la BD","text":"<p>Maintenant que la base est cr\u00e9\u00e9e, nous allons y ajouter une premi\u00e8re table contenant des donn\u00e9es. Pour cela, nous allons \u00e9crire des requ\u00eates SQL dans DataGrip.</p>"},{"location":"16_NodeBD/sqlite/#creer-une-table-via-un-script-sql","title":"Cr\u00e9er une table via un script SQL","text":"<p>Dans DataGrip :</p> <ol> <li> <p>Faites clic droit sur le nom de votre base \u2192 \"New\" \u2192 \"Console\"    Une nouvelle fen\u00eatre s\u2019ouvre pour \u00e9crire du SQL.</p> </li> <li> <p>Collez le script suivant pour cr\u00e9er une table <code>messages</code> :</p> </li> </ol> <pre><code>CREATE TABLE messages (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  nom TEXT NOT NULL,\n  email TEXT NOT NULL,\n  contenu TEXT NOT NULL\n);\n</code></pre> <ol> <li>Cliquez sur le bouton vert</li> </ol> <p>Il cr\u00e9e la table nomm\u00e9e <code>messages</code> avec 4 colonnes.</p>"},{"location":"16_NodeBD/sqlite/#ajouter-des-lignes-exemples-de-donnees","title":"Ajouter des lignes (exemples de donn\u00e9es)","text":"<p>Toujours dans la console SQL, ajoutez maintenant quelques lignes dans la table :</p> <pre><code>INSERT INTO messages (nom, email, contenu) VALUES\n  ('Alice', 'alice@example.com', 'Bonjour !'),\n  ('Bob', 'bob@example.com', 'Je suis int\u00e9ress\u00e9 par votre site.'),\n  ('Claire', 'claire@example.com', 'Merci pour l\u2019info !');\n</code></pre> <p>Cr\u00e9ez via js</p> <p>Il est aussi possible de cr\u00e9er des tables et d\u2019ins\u00e9rer des donn\u00e9es via du code JavaScript (avec Node.js), ce que nous verrons plus tard. Mais DataGrip est parfait pour tester, comprendre, et corriger rapidement vos tables.</p>"},{"location":"16_NodeBD/sqlite/#24-installer-sqlite-pour-lutiliser-avec-nodejs","title":"2.4 Installer SQLite pour l\u2019utiliser avec Node.js","text":"<p>Pour pouvoir interagir avec une base SQLite depuis notre serveur Express (en JavaScript), nous devons installer une biblioth\u00e8que Node.js qui permet de se connecter \u00e0 une base <code>.db</code>.</p>"},{"location":"16_NodeBD/sqlite/#le-module-sqlite3","title":"Le module <code>sqlite3</code>","text":"<p>Nous allons utiliser le module <code>sqlite3</code>, qui est la solution la plus simple et la plus r\u00e9pandue pour ce type de projet.</p>"},{"location":"16_NodeBD/sqlite/#etapes-dinstallation","title":"\u00c9tapes d\u2019installation","text":"<ol> <li> <p>Ouvrez un terminal dans le dossier de votre projet Node.js </p> </li> <li> <p>Tapez la commande suivante :</p> </li> </ol> <p><pre><code>npm install sqlite3\n</code></pre> 3. Une fois install\u00e9, vous pouvez utiliser cette biblioth\u00e8que dans vos fichiers .js avec : <pre><code>const sqlite3 = require(\"sqlite3\").verbose();\n</code></pre></p>"},{"location":"16_NodeBD/sqlite/#exemple-de-chemin-vers-une-base-existante","title":"Exemple de chemin vers une base existante","text":"<p>Si votre fichier de base de donn\u00e9es s'appelle <code>site.db</code> et se trouve dans un dossier <code>data/</code>, vous pouvez y acc\u00e9der avec :</p> <pre><code>const path = require(\"path\");\nconst db = new sqlite3.Database(path.join(__dirname, \"data\", \"site.db\"));\n</code></pre> <p>SQLite c'est simple</p> <p>SQLite ne n\u00e9cessite aucun serveur \u00e0 lancer s\u00e9par\u00e9ment. Une fois le fichier .db accessible, votre application peut s\u2019y connecter directement.</p> <p>Dans la section suivante, nous allons voir comment <code>fetch()</code> va nous permettre d'afficher facilement des donn\u00e9es pr\u00e9sentes dans notre base de donn\u00e9es en utilisant les m\u00e9thodes de notre classe <code>Repository</code>.</p>"},{"location":"16_NodeBD/tuto/","title":"7. Mini tutoriel guid\u00e9 \u2013 Liste et ajout d\u2019utilisateurs","text":"<p>Nous avons vu beaucoup de th\u00e9orie jusqu\u2019\u00e0 pr\u00e9sent : cr\u00e9ation de table, repository, insertions, lectures, et gestion des routes avec Express.</p> <p>Dans ce tutoriel, nous allons mettre tout cela en pratique pour bien comprendre comment connecter un site web \u00e0 une base de donn\u00e9es.</p>"},{"location":"16_NodeBD/tuto/#objectif-du-mini-projet","title":"Objectif du mini-projet","text":"<p>Nous allons cr\u00e9er un mini site avec deux pages :</p> <ol> <li> <p><code>liste.html</code> : affiche un tableau contenant tous les utilisateurs enregistr\u00e9s dans la base de donn\u00e9es.</p> </li> <li> <p><code>ajout.html</code> : contient un formulaire pour ajouter un nouvel utilisateur (nom + email).  </p> </li> </ol> <p>Une fois l\u2019ajout effectu\u00e9, l\u2019utilisateur est redirig\u00e9 vers la m\u00eame page avec un message de confirmation.</p>"},{"location":"16_NodeBD/tuto/#structure-du-projet","title":"Structure du projet","text":"<pre><code>mini-projet-users/ \n\u251c\u2500\u2500 public/ \n|    \u251c\u2500\u2500 css/\n|    |    \u2514\u2500\u2500 style.css\n|    \u251c\u2500\u2500 js/\n|    |    \u2514\u2500\u2500 script_ajout.js\n|    |    \u2514\u2500\u2500 script_liste.js\n\u2502    \u251c\u2500\u2500 ajout.html\n\u2502    \u2514\u2500\u2500 liste.html\n\u251c\u2500\u2500 Repository/\n|    \u2514\u2500\u2500 UserRepository.js \n\u251c\u2500\u2500 data/  \n|    \u2514\u2500\u2500 users.db \n\u2514\u2500\u2500 server.js\n</code></pre>"},{"location":"16_NodeBD/tuto/#creation-de-la-table-users-dans-sqlite","title":"Cr\u00e9ation de la table <code>users</code> dans SQLite","text":"<p>Dans DataGrip entrez les commande suivante pour cr\u00e9er et peupler la table : </p> <pre><code>CREATE TABLE users (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  nom TEXT NOT NULL,\n  email TEXT NOT NULL\n);\n</code></pre> <pre><code>INSERT INTO users (nom, email) VALUES\n  ('Alice', 'alice@example.com'),\n  ('Bob', 'bob@example.com'),\n  ('Charlie', 'charlie@example.com');\n</code></pre>"},{"location":"16_NodeBD/tuto/#fichier-listehtml","title":"Fichier liste.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Liste des utilisateurs&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n  &lt;script src=\"js/script_liste.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Liste des utilisateurs&lt;/h1&gt;\n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;&lt;th&gt;Nom&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody id=\"liste-users\"&gt;&lt;/tbody&gt;\n  &lt;/table&gt;\n\n  &lt;a href=\"/ajout.html\"&gt;Ajouter un utilisateur&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Il s'agit ici d'un simple site contenant un tableau avec la liste des utilisateurs.</p>"},{"location":"16_NodeBD/tuto/#fichier-ajouthtml","title":"Fichier ajout.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Ajouter un utilisateur&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n  &lt;script src=\"js/script_ajout.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Ajouter un utilisateur&lt;/h1&gt;\n\n  &lt;p id=\"message\"&gt;&lt;/p&gt;\n\n  &lt;form action=\"/ajouter-user\" method=\"POST\"&gt;\n    &lt;label for=\"nom\"&gt;Nom :&lt;/label&gt;\n    &lt;input type=\"text\" id=\"nom\" name=\"nom\" required&gt;\n\n    &lt;label for=\"email\"&gt;Email :&lt;/label&gt;\n    &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n\n    &lt;button type=\"submit\"&gt;Envoyer&lt;/button&gt;\n  &lt;/form&gt;\n\n  &lt;a href=\"/liste.html\"&gt;Retour \u00e0 la liste&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Il s'agit ici d'un simple formulaire contenant la liste des utilisateurs. </p>"},{"location":"16_NodeBD/tuto/#fichier-stylecss","title":"Fichier style.css","text":"<pre><code>body {\n  font-family: sans-serif;\n  padding: 20px;\n}\n\ntable {\n  border-collapse: collapse;\n  width: 100%;\n}\n\nth, td {\n  border: 1px solid #ccc;\n  padding: 8px;\n  text-align: left;\n}\n\nform {\n  max-width: 400px;\n}\n\ninput {\n  display: block;\n  margin-bottom: 10px;\n  width: 100%;\n  padding: 5px;\n}\n</code></pre>"},{"location":"16_NodeBD/tuto/#fichier-script_listejs","title":"Fichier script_liste.js","text":"<p><pre><code>// Ce script est utilis\u00e9 uniquement dans liste.html pour charger les utilisateurs\nfetch(\"/api/users\")\n  .then(response =&gt; response.json())\n  .then(users =&gt; {\n    const tbody = document.getElementById(\"liste-users\");\n    users.forEach(user =&gt; {\n      const row = document.createElement(\"tr\");\n      row.innerHTML = `&lt;td&gt;${user.nom}&lt;/td&gt;&lt;td&gt;${user.email}&lt;/td&gt;`;\n      tbody.appendChild(row);\n    });\n  })\n  .catch(err =&gt; console.error(\"Erreur chargement utilisateurs :\", err));\n</code></pre> Ce script, permet d'appeler le serveur sur la route <code>\"/api/users\"</code>, le serveur va alors renvoyer une r\u00e9ponse sous forme d'un tableau json contenant l'ensemble des utilisateurs. Ce script va alors parcourir ce tableau et cr\u00e9er autant de ligne dans le tableau HTML.</p>"},{"location":"16_NodeBD/tuto/#fichier-script_ajoutjs","title":"Fichier script_ajout.js","text":"<p><pre><code>const params = new URLSearchParams(window.location.search);\nconst etat = params.get(\"etat\");\nconst message = document.getElementById(\"message\");\n\nif (etat === \"ok\") {\n    message.textContent = \"Utilisateur ajout\u00e9 avec succ\u00e8s.\";\n    message.style.color = \"green\";\n} else if (etat === \"erreur\") {\n    message.textContent = \"Une erreur est survenue.\";\n    message.style.color = \"red\";\n}\n</code></pre> Ce script regarde les param\u00e8tres dans l'URL, plus pr\u00e9cis\u00e9ment, il regarde le param\u00e8tre <code>\"etat\"</code> si celui-ci \u00e0 la valeur \"Ok\", il affiche un message de succ\u00e8s, s'il a la valeur \"erreur\" il affiche un message d'erreur.</p>"},{"location":"16_NodeBD/tuto/#fichier-userrepositoryjs","title":"Fichier UserRepository.js","text":"<p><pre><code>const sqlite3 = require(\"sqlite3\").verbose();\nconst path = require(\"path\");\n\nclass UserRepository {\n  constructor() {\n    this.db = new sqlite3.Database(path.join(__dirname, \"../data/users.sqlite\"));\n  }\n\n  getAllUsers(callback) {\n    const query = \"SELECT * FROM users\";\n    this.db.all(query, [], (err, rows) =&gt; {\n      if (err) return callback(err);\n      callback(null, rows);\n    });\n  }\n\n  insertUser(nom, email, callback) {\n    const query = \"INSERT INTO users (nom, email) VALUES (?, ?)\";\n    this.db.run(query, [nom, email], function (err) {\n      if (err) return callback(err);\n      callback(null, { id: this.lastID });\n    });\n  }\n}\n\nmodule.exports = UserRepository;\n</code></pre> Ce script contient la classe <code>UserRepository</code> qui discute avec la BD. Le <code>consructor</code> \u00e9tablit la connexion \u00e0 la BD. La m\u00e9thode <code>getAllUsers</code> permet d'obtenir l'enti\u00e8ret\u00e9 des utilisateurs. La m\u00e9thode <code>insertUser</code> permet d'ajouter un utilisateur \u00e0 la table de la BD.</p>"},{"location":"16_NodeBD/tuto/#fichier-serverjs","title":"Fichier server.js","text":"<pre><code>const express = require(\"express\");\nconst path = require(\"path\");\nconst UserRepository = require(\"./Repository/UserRepository\");\n\nconst app = express();\nconst PORT = 3000;\nconst userRepo = new UserRepository();\n\n// Middleware\napp.use(express.static(\"public\"));\napp.use(express.urlencoded({ extended: true }));\n\n// Lors de l'\u00e9coute on \u00e9coute vers liste.html au lieu de index.html\napp.get('/', (req, res) =&gt; {\n    res.sendFile(__dirname + '/public/liste.html');\n  });\n\n// API - R\u00e9cup\u00e9ration de tous les utilisateurs\napp.get(\"/api/users\", (req, res) =&gt; {\n  userRepo.getAllUsers((err, users) =&gt; {\n    if (err) return res.status(500).json({ error: \"Erreur serveur\" });\n    res.json(users);\n  });\n});\n\n// Traitement du formulaire\napp.post(\"/ajouter-user\", (req, res) =&gt; {\n  const { nom, email } = req.body;\n  if (!nom || !email) return res.redirect(\"/ajout.html?etat=erreur\");\n\n  userRepo.insertUser(nom, email, (err) =&gt; {\n    if (err) return res.redirect(\"/ajout.html?etat=erreur\");\n    res.redirect(\"/ajout.html?etat=ok\");\n  });\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Serveur d\u00e9marr\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre> <p>Le serveur \u00e9tablit plusieurs routes, quand la premi\u00e8re (<code>\"/api/users\"</code>) est appel\u00e9e, elle va utiliser la fonction <code>getAllUsers</code> pour r\u00e9cup\u00e9rer l'ensemble des utilisateurs, elle va ensuite envoyer ces informations sous forme d'un tableau json \u00e0 la page qui l'a contact\u00e9. La deuxi\u00e8me route (<code>\"/ajouter-user\"</code>) va v\u00e9rifier si le formulaire qui l'a contact\u00e9 est bien complet (sinon il envoi un message d'erreur). S'il est bien complet, il va utiliser la m\u00e9thode <code>insertUser</code> pour ajouter une ligne dans la table <code>users</code> si cette ligne est ajout\u00e9e, il redirige vers la page <code>\"/ajout.html\"</code> avec un param\u00e8tre dans l'URL : <code>\"etat=ok\"</code>.</p>"},{"location":"16_NodeBD/tuto/#explication-rapide-des-roles","title":"Explication rapide des r\u00f4les","text":"<ul> <li> <p><code>UserRepository.js</code> : contient les fonctions pour lire et \u00e9crire dans la base SQLite.</p> </li> <li> <p><code>server.js</code> : d\u00e9finit les routes Express qui re\u00e7oivent les requ\u00eates, appellent les bonnes fonctions, et redirigent ou envoient des r\u00e9ponses.</p> </li> <li> <p><code>liste.html</code> : affiche dynamiquement les utilisateurs gr\u00e2ce \u00e0 fetch().</p> </li> <li> <p><code>ajout.html</code> : contient un formulaire HTML classique envoy\u00e9 en POST.</p> </li> </ul>"},{"location":"17_NodeAPI/","title":"Introduction","text":"<p>Dans ce cours nous allons faire une introduction rapide aux API. </p>"},{"location":"17_NodeAPI/#11-quest-ce-quune-api","title":"1.1 Qu\u2019est-ce qu\u2019une API ?","text":"<p>Le mot API signifie Application Programming Interface, soit en fran\u00e7ais : interface de programmation d'application.</p> <p>Une API est un interm\u00e9diaire qui permet \u00e0 deux programmes ou applications de communiquer entre eux. C\u2019est un peu comme un serveur de restaurant : vous (le client) commandez un plat, le serveur transmet la commande en cuisine, puis revient avec le plat. L\u2019API joue ce r\u00f4le de messager entre vous (votre site web) et un syst\u00e8me externe (un service web, une base de donn\u00e9es, un moteur d\u2019intelligence artificielle\u2026).</p> <p>Dans le contexte du web, on utilise souvent des APIs pour :</p> <ul> <li> <p>r\u00e9cup\u00e9rer des donn\u00e9es (comme la m\u00e9t\u00e9o, des actualit\u00e9s, des images\u2026),</p> </li> <li> <p>envoyer des informations (formulaire, login, score d\u2019un jeu\u2026),</p> </li> <li> <p>ou d\u00e9clencher des actions (traduire un texte, g\u00e9n\u00e9rer une image, r\u00e9pondre \u00e0 une question\u2026).</p> </li> </ul> <p>Concr\u00e8tement, une API web fonctionne gr\u00e2ce \u00e0 des requ\u00eates HTTP (comme quand on visite un site web), mais au lieu de recevoir une page HTML, on re\u00e7oit des donn\u00e9es structur\u00e9es, g\u00e9n\u00e9ralement en JSON.</p>"},{"location":"17_NodeAPI/#exemple-concret","title":"Exemple concret","text":"<p>Imaginons un site qui affiche une blague al\u00e9atoire.</p> <p>Ce site n\u2019a pas besoin d\u2019inventer lui-m\u00eame des blagues\u202f: il peut appeler une API publique (par exemple : https://official-joke-api.appspot.com/random_joke) et afficher la blague re\u00e7ue.</p>"},{"location":"17_NodeAPI/#12-pourquoi-utiliser-une-api","title":"1.2 Pourquoi utiliser une API ?","text":"<p>Utiliser une API permet d'int\u00e9grer des fonctionnalit\u00e9s puissantes dans un site web ou une application sans devoir tout programmer soi-m\u00eame.</p> <p>Prenons un exemple : imaginons que vous souhaitiez int\u00e9grer un chatbot intelligent \u00e0 votre site. D\u00e9velopper un chatbot de z\u00e9ro avec compr\u00e9hension du langage, logique de r\u00e9ponse et base de donn\u00e9es d\u2019apprentissage prendrait des mois de d\u00e9veloppement, des connaissances en intelligence artificielle, et une infrastructure complexe.</p> <p>Gr\u00e2ce \u00e0 des APIs comme celles propos\u00e9es par Hugging Face, vous pouvez envoyer une question \u00e0 un mod\u00e8le d\u2019IA (comme Janus ou Mistral) et recevoir une r\u00e9ponse pr\u00eate \u00e0 afficher, en quelques lignes de code seulement.</p>"},{"location":"17_NodeAPI/#avantages-dutiliser-une-api","title":"Avantages d\u2019utiliser une API :","text":"<ul> <li> <p>Gain de temps : vous utilisez une fonctionnalit\u00e9 pr\u00eate \u00e0 l\u2019emploi.</p> </li> <li> <p>Acc\u00e8s \u00e0 des services avanc\u00e9s (traduction, reconnaissance vocale, analyse d\u2019image, g\u00e9n\u00e9ration de texte\u2026).</p> </li> <li> <p>Pas besoin d\u2019h\u00e9berger ou de maintenir le syst\u00e8me complexe derri\u00e8re l\u2019API.</p> </li> <li> <p>Facilit\u00e9 d\u2019int\u00e9gration dans un site web avec des requ\u00eates HTTP simples.</p> </li> </ul>"},{"location":"17_NodeAPI/#13-exemples-dapi-utilisees-dans-le-web","title":"1.3 Exemples d\u2019API utilis\u00e9es dans le web","text":"<p>Les APIs sont pr\u00e9sentes partout sur le web. Voici quelques exemples concrets de services qui proposent des APIs largement utilis\u00e9es :</p> <ul> <li> <p>Google Maps API \u2013 pour afficher une carte ou calculer un itin\u00e9raire.</p> </li> <li> <p>OpenWeatherMap API \u2013 pour r\u00e9cup\u00e9rer la m\u00e9t\u00e9o d\u2019une ville.</p> </li> <li> <p>Hugging Face API \u2013 pour utiliser des mod\u00e8les d\u2019IA comme des chatbots ou des g\u00e9n\u00e9rateurs de texte.</p> </li> <li> <p>...</p> </li> </ul> <p>Ces APIs permettent \u00e0 n\u2019importe quel site web d\u2019int\u00e9grer ces fonctionnalit\u00e9s sans devoir tout coder soi-m\u00eame.</p>"},{"location":"17_NodeAPI/#14-cle-dapi","title":"1.4 \u2013 Cl\u00e9 d\u2019API","text":"<p>Certaines APIs sont prot\u00e9g\u00e9es et ne sont pas accessibles librement \u00e0 tout le monde. Pour pouvoir les utiliser, il faut g\u00e9n\u00e9ralement fournir une cl\u00e9 d\u2019API (API key).</p> <p>Une cl\u00e9 d\u2019API est une cha\u00eene de caract\u00e8res unique, souvent g\u00e9n\u00e9r\u00e9e apr\u00e8s la cr\u00e9ation d\u2019un compte sur le site du service (comme Hugging Face, OpenWeatherMap, etc.).</p>"},{"location":"17_NodeAPI/#a-quoi-sert-une-cle-dapi","title":"\u00c0 quoi sert une cl\u00e9 d\u2019API ?","text":"<ul> <li> <p>Elle permet au service de savoir qui fait la requ\u00eate.</p> </li> <li> <p>Elle peut \u00eatre utilis\u00e9e pour limiter le nombre de requ\u00eates (ex : 100 requ\u00eates par jour).</p> </li> <li> <p>Elle permet au fournisseur de facturer les usages si l\u2019API est payante.</p> </li> </ul>"},{"location":"17_NodeAPI/#ce-quil-faut-savoir","title":"Ce qu\u2019il faut savoir","text":"<ul> <li> <p>Une cl\u00e9 d\u2019API est personnelle : elle est associ\u00e9e \u00e0 votre compte.</p> </li> <li> <p>Il ne faut jamais la partager publiquement (par exemple dans un d\u00e9p\u00f4t GitHub).</p> </li> <li> <p>Lors d\u2019un appel \u00e0 l\u2019API, la cl\u00e9 est envoy\u00e9e dans les en-t\u00eates HTTP (g\u00e9n\u00e9ralement dans le champ <code>Authorization</code>).</p> </li> </ul>"},{"location":"17_NodeAPI/#exemple","title":"Exemple :","text":"<p>Pour utiliser une API Hugging Face, vous devez :</p> <ol> <li> <p>Cr\u00e9er un compte sur le site huggingface.co</p> </li> <li> <p>G\u00e9n\u00e9rer une cl\u00e9 API dans votre profil</p> </li> <li> <p>L\u2019utiliser dans vos requ\u00eates pour acc\u00e9der aux mod\u00e8les</p> </li> </ol>"},{"location":"17_NodeAPI/apiSimple/","title":"Appels d\u2019API simples","text":""},{"location":"17_NodeAPI/apiSimple/#21-appeler-une-api-depuis-le-frontend","title":"2.1 \u2013 Appeler une API depuis le frontend","text":"<p>La mani\u00e8re la plus simple d'utiliser une API dans un site web, c\u2019est de faire l\u2019appel directement depuis le navigateur, c\u2019est-\u00e0-dire depuis le code JavaScript du frontend.</p> <p>Cela permet de :</p> <ul> <li> <p>faire une requ\u00eate API avec <code>fetch()</code>,</p> </li> <li> <p>r\u00e9cup\u00e9rer la r\u00e9ponse (souvent en JSON),</p> </li> <li> <p>et l\u2019afficher directement sur la page.</p> </li> </ul> <p>C\u2019est la m\u00e9thode que nous utiliserons dans ce cours pour d\u00e9couvrir le fonctionnement des APIs.</p>"},{"location":"17_NodeAPI/apiSimple/#avantages","title":"Avantages","text":"<ul> <li> <p>Facile \u00e0 mettre en place</p> </li> <li> <p>Aucun besoin de serveur ou de backend</p> </li> <li> <p>R\u00e9ponse directement disponible pour mise \u00e0 jour de l'interface</p> </li> </ul>"},{"location":"17_NodeAPI/apiSimple/#inconvenients","title":"Inconv\u00e9nients","text":"<p>M\u00eame si c\u2019est simple, ce n\u2019est pas la m\u00e9thode la plus s\u00e9curis\u00e9e, car :</p> <ul> <li> <p>Les cl\u00e9s d\u2019API sont visibles dans le code source accessible \u00e0 tous via les outils du navigateur</p> </li> <li> <p>Vous ne pouvez pasprot\u00e9ger vos requ\u00eates ou contr\u00f4ler l\u2019usage de l\u2019API</p> </li> <li> <p>Certaines APIs refusent les appels directs depuis le navigateur pour cette raison (probl\u00e8me de CORS)</p> </li> </ul> <p>Dans les cas o\u00f9 l\u2019on veut prot\u00e9ger une cl\u00e9 API ou contr\u00f4ler l\u2019acc\u00e8s, il est pr\u00e9f\u00e9rable de passer par un backend (comme un serveur Node.js) pour faire les appels \u00e0 l\u2019API en toute s\u00e9curit\u00e9.</p>"},{"location":"17_NodeAPI/apiSimple/#22-exemple-api-advice-slip-frontend","title":"2.2 \u2013 Exemple : API Advice Slip (frontend)","text":"<p>Dans cet exemple, nous allons cr\u00e9er un mini site qui appelle une API publique nomm\u00e9e Advice Slip, qui renvoie un conseil de vie al\u00e9atoire.</p> <p>L'appel se fera directement depuis le navigateur, sans passer par un backend.</p>"},{"location":"17_NodeAPI/apiSimple/#structure-du-projet","title":"Structure du projet","text":"<pre><code>advice-frontend/\n\u251c\u2500\u2500 public/\n\u2502 \u251c\u2500\u2500 index.html\n\u2502 \u2514\u2500\u2500 css/\n\u2502   \u2514\u2500\u2500 style.css\n\u2502 \u2514\u2500\u2500 js/\n\u2502   \u2514\u2500\u2500 advice.js\n\u251c\u2500\u2500 server.js\n</code></pre>"},{"location":"17_NodeAPI/apiSimple/#serverjs","title":"<code>server.js</code>","text":"<p>Nous utilisons un petit serveur Express uniquement pour servir les fichiers HTML et JS.</p> <pre><code>import express from \"express\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { dirname } from \"path\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.static(path.join(__dirname, \"public\")));\n\napp.listen(PORT, () =&gt; {\n  console.log(`Serveur lanc\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre>"},{"location":"17_NodeAPI/apiSimple/#publicindexhtml-et-publiccssstylecss","title":"<code>public/index.html</code> et <code>public/css/style.css</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Conseil du jour&lt;/title&gt;\n  &lt;script src=\"js/advice.js\" defer&gt;&lt;/script&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Besoin d\u2019un conseil ?&lt;/h1&gt;\n  &lt;button id=\"getAdvice\"&gt;Donne-moi un conseil&lt;/button&gt;\n  &lt;p id=\"advice\"&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>body {\n      font-family: sans-serif;\n      text-align: center;\n      padding: 2rem;\n    }\n    #advice {\n      margin-top: 2rem;\n      font-size: 1.2rem;\n      color: #333;\n    }\n</code></pre>"},{"location":"17_NodeAPI/apiSimple/#publicjsadvicejs","title":"<code>public/js/advice.js</code>","text":"<pre><code>document.getElementById(\"getAdvice\").addEventListener(\"click\", () =&gt; {\n  const adviceDisplay = document.getElementById(\"advice\");\n  adviceDisplay.textContent = \"Chargement...\";\n\n  // Appel direct \u00e0 l'API externe\n  fetch(\"https://api.adviceslip.com/advice?timestamp=\" + Date.now())\n    .then(res =&gt; res.json())\n    .then(data =&gt; {\n      adviceDisplay.textContent = `\ud83d\udca1 ${data.slip.advice}`;\n    })\n    .catch(err =&gt; {\n      adviceDisplay.textContent = \"Impossible d'obtenir un conseil.\";\n      console.error(err);\n    });\n});\n</code></pre> <p>Dans ce fichier <code>advice.js</code>, nous utilisons fetch pour envoyer une requ\u00eate HTTP vers l\u2019API.</p> <ul> <li> <p><code>fetch(\"https://api.adviceslip.com/advice\")</code> d\u00e9clenche une requ\u00eate GET.</p> </li> <li> <p><code>.then(res =&gt; res.json())</code> convertit la r\u00e9ponse en objet JSON.</p> </li> <li> <p><code>data.slip.advice</code> contient la cha\u00eene de texte (le conseil).</p> </li> <li> <p>Le texte est ensuite affich\u00e9 dans la page.</p> </li> </ul>"},{"location":"17_NodeAPI/apiSimple/#rappel-ajax","title":"Rappel AJAX","text":"<p>Dans les s\u00e9ances pr\u00e9c\u00e9dentes (cours sur les bases de donn\u00e9es), nous avions d\u00e9j\u00e0 utilis\u00e9 fetch pour communiquer avec notre propre backend Express, par exemple pour :</p> <p><pre><code>fetch(\"/api/users\")\n</code></pre> ou</p> <pre><code>fetch(\"/api/addUser\", { method: \"POST\", body: ... })\n</code></pre> <p>Ici, le principe est identique, mais au lieu d'appeler notre propre backend, nous appelons un service ext\u00e9rieur, exactement comme s\u2019il s\u2019agissait d\u2019un autre serveur Express.</p> <p>On parle toujours d'AJAX : appel asynchrone qui ne recharge pas la page et traite les donn\u00e9es en arri\u00e8re-plan.</p> <p>Conclusion : cet exemple montre que faire un appel d\u2019API externe avec fetch est aussi simple que d\u2019appeler une route locale de notre propre serveur.</p>"},{"location":"17_NodeAPI/apiSimple/#23-appeler-une-api-depuis-le-backend-via-express","title":"2.3 \u2013 Appeler une API depuis le backend (via Express)","text":"<p>Jusqu\u2019\u00e0 pr\u00e9sent, nous avons vu comment appeler une API directement depuis le frontend, c\u2019est-\u00e0-dire depuis le code JavaScript ex\u00e9cut\u00e9 dans le navigateur.</p> <p>M\u00eame si cette m\u00e9thode est simple et rapide \u00e0 mettre en place, elle n\u2019est pas toujours possible ni souhaitable.</p>"},{"location":"17_NodeAPI/apiSimple/#raisons-pour-lesquelles-on-prefere-parfois-passer-par-le-backend","title":"Raisons pour lesquelles on pr\u00e9f\u00e8re parfois passer par le backend","text":""},{"location":"17_NodeAPI/apiSimple/#1-proteger-une-cle-dapi","title":"1. Prot\u00e9ger une cl\u00e9 d\u2019API","text":"<p>Lorsqu\u2019une API n\u00e9cessite une cl\u00e9 d\u2019acc\u00e8s, cette cl\u00e9 ne doit jamais appara\u00eetre dans le code visible du navigateur. Si elle est visible, n\u2019importe qui peut la copier et l\u2019utiliser abusivement.</p> <p>En faisant l\u2019appel depuis le backend (le serveur Express), la cl\u00e9 reste confidentielle, car elle est stock\u00e9e c\u00f4t\u00e9 serveur.</p>"},{"location":"17_NodeAPI/apiSimple/#2-contourner-les-limitations-techniques-cors","title":"2. Contourner les limitations techniques (CORS)","text":"<p>Certaines APIs ne permettent pas les appels directs depuis un navigateur. C\u2019est ce qu\u2019on appelle une restriction CORS (Cross-Origin Resource Sharing). Dans ce cas, l\u2019appel sera bloqu\u00e9 par le navigateur.</p> <p>En passant par notre propre serveur, ce probl\u00e8me dispara\u00eet, car le navigateur ne contacte plus l\u2019API externe directement : il contacte notre propre serveur, qui s\u2019occupe de faire l\u2019appel \u00e0 l\u2019API.</p>"},{"location":"17_NodeAPI/apiSimple/#3-ajouter-un-controle-ou-un-traitement","title":"3. Ajouter un contr\u00f4le ou un traitement","text":"<p>Lorsque l\u2019on passe par le backend, on peut aussi traiter les donn\u00e9es avant de les envoyer au client : filtrer, reformater, journaliser, valider, etc.</p>"},{"location":"17_NodeAPI/apiSimple/#en-resume","title":"En r\u00e9sum\u00e9","text":"<p>Appeler une API depuis le backend permet :</p> <ul> <li> <p>de prot\u00e9ger les cl\u00e9s API sensibles,</p> </li> <li> <p>de contourner les restrictions de s\u00e9curit\u00e9 du navigateur (CORS),</p> </li> <li> <p>et de mieux structurer les appels \u00e0 des services externes dans des projets professionnels.</p> </li> </ul> <p>Dans la section suivante, nous allons refaire notre exemple pr\u00e9c\u00e9dent (l\u2019API de conseils \"Advice Slip\") mais cette fois en passant par le backend avec Express.</p>"},{"location":"17_NodeAPI/apiSimple/#24-exemple-api-advice-slip-via-backend","title":"2.4 Exemple : API Advice Slip (via backend)","text":"<p>Dans cet exemple, nous allons refaire le petit site qui donne un conseil de vie al\u00e9atoire, mais cette fois-ci, nous allons passer par notre propre serveur Express pour contacter l\u2019API.</p> <p>Le navigateur n\u2019appelle donc plus directement l\u2019API <code>https://api.adviceslip.com</code>, il appelle notre propre route <code>/api/advice</code>. Notre backend se charge alors d\u2019appeler l\u2019API externe et de transmettre la r\u00e9ponse au frontend.</p>"},{"location":"17_NodeAPI/apiSimple/#structure-du-projet_1","title":"Structure du projet","text":"<pre><code>advice-frontend/\n\u251c\u2500\u2500 public/\n\u2502 \u251c\u2500\u2500 index.html\n\u2502 \u2514\u2500\u2500 css/\n\u2502   \u2514\u2500\u2500 style.css\n\u2502 \u2514\u2500\u2500 js/\n\u2502   \u2514\u2500\u2500 advice.js\n\u251c\u2500\u2500 server.js\n</code></pre>"},{"location":"17_NodeAPI/apiSimple/#serverjs_1","title":"\ud83d\udcc4 <code>server.js</code>","text":"<pre><code>import express from \"express\";\nimport fetch from \"node-fetch\"; // \u00c0 installer avec npm install node-fetch\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { dirname } from \"path\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst app = express();\nconst PORT = 3000;\n\n// Sert les fichiers HTML, CSS et JS\napp.use(express.static(path.join(__dirname, \"public\")));\n\n// Route que le frontend peut appeler\napp.get(\"/api/advice\", async (req, res) =&gt; {\n  try {\n    // Ici, c\u2019est le backend qui appelle l\u2019API externe\n    const response = await fetch(\"https://api.adviceslip.com/advice\");\n    const data = await response.json();\n\n    // On transmet simplement la r\u00e9ponse au frontend\n    res.json(data);\n  } catch (error) {\n    console.error(\"Erreur lors de l'appel \u00e0 l'API :\", error);\n    res.status(500).json({ error: \"Erreur serveur.\" });\n  }\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Serveur lanc\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre>"},{"location":"17_NodeAPI/apiSimple/#explication-du-fetch-dans-serverjs","title":"Explication du fetch dans server.js","text":"<p>Dans ce fichier, on utilise fetch dans le backend (avec node-fetch) pour appeler l\u2019API https://api.adviceslip.com. Le serveur Express agit comme un interm\u00e9diaire : il re\u00e7oit une requ\u00eate du navigateur, appelle l\u2019API, puis transmet la r\u00e9ponse.</p> <p>Ce fetch(...) est diff\u00e9rent de celui du frontend : ici, c\u2019est notre serveur Node.js qui fait l\u2019appel \u00e0 un service externe (l'API).</p>"},{"location":"17_NodeAPI/apiSimple/#publicindexhtml-et-publiccssstylecss_1","title":"<code>public/index.html</code> et <code>public/css/style.css</code>","text":"<p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Conseil du jour&lt;/title&gt;\n  &lt;script src=\"js/advice.js\" defer&gt;&lt;/script&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Besoin d\u2019un conseil ?&lt;/h1&gt;\n  &lt;button id=\"getAdvice\"&gt;Donne-moi un conseil&lt;/button&gt;\n  &lt;p id=\"advice\"&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    body {\n      font-family: sans-serif;\n      text-align: center;\n      padding: 2rem;\n    }\n    #advice {\n      margin-top: 2rem;\n      font-size: 1.2rem;\n      color: #333;\n    }\n</code></pre></p>"},{"location":"17_NodeAPI/apiSimple/#publicjsadvicejs_1","title":"<code>public/js/advice.js</code>","text":"<pre><code>document.getElementById(\"getAdvice\").addEventListener(\"click\", () =&gt; {\n  const adviceDisplay = document.getElementById(\"advice\");\n  adviceDisplay.textContent = \"Chargement...\";\n\n  // Appel \u00e0 notre propre backend (route /api/advice)\n  fetch(\"/api/advice\")\n    .then(res =&gt; res.json())\n    .then(data =&gt; {\n      adviceDisplay.textContent = `\ud83d\udca1 ${data.slip.advice}`;\n    })\n    .catch(err =&gt; {\n      adviceDisplay.textContent = \"Erreur de communication avec le serveur.\";\n      console.error(err);\n    });\n});\n</code></pre>"},{"location":"17_NodeAPI/apiSimple/#explication-du-fetch-dans-advicejs","title":"Explication du fetch dans advice.js","text":"<p>Dans ce fichier, on utilise fetch c\u00f4t\u00e9 client (dans le navigateur) pour appeler notre propre route <code>/api/advice</code>.</p> <p>C\u2019est le m\u00eame principe que dans les s\u00e9ances pr\u00e9c\u00e9dentes o\u00f9 l\u2019on utilisait <code>fetch(\"/api/users\")</code> pour interroger notre base de donn\u00e9es.</p> <p>Ici, au lieu de parler \u00e0 une base de donn\u00e9es, le serveur va parler \u00e0 une API externe.</p> <p>Autrement dit :</p> <ul> <li> <p>Le frontend fait un fetch vers notre backend,</p> </li> <li> <p>Le backend fait un fetch vers l\u2019API publique,</p> </li> <li> <p>Et il transmet la r\u00e9ponse.</p> </li> </ul>"},{"location":"17_NodeAPI/apiSimple/#resultat","title":"R\u00e9sultat","text":"<p>Quand l\u2019utilisateur clique sur le bouton :</p> <ul> <li> <p>Le navigateur envoie une requ\u00eate \u00e0 <code>/api/advice</code></p> </li> <li> <p>Le serveur appelle l\u2019API <code>https://api.adviceslip.com/advice</code></p> </li> <li> <p>Le serveur renvoie le conseil au navigateur</p> </li> <li> <p>Le conseil est affich\u00e9 sur la page</p> </li> </ul> <p>Cette m\u00e9thode est plus propre, plus s\u00fbre, et plus robuste que l\u2019appel direct depuis le frontend.</p>"},{"location":"17_NodeAPI/exercice/","title":"5 \u2013 Exercice : G\u00e9n\u00e9ration automatique du contenu d\u2019un article","text":"<p>Dans cet exercice, vous allez r\u00e9utiliser le site Mini-Blog que vous avez construit lors des cours pr\u00e9c\u00e9dents (stockage en base de donn\u00e9es inclus).</p> <p>Nous allons maintenant y int\u00e9grer une fonctionnalit\u00e9 d\u2019intelligence artificielle : un bouton permettra de g\u00e9n\u00e9rer automatiquement le contenu d\u2019un article \u00e0 partir de son titre, gr\u00e2ce \u00e0 une API de Hugging Face.</p>"},{"location":"17_NodeAPI/exercice/#objectif","title":"Objectif","text":"<p>Modifier le fichier <code>ajout.html</code> pour y ajouter un bouton \"G\u00e9n\u00e9rer article\".</p> <p>Lorsque l\u2019utilisateur entre un titre d\u2019article, il pourra cliquer sur ce bouton pour g\u00e9n\u00e9rer automatiquement un contenu, \u00e0 l\u2019aide d\u2019un mod\u00e8le de langage (comme <code>deepseek-ai/Janus-Pro-7B</code>).</p> <p>Le contenu g\u00e9n\u00e9r\u00e9 s\u2019affichera automatiquement dans le champ <code>&lt;textarea&gt;</code> pr\u00e9vu pour le corps de l\u2019article.</p> <p>Si l'utilisateur essaie d'appuyer sur le bouton permettant de g\u00e9n\u00e9rer l'article sans avoir mis de titre, un message s'affiche dans la zone de contenu \"Veuillez d'abord remplir un titre\".</p>"},{"location":"17_NodeAPI/exercice/#fichiers-a-modifier","title":"Fichiers \u00e0 modifier","text":"<ul> <li> <p><code>public/ajout.html</code> :   Ajouter un bouton de g\u00e9n\u00e9ration juste \u00e0 c\u00f4t\u00e9 du bouton de soumission.</p> </li> <li> <p><code>public/js/script_ajout.js</code> :   Ajouter le code JavaScript qui :</p> </li> <li> <p>r\u00e9cup\u00e8re le titre,</p> </li> <li> <p>construit un prompt (texte de demande),</p> </li> <li> <p>appelle l\u2019API de Hugging Face,</p> </li> <li> <p>ins\u00e8re la r\u00e9ponse dans le champ <code>contenu</code>.</p> </li> </ul>"},{"location":"17_NodeAPI/exercice/#detail-important-sur-le-prompt","title":"D\u00e9tail important sur le prompt","text":"<p>Le prompt envoy\u00e9 au mod\u00e8le doit \u00eatre partiellement en dur et partiellement dynamique :</p> <pre><code>Je veux que tu \u00e9crives un article sur : [titre fourni par l'utilisateur]\n</code></pre>"},{"location":"17_NodeAPI/exercice/#conseils","title":"Conseils","text":"<ul> <li> <p>Vous pouvez r\u00e9utiliser le m\u00eame mod\u00e8le que dans l\u2019exemple du chatbot (deepseek-ai/Janus-Pro-7B) et la m\u00eame image d\u2019exemple si n\u00e9cessaire.</p> </li> <li> <p>La g\u00e9n\u00e9ration doit se faire en JavaScript frontend, avec @gradio/client et un import via un CDN (comme https://esm.sh).</p> </li> <li> <p>Si vous avez des erreurs d\u2019appel API, v\u00e9rifiez que :</p> <ul> <li> <p>votre cl\u00e9 API Hugging Face est valide,</p> </li> <li> <p>vous utilisez bien le bon nom de mod\u00e8le,</p> </li> <li> <p>vous avez d\u00e9fini type=\"module\" (dans le package.json).</p> </li> </ul> </li> </ul>"},{"location":"17_NodeAPI/exercice/#resultat-attendu","title":"R\u00e9sultat attendu","text":"<p>Vous devez obtenir un site o\u00f9 l\u2019on peut :</p> <ul> <li> <p>Saisir un titre d\u2019article</p> </li> <li> <p>Cliquer sur \"G\u00e9n\u00e9rer article\"</p> </li> <li> <p>Voir un contenu g\u00e9n\u00e9r\u00e9 automatiquement appara\u00eetre dans la zone de texte</p> </li> <li> <p>Vous pouvez toujours l'enregistrer dans la base de donn\u00e9es avec le bouton \"Publier\"</p> </li> </ul> <p>Utilisation de <code>node-fetch</code> et passage aux modules <code>import/export</code> :</p> <p>Lorsque vous installez <code>node-fetch</code> avec la commande suivante : <pre><code>npm install node-fetch\n</code></pre> Cela vous oblige \u00e0 travailler avec la syntaxe ES module (import/export) au lieu de l\u2019ancienne syntaxe CommonJS (<code>require/module.exports</code>), car <code>node-fetch</code> ne fonctionne plus avec <code>require</code>.</p>"},{"location":"17_NodeAPI/exercice/#exemple-de-conversion-dans-serverjs","title":"Exemple de conversion dans server.js","text":"<p>Avant (CommonJS \u2013 ne fonctionne plus) : <pre><code>const fetch = require(\"node-fetch\");\nconst express = require(\"express\");\n</code></pre> Apr\u00e8s (ES module) : <pre><code>import fetch from \"node-fetch\";\nimport express from \"express\";\n</code></pre> N\u2019oubliez pas d\u2019ajouter \"type\": \"module\" dans votre package.json.</p>"},{"location":"17_NodeAPI/exercice/#changer-aussi-moduleexports","title":"Changer aussi module.exports","text":"<p>Si vous utilisez un fichier comme <code>articleRepository.js</code> et qu\u2019il contient : <pre><code>module.exports = ArticleRepository;\n</code></pre> Vous devez remplacer cette ligne par la version <code>ES module</code> : <pre><code>export default ArticleRepository;\n</code></pre> Et dans les fichiers o\u00f9 vous l\u2019utilisez : <pre><code>import ArticleRepository from \"./repository/articleRepository.js\";\n</code></pre> Cela permet de garder une structure moderne et compatible avec tous les outils que nous utilisons (comme fetch, @gradio/client, etc.).</p>"},{"location":"17_NodeAPI/huggingFace/","title":"Hugging Face","text":""},{"location":"17_NodeAPI/huggingFace/#31-presentation-de-hugging-face","title":"3.1 \u2013 Pr\u00e9sentation de Hugging Face","text":"<p>Hugging Face est une plateforme tr\u00e8s populaire qui regroupe des mod\u00e8les d'intelligence artificielle (IA) pr\u00eats \u00e0 l\u2019emploi, propos\u00e9s par la communaut\u00e9 et par des entreprises sp\u00e9cialis\u00e9es.</p> <p>Son objectif principal est de d\u00e9mocratiser l'acc\u00e8s \u00e0 l'IA, en permettant \u00e0 n'importe qui de tester, utiliser, et int\u00e9grer des mod\u00e8les performants dans ses propres applications. C'est un site que vous utiliserez beaucoup dans la suite de vos \u00e9tudes et dans votre carri\u00e8re professionnelle. </p>"},{"location":"17_NodeAPI/huggingFace/#petit-historique","title":"Petit historique","text":"<p>Hugging Face a \u00e9t\u00e9 fond\u00e9 en 2016 par Cl\u00e9ment Delangue, Julien Chaumond et Thomas Wolf, d'abord comme une start-up sp\u00e9cialis\u00e9e dans la cr\u00e9ation d\u2019un chatbot social bas\u00e9 sur l\u2019intelligence artificielle.</p> <p>Leur premier mod\u00e8le \u00e9tait un chatbot en langage naturel destin\u00e9 au grand public, mais tr\u00e8s vite, l\u2019entreprise s\u2019est orient\u00e9e vers le d\u00e9veloppement de biblioth\u00e8ques open source destin\u00e9es aux chercheurs et d\u00e9veloppeurs en traitement automatique du langage (NLP).</p> <p>C\u2019est en 2019 que Hugging Face a connu une forte croissance, notamment gr\u00e2ce \u00e0 sa biblioth\u00e8que Python nomm\u00e9e Transformers, qui permet de facilement utiliser des mod\u00e8les de type BERT, GPT, T5, etc. dans ses propres scripts Python.</p> <p>Aujourd\u2019hui, Hugging Face est reconnu comme l\u2019un des acteurs majeurs de l\u2019IA open source, et propose :</p> <ul> <li> <p>une biblioth\u00e8que Python tr\u00e8s utilis\u00e9e dans le monde de la recherche,</p> </li> <li> <p>un site web qui centralise des milliers de mod\u00e8les, jeux de donn\u00e9es et d\u00e9monstrations,</p> </li> <li> <p>une API d\u2019acc\u00e8s aux mod\u00e8les, utilisable depuis des applications web ou mobiles,</p> </li> <li> <p>et une plateforme collaborative o\u00f9 les utilisateurs peuvent partager leurs propres mod\u00e8les et exp\u00e9rimentations.</p> </li> </ul>"},{"location":"17_NodeAPI/huggingFace/#page-daccueil","title":"Page d'accueil","text":"<p>Sur la page d\u2019accueil, vous pouvez :</p> <ul> <li> <p>rechercher des mod\u00e8les, des datasets, ou des espaces interactifs,</p> </li> <li> <p>voir les mod\u00e8les les plus populaires ou r\u00e9cents,</p> </li> <li> <p>cr\u00e9er un compte pour commencer \u00e0 interagir avec les outils.</p> </li> </ul> <p>\u00c0 noter : vous devrez vous connecter avec un compte gratuit pour g\u00e9n\u00e9rer une cl\u00e9 d\u2019API plus tard.</p>"},{"location":"17_NodeAPI/huggingFace/#page-models","title":"Page \"Models\"","text":"<p>La page Models propose des milliers de mod\u00e8les d\u2019IA partag\u00e9s par la communaut\u00e9.</p> <p>Vous pouvez y trouver des mod\u00e8les pour :</p> <ul> <li> <p>le traitement du langage naturel (chatbot, r\u00e9sum\u00e9, classification\u2026),</p> </li> <li> <p>la g\u00e9n\u00e9ration d\u2019image (type DALL\u00b7E, Stable Diffusion\u2026),</p> </li> <li> <p>la reconnaissance vocale,</p> </li> <li> <p>et bien d'autres domaines.</p> </li> </ul> <p>Chaque mod\u00e8le a sa propre fiche, souvent avec un bouton \"Try it out\" qui permet de tester le mod\u00e8le directement dans le navigateur.</p>"},{"location":"17_NodeAPI/huggingFace/#fiche-dun-modele","title":"\ud83d\udd0d Fiche d\u2019un mod\u00e8le","text":"<p>Lorsque vous cliquez sur un mod\u00e8le, vous acc\u00e9dez \u00e0 sa page de pr\u00e9sentation. On y trouve :</p> <ul> <li> <p>une description du mod\u00e8le et de son fonctionnement,</p> </li> <li> <p>un champ pour faire un test interactif (entrer une phrase ou une image),</p> </li> <li> <p>des informations techniques (auteur, licence, taille, instructions d\u2019utilisation\u2026),</p> </li> <li> <p>parfois des exemples de requ\u00eates API pour utiliser le mod\u00e8le dans vos propres applications.</p> </li> </ul> <p>Certains mod\u00e8les sont tr\u00e8s puissants et n\u00e9cessitent une cl\u00e9 API valide pour \u00eatre utilis\u00e9s en dehors du site.</p>"},{"location":"17_NodeAPI/huggingFace/#page-spaces","title":"Page \"Spaces\"","text":"<p>Les Spaces sont des mini-applications interactives cr\u00e9\u00e9es avec des mod\u00e8les Hugging Face.</p> <p>Vous pouvez :</p> <ul> <li> <p>tester des chatbots, des outils de g\u00e9n\u00e9ration de texte ou d\u2019image,</p> </li> <li> <p>soumettre vos propres inputs (texte, image, audio\u2026),</p> </li> <li> <p>voir le code source utilis\u00e9 pour cr\u00e9er ces d\u00e9mos.</p> </li> </ul> <p>C\u2019est un excellent moyen d\u2019explorer les possibilit\u00e9s de l\u2019IA, m\u00eame sans \u00e9crire de code.</p> <p>Nous vous encourageons vivement \u00e0 explorer cette partie du site : testez plusieurs espaces, comparez les r\u00e9sultats, et inspirez-vous des id\u00e9es propos\u00e9es.</p>"},{"location":"17_NodeAPI/huggingFace/#page-access-tokens","title":"Page \"Access Tokens\"","text":"<p>Pour utiliser les mod\u00e8les Hugging Face dans une application (comme un site web), vous aurez besoin d\u2019une cl\u00e9 d\u2019API personnelle, appel\u00e9e Access Token.</p> <p>Pour la g\u00e9n\u00e9rer :</p> <ol> <li> <p>Cr\u00e9ez un compte ou connectez-vous.</p> </li> <li> <p>Acc\u00e9dez \u00e0 huggingface.co/settings/tokens.</p> </li> <li> <p>Cliquez sur New token, donnez-lui un nom et s\u00e9lectionnez le bon niveau d\u2019acc\u00e8s (souvent \"read\").</p> </li> </ol> <p>Cette cl\u00e9 est n\u00e9cessaire pour authentifier vos appels API (nous verrons comment l\u2019utiliser dans la suite du cours).</p> <p>Attention : cette cl\u00e9 est personnelle. Ne la partagez pas et ne l\u2019int\u00e9grez jamais directement dans un script frontend accessible publiquement.</p>"},{"location":"17_NodeAPI/huggingFace/#en-resume","title":"En r\u00e9sum\u00e9","text":"<p>Hugging Face est une bo\u00eete \u00e0 outils centrale pour travailler avec l\u2019IA moderne :</p> <ul> <li> <p>Elle permet d\u2019acc\u00e9der facilement \u00e0 des mod\u00e8les performants,</p> </li> <li> <p>De les tester directement dans le navigateur,</p> </li> <li> <p>Et de les int\u00e9grer dans ses propres projets via une API.</p> </li> </ul> <p>C\u2019est l\u2019endroit id\u00e9al pour explorer, exp\u00e9rimenter, et int\u00e9grer des mod\u00e8les d\u2019intelligence artificielle dans des applications web.</p>"},{"location":"17_NodeAPI/huggingFace/#32-creer-un-compte-et-generer-une-cle-dapi","title":"3.2 \u2013 Cr\u00e9er un compte et g\u00e9n\u00e9rer une cl\u00e9 d\u2019API","text":"<p>Pour pouvoir utiliser certains mod\u00e8les Hugging Face dans vos applications web, il est n\u00e9cessaire de disposer d\u2019un compte utilisateur ainsi que d\u2019une cl\u00e9 d\u2019acc\u00e8s personnelle, appel\u00e9e Access Token.</p> <p>Cette cl\u00e9 vous permettra de vous authentifier lors des appels \u00e0 l\u2019API Hugging Face. Elle est gratuite, mais elle permet \u00e0 Hugging Face de suivre qui utilise les mod\u00e8les et \u00e0 quelle fr\u00e9quence.</p>"},{"location":"17_NodeAPI/huggingFace/#etapes-pour-creer-un-compte-hugging-face","title":"\u00c9tapes pour cr\u00e9er un compte Hugging Face","text":"<ol> <li> <p>Rendez-vous sur https://huggingface.co</p> </li> <li> <p>Cliquez sur \"Sign up\" (ou \"Create account\") en haut \u00e0 droite.</p> </li> <li> <p>Remplissez le formulaire </p> </li> <li> <p>Cliquez sur \"Create account\"</p> </li> <li> <p>Confirmez votre e-mail si un message de validation est envoy\u00e9.</p> </li> </ol> <p>Une fois connect\u00e9, vous avez acc\u00e8s \u00e0 toutes les fonctionnalit\u00e9s du site, y compris la gestion des tokens API.</p>"},{"location":"17_NodeAPI/huggingFace/#creer-une-cle-dapi-access-token","title":"Cr\u00e9er une cl\u00e9 d\u2019API (Access Token)","text":"<ol> <li>Acc\u00e9dez \u00e0 la page des tokens : https://huggingface.co/settings/tokens</li> </ol> <ol> <li> <p>Cliquez sur le bouton \"Create new token\"</p> </li> <li> <p>Donnez un nom explicite \u00e0 votre token (ex. : <code>chatbot-web</code>, <code>test-ia</code>, etc.)</p> </li> <li> <p>Choisissez un type d\u2019acc\u00e8s :</p> </li> <li> <p>G\u00e9n\u00e9ralement, on s\u00e9lectionne \"Read\", suffisant pour interroger un mod\u00e8le</p> </li> <li> <p>Cliquez sur \"Generate token\"</p> </li> </ol> <p>Le token est g\u00e9n\u00e9r\u00e9 imm\u00e9diatement. Copiez-le et conservez-le pr\u00e9cieusement. La cl\u00e9 ne s'affichera qu'une seule fois, pensez bien \u00e0 l'enregistrer localement.</p>"},{"location":"17_NodeAPI/huggingFace/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ul> <li> <p>Vous pouvez cr\u00e9er plusieurs tokens pour diff\u00e9rents projets (par exemple : un token pour un chatbot, un autre pour un site de r\u00e9sum\u00e9 de texte).</p> </li> <li> <p>Ne partagez jamais votre token publiquement (ex. : sur GitHub ou dans du code JS visible dans le navigateur).</p> </li> <li> <p>Si un token est compromis, vous pouvez le supprimer ou en r\u00e9g\u00e9n\u00e9rer un nouveau \u00e0 tout moment depuis la page des tokens.</p> </li> </ul> <p>Une fois la cl\u00e9 API cr\u00e9\u00e9e, vous serez pr\u00eat \u00e0 l\u2019utiliser dans vos requ\u00eates vers les mod\u00e8les h\u00e9berg\u00e9s sur Hugging Face.  </p>"},{"location":"17_NodeAPI/huggingFace/#33-tester-un-modele-via-un-space-et-acceder-a-son-api","title":"3.3 \u2013 Tester un mod\u00e8le via un Space et acc\u00e9der \u00e0 son API","text":"<p>Tous les mod\u00e8les h\u00e9berg\u00e9s sur Hugging Face ne sont pas forc\u00e9ment accessibles via une API directe.</p> <p>En effet : - Certains mod\u00e8les sont h\u00e9berg\u00e9s uniquement comme des fichiers de code et de poids (utilisables en Python avec la biblioth\u00e8que <code>transformers</code>).</p> <ul> <li>D'autres ne sont pas activ\u00e9s pour \u00eatre utilis\u00e9s via l'API d\u2019inf\u00e9rence standard de Hugging Face.</li> </ul>"},{"location":"17_NodeAPI/huggingFace/#les-spaces-une-alternative-interactive-et-accessible-via-api","title":"Les Spaces : une alternative interactive et accessible via API","text":"<p>Un Space est une mini-application interactive bas\u00e9e sur un mod\u00e8le Hugging Face. Il s\u2019agit souvent d\u2019une interface graphique cr\u00e9\u00e9e avec Gradio ou Streamlit, que l\u2019on peut tester directement dans son navigateur.</p> <p>Bonne nouvelle : lorsqu\u2019un mod\u00e8le est utilis\u00e9 dans un Space, il devient accesssible via une API.</p>"},{"location":"17_NodeAPI/huggingFace/#tester-un-space","title":"Tester un Space","text":"<ol> <li> <p>Allez dans l\u2019onglet \"Spaces\" sur huggingface.co</p> </li> <li> <p>Recherchez un mod\u00e8le qui vous int\u00e9resse (ex. : chatbot, r\u00e9sum\u00e9, image\u2026)</p> </li> <li> <p>Cliquez sur un Space pour l\u2019ouvrir</p> </li> <li> <p>Essayez-le en envoyant une question ou une image, selon le cas</p> </li> </ol>"},{"location":"17_NodeAPI/huggingFace/#obtenir-lurl-de-lapi-du-space","title":"Obtenir l\u2019URL de l\u2019API du Space","text":"<p>Une fois dans un Space :</p> <ol> <li> <p>Faites d\u00e9filer la page jusqu\u2019en bas</p> </li> <li> <p>Recherchez la section \"Use via API\"</p> </li> <li> <p>Cliquez dessus pour faire appara\u00eetre les instructions d\u2019appel \u00e0 l\u2019API</p> </li> </ol> <p></p> <p>Vous verrez alors diff\u00e9rents onglets, g\u00e9n\u00e9ralement les suivants :</p> <ul> <li> <p>Python</p> </li> <li> <p>JavaScript</p> </li> <li> <p>cURL (Bash)</p> </li> </ul>"},{"location":"17_NodeAPI/huggingFace/#ce-que-nous-utiliserons","title":"Ce que nous utiliserons","text":"<p>Dans ce cours, nous utiliserons principalement l\u2019onglet JavaScript, qui contient des instructions pr\u00eates \u00e0 l\u2019emploi avec la biblioth\u00e8que :</p> <pre><code>import { Client } from \"@gradio/client\";\n</code></pre> <p>Cela permet d\u2019appeler les Spaces via un appel JS c\u00f4t\u00e9 frontend (avec la bonne cl\u00e9 API).</p> <p>Nous verrons dans la suite du cours comment int\u00e9grer cet appel dans une vraie page web, comme un mini chatbot.</p>"},{"location":"17_NodeAPI/tutoChatbot/","title":"Tuto chatbot","text":""},{"location":"17_NodeAPI/tutoChatbot/#41-construire-un-mini-chatbot-avec-une-api-hugging-face","title":"4.1 \u2013 Construire un mini chatbot avec une API Hugging Face","text":"<p>Dans ce tutoriel, nous allons construire un mini site web de type chatbot qui envoie des messages \u00e0 un mod\u00e8le d\u2019intelligence artificielle h\u00e9berg\u00e9 sur Hugging Face et re\u00e7oit des r\u00e9ponses automatiquement.</p> <p>Nous utiliserons le mod\u00e8le <code>deepseek-ai/Janus-Pro-7B</code>, un mod\u00e8le multimodal capable de r\u00e9pondre \u00e0 des questions bas\u00e9es sur du texte et des images.</p> <p>Pour ce projet, nous utiliserons uniquement le texte, comme le mod\u00e8le \u00e0 besoin d'une image pour fonctionner, nous lui en donnerons une en dur dans le code, mais nous ne l'utiliserons pas directement.</p>"},{"location":"17_NodeAPI/tutoChatbot/#structure-du-projet","title":"Structure du projet","text":"<pre><code>chatbot-janus/\n\u251c\u2500\u2500 public/\n\u2502 \u251c\u2500\u2500 index.html\n\u2502 \u2514\u2500\u2500 css/\n\u2502   \u2514\u2500\u2500 style.css\n\u2502 \u2514\u2500\u2500 js/\n\u2502   \u2514\u2500\u2500 script.js\n\u251c\u2500\u2500 server.js\n\u251c\u2500\u2500 package.json\n</code></pre>"},{"location":"17_NodeAPI/tutoChatbot/#fichier-packagejson","title":"Fichier <code>package.json</code>","text":"<p>Voici un fichier <code>package.json</code> minimal :</p> <p><pre><code>{\n  \"name\": \"chatbot-janus\",\n  \"type\": \"module\",\n  \"main\": \"server.js\",\n  \"dependencies\": {\n    \"express\": \"^4.18.2\"\n  }\n}\n</code></pre> Ce package est d\u00e9j\u00e0 cr\u00e9\u00e9 lorsque vous initiez le projet avec npm et installer Express, n\u00e9anmoins, il faut ajouter la ligne <code>\"type\": \"module\",</code>.</p>"},{"location":"17_NodeAPI/tutoChatbot/#installation-necessaire","title":"Installation n\u00e9cessaire","text":"<p>Il vous faudra \u00e9galement installer ceci :</p> <pre><code>npm install node-fetch\nnpm install @gradio/client\n</code></pre>"},{"location":"17_NodeAPI/tutoChatbot/#serverjs","title":"<code>server.js</code>","text":"<p><pre><code>import express from \"express\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { dirname } from \"path\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.static(path.join(__dirname, \"public\")));\n\napp.listen(PORT, () =&gt; {\n  console.log(`Serveur lanc\u00e9 sur http://localhost:${PORT}`);\n});\n</code></pre> Ce fichier sert \u00e0 lancer un petit serveur Express pour :</p> <ul> <li> <p>rendre accessibles les fichiers HTML, CSS et JS dans le dossier /public</p> </li> <li> <p>permettre de visiter l\u2019application sur http://localhost:3000</p> </li> </ul>"},{"location":"17_NodeAPI/tutoChatbot/#publicindexhtml-et-publiccssstylecss","title":"<code>public/index.html</code> et <code>public/css/style.css</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Chatbot Hugging Face&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt;\n  &lt;script type=\"module\" src=\"js/script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Chatbot IA (Janus)&lt;/h1&gt;\n  &lt;/header&gt;\n\n  &lt;main&gt;\n    &lt;div id=\"chatbox\"&gt;\n      &lt;div id=\"messages\"&gt;&lt;/div&gt;\n      &lt;input id=\"userInput\" type=\"text\" placeholder=\"Tapez votre message...\" /&gt;\n      &lt;button onclick=\"sendMessage()\"&gt;Envoyer&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/main&gt;\n\n  &lt;footer&gt;\n    &lt;p&gt;Propuls\u00e9 par Hugging Face \u2013 Janus-Pro-7B&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>body {\n  font-family: Arial, sans-serif;\n  padding: 20px;\n  background-color: #f9f9f9;\n  max-width: 700px;\n  margin: auto;\n}\n\nheader, footer {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n#chatbox {\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  padding: 1rem;\n  background: white;\n}\n\n#messages {\n  height: 300px;\n  overflow-y: auto;\n  border-bottom: 1px solid #ddd;\n  padding: 0.5rem;\n  margin-bottom: 1rem;\n  background-color: #f5f5f5;\n}\n\n#messages p {\n  margin: 5px 0;\n}\n\n.user-message {\n  text-align: right;\n  color: blue;\n}\n\n.bot-message {\n  text-align: left;\n  color: green;\n}\n\ninput {\n  width: 80%;\n  padding: 0.5rem;\n  font-size: 1rem;\n}\n\nbutton {\n  padding: 0.5rem 1rem;\n  font-size: 1rem;\n}\n</code></pre>"},{"location":"17_NodeAPI/tutoChatbot/#publicjsscriptjs","title":"<code>public/js/script.js</code>","text":"<p><pre><code>import { Client } from \"https://esm.sh/@gradio/client\";\n\nconst apiKey = \"MyAccessToken\"; // Remplace par ta cl\u00e9 Hugging Face\n\nasync function sendMessage() {\n  const userMessage = document.getElementById(\"userInput\").value;\n  if (!userMessage.trim()) return;\n\n  displayMessage(userMessage, \"user\");\n\n  const headers = {\n    Authorization: `Bearer ${apiKey}`\n  };\n\n  try {\n    const client = await Client.connect(\"deepseek-ai/Janus-Pro-7B\", { headers });\n\n    // L'API n\u00e9cessite une image, on en charge une par d\u00e9faut\n    const imageResponse = await fetch(\"https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png\");\n    const exampleImage = await imageResponse.blob();\n\n    const result = await client.predict(\"/multimodal_understanding\", {\n      image: exampleImage,\n      question: userMessage,\n      seed: 3,\n      top_p: 0,\n      temperature: 0,\n    });\n\n    displayMessage(result.data[0], \"bot\");\n  } catch (err) {\n    displayMessage(\"Erreur de communication avec l'API.\", \"bot\");\n    console.error(\"Erreur API :\", err);\n  }\n\n  document.getElementById(\"userInput\").value = \"\";\n}\n\nwindow.sendMessage = sendMessage;\n\nfunction displayMessage(message, type) {\n  const messagesContainer = document.getElementById(\"messages\");\n  const p = document.createElement(\"p\");\n  p.className = type === \"user\" ? \"user-message\" : \"bot-message\";\n  p.textContent = message;\n  messagesContainer.appendChild(p);\n  messagesContainer.scrollTop = messagesContainer.scrollHeight;\n}\n</code></pre> Dans ce code, nous voyons deux fonctions. La seconde <code>displayMessage()</code> est une fonction qui va permettre d'afficher le message dans la zone de discussion (l'historique des messages). La premi\u00e8re <code>sendMessage()</code> est une fonction asynchrone qui va permettre d'interroger l'API de Hugging Face. Cette fonction commence par r\u00e9cup\u00e9rer le texte entr\u00e9 par l'utilisateur, elle va ensuite afficher ce texte dans la zone des messages gr\u00e2ce \u00e0 <code>displayMessage()</code>. Elle va ensuite suivre le code que Hugging Face nous a sugg\u00e9r\u00e9 pour utiliser correctement l'API. Remarquer le <code>try/catch</code> dans le cas o\u00f9 il y aurait un probl\u00e8me avec le serveur h\u00e9bergeant l'API. Une fois le r\u00e9sultat obtenu, il est affich\u00e9 dans la zone de discussion.</p>"},{"location":"17_NodeAPI/tutoChatbot/#comparaison-avec-le-code-propose-sur-hugging-face","title":"Comparaison avec le code propos\u00e9 sur Hugging Face","text":"<p>Lorsque vous cliquez sur \"Use via API\" dans le Space Janus-Pro-7B, vous voyez ce code propos\u00e9 :</p> <p><pre><code>import { Client } from \"@gradio/client\";\n\nconst response_0 = await fetch(\"https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png\");\nconst exampleImage = await response_0.blob();\n\nconst client = await Client.connect(\"deepseek-ai/Janus-Pro-7B\");\n\nconst result = await client.predict(\"/multimodal_understanding\", {\n  image: exampleImage,\n  question: \"Hello!\",\n  seed: 3,\n  top_p: 0,\n  temperature: 0,\n});\n\nconsole.log(result.data);\n</code></pre> Notre version apporte plusieurs am\u00e9liorations pratiques :</p> <ul> <li> <p>Elle utilise un champ de saisie dynamique (pas une question cod\u00e9e en dur)</p> </li> <li> <p>Elle utilise un affichage interactif de messages</p> </li> <li> <p>Elle ajoute l\u2019authentification via une cl\u00e9 API dans les en-t\u00eates HTTP</p> </li> <li> <p>Elle s\u00e9pare le backend du frontend avec un petit serveur Express</p> </li> </ul>"},{"location":"17_NodeAPI/tutoChatbot/#resultat","title":"R\u00e9sultat","text":"<p>En lan\u00e7ant le projet avec node server.js et en acc\u00e9dant \u00e0 http://localhost:3000, vous pourrez :</p> <ul> <li> <p>\u00e9crire une question dans le champ texte,</p> </li> <li> <p>voir votre message s\u2019afficher \u00e0 droite,</p> </li> <li> <p>recevoir une r\u00e9ponse du mod\u00e8le Janus-Pro-7B \u00e0 gauche.</p> </li> </ul>"},{"location":"17_NodeAPI/tutoChatbot/#42-note-deplacer-lappel-api-dans-le-backend-bonne-pratique","title":"4.2 \u2013 Note : d\u00e9placer l\u2019appel API dans le backend (bonne pratique)","text":"<p>Dans notre projet, nous avons choisi de faire l\u2019appel \u00e0 l\u2019API de Hugging Face depuis le code JavaScript du frontend, c\u2019est-\u00e0-dire directement dans le navigateur.</p> <p>C\u2019est la solution la plus simple \u00e0 mettre en \u0153uvre, mais ce n\u2019est pas la plus s\u00e9curis\u00e9e ni la plus propre :</p> <ul> <li> <p>La cl\u00e9 API est visible dans le code source, ce qui n\u2019est pas recommand\u00e9.</p> </li> <li> <p>Le navigateur est directement responsable de la communication avec l\u2019API externe.</p> </li> </ul>"},{"location":"17_NodeAPI/tutoChatbot/#une-bonne-pratique-deplacer-lappel-vers-le-backend","title":"Une bonne pratique : d\u00e9placer l\u2019appel vers le backend","text":"<p>Dans un vrai projet, on pr\u00e9f\u00e8re faire l\u2019appel API dans le serveur Express, c\u2019est-\u00e0-dire dans <code>server.js</code>, et non dans le fichier <code>script.js</code>.</p> <p>Cela permettrait de :</p> <ul> <li> <p>garder la cl\u00e9 API confidentielle sur le serveur,</p> </li> <li> <p>mieux contr\u00f4ler ou limiter les requ\u00eates,</p> </li> <li> <p>et \u00e9viter les \u00e9ventuelles erreurs de CORS.</p> </li> </ul>"},{"location":"17_NodeAPI/tutoChatbot/#pourquoi-ne-le-fait-on-pas-ici","title":"Pourquoi ne le fait-on pas ici ?","text":"<p>Ce genre de structure n\u00e9cessite un peu plus de logique c\u00f4t\u00e9 serveur (gestion des param\u00e8tres, communication entre modules, etc.). Par manque de temps, nous ne verrons pas cette architecture compl\u00e8te cette ann\u00e9e, mais vous en connaissez maintenant le principe et les avantages.</p>"}]}